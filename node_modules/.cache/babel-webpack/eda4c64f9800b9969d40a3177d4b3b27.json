{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from 'primeng/inputtext';\nimport { InputTextModule } from 'primeng/inputtext';\nimport * as i3 from 'primeng/button';\nimport { ButtonModule } from 'primeng/button';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nconst _c0 = [\"input\"];\n\nconst _c1 = function () {\n  return {\n    \"p-inputnumber-button p-inputnumber-button-up\": true\n  };\n};\n\nconst _c2 = function () {\n  return {\n    \"p-inputnumber-button p-inputnumber-button-down\": true\n  };\n};\n\nfunction InputNumber_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"span\", 5);\n    i0.ɵɵelementStart(1, \"button\", 6);\n    i0.ɵɵlistener(\"mousedown\", function InputNumber_span_3_Template_button_mousedown_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return ctx_r4.onUpButtonMouseDown($event);\n    })(\"mouseup\", function InputNumber_span_3_Template_button_mouseup_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return ctx_r6.onUpButtonMouseUp();\n    })(\"mouseleave\", function InputNumber_span_3_Template_button_mouseleave_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r7 = i0.ɵɵnextContext();\n      return ctx_r7.onUpButtonMouseLeave();\n    })(\"keydown\", function InputNumber_span_3_Template_button_keydown_1_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return ctx_r8.onUpButtonKeyDown($event);\n    })(\"keyup\", function InputNumber_span_3_Template_button_keyup_1_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return ctx_r9.onUpButtonKeyUp();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"button\", 6);\n    i0.ɵɵlistener(\"mousedown\", function InputNumber_span_3_Template_button_mousedown_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return ctx_r10.onDownButtonMouseDown($event);\n    })(\"mouseup\", function InputNumber_span_3_Template_button_mouseup_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return ctx_r11.onDownButtonMouseUp();\n    })(\"mouseleave\", function InputNumber_span_3_Template_button_mouseleave_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return ctx_r12.onDownButtonMouseLeave();\n    })(\"keydown\", function InputNumber_span_3_Template_button_keydown_2_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r13 = i0.ɵɵnextContext();\n      return ctx_r13.onDownButtonKeyDown($event);\n    })(\"keyup\", function InputNumber_span_3_Template_button_keyup_2_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return ctx_r14.onDownButtonKeyUp();\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.incrementButtonClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(10, _c1))(\"icon\", ctx_r1.incrementButtonIcon)(\"disabled\", ctx_r1.disabled);\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassMap(ctx_r1.decrementButtonClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(11, _c2))(\"icon\", ctx_r1.decrementButtonIcon)(\"disabled\", ctx_r1.disabled);\n  }\n}\n\nfunction InputNumber_button_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r16 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"mousedown\", function InputNumber_button_4_Template_button_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r15 = i0.ɵɵnextContext();\n      return ctx_r15.onUpButtonMouseDown($event);\n    })(\"mouseup\", function InputNumber_button_4_Template_button_mouseup_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r17 = i0.ɵɵnextContext();\n      return ctx_r17.onUpButtonMouseUp();\n    })(\"mouseleave\", function InputNumber_button_4_Template_button_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r18 = i0.ɵɵnextContext();\n      return ctx_r18.onUpButtonMouseLeave();\n    })(\"keydown\", function InputNumber_button_4_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r19 = i0.ɵɵnextContext();\n      return ctx_r19.onUpButtonKeyDown($event);\n    })(\"keyup\", function InputNumber_button_4_Template_button_keyup_0_listener() {\n      i0.ɵɵrestoreView(_r16);\n      const ctx_r20 = i0.ɵɵnextContext();\n      return ctx_r20.onUpButtonKeyUp();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.incrementButtonClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(5, _c1))(\"icon\", ctx_r2.incrementButtonIcon)(\"disabled\", ctx_r2.disabled);\n  }\n}\n\nfunction InputNumber_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r22 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 6);\n    i0.ɵɵlistener(\"mousedown\", function InputNumber_button_5_Template_button_mousedown_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r21 = i0.ɵɵnextContext();\n      return ctx_r21.onDownButtonMouseDown($event);\n    })(\"mouseup\", function InputNumber_button_5_Template_button_mouseup_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r23 = i0.ɵɵnextContext();\n      return ctx_r23.onDownButtonMouseUp();\n    })(\"mouseleave\", function InputNumber_button_5_Template_button_mouseleave_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r24 = i0.ɵɵnextContext();\n      return ctx_r24.onDownButtonMouseLeave();\n    })(\"keydown\", function InputNumber_button_5_Template_button_keydown_0_listener($event) {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r25 = i0.ɵɵnextContext();\n      return ctx_r25.onDownButtonKeyDown($event);\n    })(\"keyup\", function InputNumber_button_5_Template_button_keyup_0_listener() {\n      i0.ɵɵrestoreView(_r22);\n      const ctx_r26 = i0.ɵɵnextContext();\n      return ctx_r26.onDownButtonKeyUp();\n    });\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.decrementButtonClass);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction0(5, _c2))(\"icon\", ctx_r3.decrementButtonIcon)(\"disabled\", ctx_r3.disabled);\n  }\n}\n\nconst _c3 = function (a1, a2, a3) {\n  return {\n    \"p-inputnumber p-component\": true,\n    \"p-inputnumber-buttons-stacked\": a1,\n    \"p-inputnumber-buttons-horizontal\": a2,\n    \"p-inputnumber-buttons-vertical\": a3\n  };\n};\n\nconst INPUTNUMBER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => InputNumber),\n  multi: true\n};\n\nclass InputNumber {\n  constructor(el, cd) {\n    this.el = el;\n    this.cd = cd;\n    this.showButtons = false;\n    this.format = true;\n    this.buttonLayout = \"stacked\";\n    this.incrementButtonIcon = 'pi pi-angle-up';\n    this.decrementButtonIcon = 'pi pi-angle-down';\n    this.step = 1;\n    this.onInput = new EventEmitter();\n    this.onFocus = new EventEmitter();\n    this.onBlur = new EventEmitter();\n    this.onKeyDown = new EventEmitter();\n\n    this.onModelChange = () => {};\n\n    this.onModelTouched = () => {};\n\n    this.groupChar = '';\n    this.prefixChar = '';\n    this.suffixChar = '';\n    this._modeOption = \"decimal\";\n    this._useGroupingOption = true;\n  }\n\n  get locale() {\n    return this._localeOption;\n  }\n\n  set locale(localeOption) {\n    this._localeOption = localeOption;\n    this.updateConstructParser();\n  }\n\n  get localeMatcher() {\n    return this._localeMatcherOption;\n  }\n\n  set localeMatcher(localeMatcherOption) {\n    this._localeMatcherOption = localeMatcherOption;\n    this.updateConstructParser();\n  }\n\n  get mode() {\n    return this._modeOption;\n  }\n\n  set mode(modeOption) {\n    this._modeOption = modeOption;\n    this.updateConstructParser();\n  }\n\n  get currency() {\n    return this._currencyOption;\n  }\n\n  set currency(currencyOption) {\n    this._currencyOption = currencyOption;\n    this.updateConstructParser();\n  }\n\n  get currencyDisplay() {\n    return this._currencyDisplayOption;\n  }\n\n  set currencyDisplay(currencyDisplayOption) {\n    this._currencyDisplayOption = currencyDisplayOption;\n    this.updateConstructParser();\n  }\n\n  get useGrouping() {\n    return this._useGroupingOption;\n  }\n\n  set useGrouping(useGroupingOption) {\n    this._useGroupingOption = useGroupingOption;\n    this.updateConstructParser();\n  }\n\n  get minFractionDigits() {\n    return this._minFractionDigitsOption;\n  }\n\n  set minFractionDigits(minFractionDigitsOption) {\n    this._minFractionDigitsOption = minFractionDigitsOption;\n    this.updateConstructParser();\n  }\n\n  get maxFractionDigits() {\n    return this._maxFractionDigitsOption;\n  }\n\n  set maxFractionDigits(maxFractionDigitsOption) {\n    this._maxFractionDigitsOption = maxFractionDigitsOption;\n    this.updateConstructParser();\n  }\n\n  get prefix() {\n    return this._prefixOption;\n  }\n\n  set prefix(prefixOption) {\n    this._prefixOption = prefixOption;\n    this.updateConstructParser();\n  }\n\n  get suffix() {\n    return this._suffixOption;\n  }\n\n  set suffix(suffixOption) {\n    this._suffixOption = suffixOption;\n    this.updateConstructParser();\n  }\n\n  get disabled() {\n    return this._disabled;\n  }\n\n  set disabled(disabled) {\n    if (disabled) this.focused = false;\n    this._disabled = disabled;\n    if (this.timer) this.clearTimer();\n  }\n\n  ngOnInit() {\n    this.constructParser();\n    this.initialized = true;\n  }\n\n  getOptions() {\n    return {\n      localeMatcher: this.localeMatcher,\n      style: this.mode,\n      currency: this.currency,\n      currencyDisplay: this.currencyDisplay,\n      useGrouping: this.useGrouping,\n      minimumFractionDigits: this.minFractionDigits,\n      maximumFractionDigits: this.maxFractionDigits\n    };\n  }\n\n  constructParser() {\n    this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n    const numerals = [...new Intl.NumberFormat(this.locale, {\n      useGrouping: false\n    }).format(9876543210)].reverse();\n    const index = new Map(numerals.map((d, i) => [d, i]));\n    this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n    this._decimal = this.getDecimalExpression();\n    this._group = this.getGroupingExpression();\n    this._minusSign = this.getMinusSignExpression();\n    this._currency = this.getCurrencyExpression();\n    this._suffix = this.getSuffixExpression();\n    this._prefix = this.getPrefixExpression();\n\n    this._index = d => index.get(d);\n  }\n\n  updateConstructParser() {\n    if (this.initialized) {\n      this.constructParser();\n    }\n  }\n\n  escapeRegExp(text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  }\n\n  getDecimalExpression() {\n    const formatter = new Intl.NumberFormat(this.locale, {\n      useGrouping: false\n    });\n    return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\n  }\n\n  getGroupingExpression() {\n    const formatter = new Intl.NumberFormat(this.locale, {\n      useGrouping: true\n    });\n    this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n    return new RegExp(`[${this.groupChar}]`, 'g');\n  }\n\n  getMinusSignExpression() {\n    const formatter = new Intl.NumberFormat(this.locale, {\n      useGrouping: false\n    });\n    return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n  }\n\n  getCurrencyExpression() {\n    if (this.currency) {\n      const formatter = new Intl.NumberFormat(this.locale, {\n        style: 'currency',\n        currency: this.currency,\n        currencyDisplay: this.currencyDisplay\n      });\n      return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\n    }\n\n    return new RegExp(`[]`, 'g');\n  }\n\n  getPrefixExpression() {\n    if (this.prefix) {\n      this.prefixChar = this.prefix;\n    } else {\n      const formatter = new Intl.NumberFormat(this.locale, {\n        style: this.mode,\n        currency: this.currency,\n        currencyDisplay: this.currencyDisplay\n      });\n      this.prefixChar = formatter.format(1).split('1')[0];\n    }\n\n    return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n  }\n\n  getSuffixExpression() {\n    if (this.suffix) {\n      this.suffixChar = this.suffix;\n    } else {\n      const formatter = new Intl.NumberFormat(this.locale, {\n        style: this.mode,\n        currency: this.currency,\n        currencyDisplay: this.currencyDisplay,\n        minimumFractionDigits: 0,\n        maximumFractionDigits: 0\n      });\n      this.suffixChar = formatter.format(1).split('1')[1];\n    }\n\n    return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n  }\n\n  formatValue(value) {\n    if (value != null) {\n      if (value === '-') {\n        // Minus sign\n        return value;\n      }\n\n      if (this.format) {\n        let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n        let formattedValue = formatter.format(value);\n\n        if (this.prefix) {\n          formattedValue = this.prefix + formattedValue;\n        }\n\n        if (this.suffix) {\n          formattedValue = formattedValue + this.suffix;\n        }\n\n        return formattedValue;\n      }\n\n      return value.toString();\n    }\n\n    return '';\n  }\n\n  parseValue(text) {\n    let filteredText = text.replace(this._suffix, '').replace(this._prefix, '').trim().replace(/\\s/g, '').replace(this._currency, '').replace(this._group, '').replace(this._minusSign, '-').replace(this._decimal, '.').replace(this._numeral, this._index);\n\n    if (filteredText) {\n      if (filteredText === '-') // Minus sign\n        return filteredText;\n      let parsedValue = +filteredText;\n      return isNaN(parsedValue) ? null : parsedValue;\n    }\n\n    return null;\n  }\n\n  repeat(event, interval, dir) {\n    let i = interval || 500;\n    this.clearTimer();\n    this.timer = setTimeout(() => {\n      this.repeat(event, 40, dir);\n    }, i);\n    this.spin(event, dir);\n  }\n\n  spin(event, dir) {\n    let step = this.step * dir;\n    let currentValue = this.parseValue(this.input.nativeElement.value) || 0;\n    let newValue = this.validateValue(currentValue + step);\n\n    if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\n      return;\n    }\n\n    this.updateInput(newValue, null, 'spin');\n    this.updateModel(event, newValue);\n    this.handleOnInput(event, currentValue, newValue);\n  }\n\n  onUpButtonMouseDown(event) {\n    this.input.nativeElement.focus();\n    this.repeat(event, null, 1);\n    event.preventDefault();\n  }\n\n  onUpButtonMouseUp() {\n    this.clearTimer();\n  }\n\n  onUpButtonMouseLeave() {\n    this.clearTimer();\n  }\n\n  onUpButtonKeyDown(event) {\n    if (event.keyCode === 32 || event.keyCode === 13) {\n      this.repeat(event, null, 1);\n    }\n  }\n\n  onUpButtonKeyUp() {\n    this.clearTimer();\n  }\n\n  onDownButtonMouseDown(event) {\n    this.input.nativeElement.focus();\n    this.repeat(event, null, -1);\n    event.preventDefault();\n  }\n\n  onDownButtonMouseUp() {\n    this.clearTimer();\n  }\n\n  onDownButtonMouseLeave() {\n    this.clearTimer();\n  }\n\n  onDownButtonKeyUp() {\n    this.clearTimer();\n  }\n\n  onDownButtonKeyDown(event) {\n    if (event.keyCode === 32 || event.keyCode === 13) {\n      this.repeat(event, null, -1);\n    }\n  }\n\n  onUserInput(event) {\n    if (this.isSpecialChar) {\n      event.target.value = this.lastValue;\n    }\n\n    this.isSpecialChar = false;\n  }\n\n  onInputKeyDown(event) {\n    this.lastValue = event.target.value;\n\n    if (event.shiftKey || event.altKey) {\n      this.isSpecialChar = true;\n      return;\n    }\n\n    let selectionStart = event.target.selectionStart;\n    let selectionEnd = event.target.selectionEnd;\n    let inputValue = event.target.value;\n    let newValueStr = null;\n\n    if (event.altKey) {\n      event.preventDefault();\n    }\n\n    switch (event.which) {\n      //up\n      case 38:\n        this.spin(event, 1);\n        event.preventDefault();\n        break;\n      //down\n\n      case 40:\n        this.spin(event, -1);\n        event.preventDefault();\n        break;\n      //left\n\n      case 37:\n        if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n          event.preventDefault();\n        }\n\n        break;\n      //right\n\n      case 39:\n        if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n          event.preventDefault();\n        }\n\n        break;\n      //enter\n\n      case 13:\n        let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n        this.input.nativeElement.value = this.formatValue(newValue);\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n        this.updateModel(event, newValue);\n        break;\n      //backspace\n\n      case 8:\n        {\n          event.preventDefault();\n\n          if (selectionStart === selectionEnd) {\n            let deleteChar = inputValue.charAt(selectionStart - 1);\n            let decimalCharIndex = inputValue.search(this._decimal);\n            this._decimal.lastIndex = 0;\n\n            if (this.isNumeralChar(deleteChar)) {\n              if (this._group.test(deleteChar)) {\n                this._group.lastIndex = 0;\n                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n              } else if (this._decimal.test(deleteChar)) {\n                this._decimal.lastIndex = 0;\n                this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\n              } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n              } else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n              } else {\n                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n              }\n            }\n\n            this.updateValue(event, newValueStr, null, 'delete-single');\n          } else {\n            newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n            this.updateValue(event, newValueStr, null, 'delete-range');\n          }\n\n          break;\n        }\n      // del\n\n      case 46:\n        event.preventDefault();\n\n        if (selectionStart === selectionEnd) {\n          let deleteChar = inputValue.charAt(selectionStart);\n          let decimalCharIndex = inputValue.search(this._decimal);\n          this._decimal.lastIndex = 0;\n\n          if (this.isNumeralChar(deleteChar)) {\n            if (this._group.test(deleteChar)) {\n              this._group.lastIndex = 0;\n              newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n            } else if (this._decimal.test(deleteChar)) {\n              this._decimal.lastIndex = 0;\n              this.input.nativeElement.setSelectionRange(selectionStart + 1, selectionStart + 1);\n            } else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n              newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n            } else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n              newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n              newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n            } else {\n              newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n            }\n          }\n\n          this.updateValue(event, newValueStr, null, 'delete-back-single');\n        } else {\n          newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n          this.updateValue(event, newValueStr, null, 'delete-range');\n        }\n\n        break;\n\n      default:\n        break;\n    }\n\n    this.onKeyDown.emit(event);\n  }\n\n  onInputKeyPress(event) {\n    event.preventDefault();\n    let code = event.which || event.keyCode;\n    let char = String.fromCharCode(code);\n    const isDecimalSign = this.isDecimalSign(char);\n    const isMinusSign = this.isMinusSign(char);\n\n    if (48 <= code && code <= 57 || isMinusSign || isDecimalSign) {\n      this.insert(event, char, {\n        isDecimalSign,\n        isMinusSign\n      });\n    }\n  }\n\n  onPaste(event) {\n    if (!this.disabled) {\n      event.preventDefault();\n      let data = (event.clipboardData || window['clipboardData']).getData('Text');\n\n      if (data) {\n        let filteredData = this.parseValue(data);\n\n        if (filteredData != null) {\n          this.insert(event, filteredData.toString());\n        }\n      }\n    }\n  }\n\n  isMinusSign(char) {\n    if (this._minusSign.test(char)) {\n      this._minusSign.lastIndex = 0;\n      return true;\n    }\n\n    return false;\n  }\n\n  isDecimalSign(char) {\n    if (this._decimal.test(char)) {\n      this._decimal.lastIndex = 0;\n      return true;\n    }\n\n    return false;\n  }\n\n  insert(event, text, sign = {\n    isDecimalSign: false,\n    isMinusSign: false\n  }) {\n    let selectionStart = this.input.nativeElement.selectionStart;\n    let selectionEnd = this.input.nativeElement.selectionEnd;\n    let inputValue = this.input.nativeElement.value.trim();\n    const decimalCharIndex = inputValue.search(this._decimal);\n    this._decimal.lastIndex = 0;\n    const minusCharIndex = inputValue.search(this._minusSign);\n    this._minusSign.lastIndex = 0;\n    let newValueStr;\n\n    if (sign.isMinusSign) {\n      if (selectionStart === 0) {\n        newValueStr = inputValue;\n\n        if (minusCharIndex === -1 || selectionEnd !== 0) {\n          newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n        }\n\n        this.updateValue(event, newValueStr, text, 'insert');\n      }\n    } else if (sign.isDecimalSign) {\n      if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n        this.updateValue(event, inputValue, text, 'insert');\n      } else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n        newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n        this.updateValue(event, newValueStr, text, 'insert');\n      }\n    } else {\n      const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n      const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n      if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n        if (selectionStart + text.length - (decimalCharIndex + 1) <= maxFractionDigits) {\n          newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n          this.updateValue(event, newValueStr, text, operation);\n        }\n      } else {\n        newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n        this.updateValue(event, newValueStr, text, operation);\n      }\n    }\n  }\n\n  insertText(value, text, start, end) {\n    let textSplit = text.split('.');\n\n    if (textSplit.length == 2) {\n      const decimalCharIndex = value.slice(start, end).search(this._decimal);\n      this._decimal.lastIndex = 0;\n      return decimalCharIndex > 0 ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : value || this.formatValue(text);\n    } else if (end - start === value.length) {\n      return this.formatValue(text);\n    } else if (start === 0) {\n      return text + value.slice(end);\n    } else if (end === value.length) {\n      return value.slice(0, start) + text;\n    } else {\n      return value.slice(0, start) + text + value.slice(end);\n    }\n  }\n\n  deleteRange(value, start, end) {\n    let newValueStr;\n    if (end - start === value.length) newValueStr = '';else if (start === 0) newValueStr = value.slice(end);else if (end === value.length) newValueStr = value.slice(0, start);else newValueStr = value.slice(0, start) + value.slice(end);\n    return newValueStr;\n  }\n\n  initCursor() {\n    let selectionStart = this.input.nativeElement.selectionStart;\n    let inputValue = this.input.nativeElement.value;\n    let valueLength = inputValue.length;\n    let index = null;\n    let char = inputValue.charAt(selectionStart);\n\n    if (this.isNumeralChar(char)) {\n      return;\n    } //left\n\n\n    let i = selectionStart - 1;\n\n    while (i >= 0) {\n      char = inputValue.charAt(i);\n\n      if (this.isNumeralChar(char)) {\n        index = i;\n        break;\n      } else {\n        i--;\n      }\n    }\n\n    if (index !== null) {\n      this.input.nativeElement.setSelectionRange(index + 1, index + 1);\n    } else {\n      i = selectionStart + 1;\n\n      while (i < valueLength) {\n        char = inputValue.charAt(i);\n\n        if (this.isNumeralChar(char)) {\n          index = i;\n          break;\n        } else {\n          i++;\n        }\n      }\n\n      if (index !== null) {\n        this.input.nativeElement.setSelectionRange(index, index);\n      }\n    }\n  }\n\n  onInputClick() {\n    this.initCursor();\n  }\n\n  isNumeralChar(char) {\n    if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n      this.resetRegex();\n      return true;\n    }\n\n    return false;\n  }\n\n  resetRegex() {\n    this._numeral.lastIndex = 0;\n    this._decimal.lastIndex = 0;\n    this._group.lastIndex = 0;\n    this._minusSign.lastIndex = 0;\n  }\n\n  updateValue(event, valueStr, insertedValueStr, operation) {\n    let currentValue = this.input.nativeElement.value;\n    let newValue = null;\n\n    if (valueStr != null) {\n      newValue = this.parseValue(valueStr);\n      this.updateInput(newValue, insertedValueStr, operation);\n    }\n\n    this.handleOnInput(event, currentValue, newValue);\n  }\n\n  handleOnInput(event, currentValue, newValue) {\n    if (this.isValueChanged(currentValue, newValue)) {\n      this.onInput.emit({\n        originalEvent: event,\n        value: newValue\n      });\n    }\n  }\n\n  isValueChanged(currentValue, newValue) {\n    if (newValue === null && currentValue !== null) {\n      return true;\n    }\n\n    if (newValue != null) {\n      let parsedCurrentValue = typeof currentValue === 'string' ? this.parseValue(currentValue) : currentValue;\n      return newValue !== parsedCurrentValue;\n    }\n\n    return false;\n  }\n\n  validateValue(value) {\n    if (this.min !== null && value < this.min) {\n      return this.min;\n    }\n\n    if (this.max !== null && value > this.max) {\n      return this.max;\n    }\n\n    if (value === '-') {\n      // Minus sign\n      return null;\n    }\n\n    return value;\n  }\n\n  updateInput(value, insertedValueStr, operation) {\n    insertedValueStr = insertedValueStr || '';\n    let inputValue = this.input.nativeElement.value;\n    let newValue = this.formatValue(value);\n    let currentLength = inputValue.length;\n\n    if (currentLength === 0) {\n      this.input.nativeElement.value = newValue;\n      this.input.nativeElement.setSelectionRange(0, 0);\n      this.initCursor();\n      const prefixLength = (this.prefixChar || '').length;\n      const selectionEnd = prefixLength + insertedValueStr.length;\n      this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n    } else {\n      let selectionStart = this.input.nativeElement.selectionStart;\n      let selectionEnd = this.input.nativeElement.selectionEnd;\n\n      if (this.maxlength && this.maxlength < newValue.length) {\n        return;\n      }\n\n      this.input.nativeElement.value = newValue;\n      let newLength = newValue.length;\n\n      if (operation === 'range-insert') {\n        const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n        const startValueStr = startValue !== null ? startValue.toString() : '';\n        const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n        const sRegex = new RegExp(startExpr, 'g');\n        sRegex.test(newValue);\n        const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n        const tRegex = new RegExp(tExpr, 'g');\n        tRegex.test(newValue.slice(sRegex.lastIndex));\n        selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n        this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n      } else if (newLength === currentLength) {\n        if (operation === 'insert' || operation === 'delete-back-single') this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);else if (operation === 'delete-single') this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);else if (operation === 'delete-range' || operation === 'spin') this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n      } else if (operation === 'delete-back-single') {\n        let prevChar = inputValue.charAt(selectionEnd - 1);\n        let nextChar = inputValue.charAt(selectionEnd);\n        let diff = currentLength - newLength;\n\n        let isGroupChar = this._group.test(nextChar);\n\n        if (isGroupChar && diff === 1) {\n          selectionEnd += 1;\n        } else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n          selectionEnd += -1 * diff + 1;\n        }\n\n        this._group.lastIndex = 0;\n        this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n      } else {\n        selectionEnd = selectionEnd + (newLength - currentLength);\n        this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n      }\n    }\n\n    this.input.nativeElement.setAttribute('aria-valuenow', value);\n  }\n\n  onInputFocus(event) {\n    this.focused = true;\n    this.onFocus.emit(event);\n  }\n\n  onInputBlur(event) {\n    this.focused = false;\n    let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n    this.input.nativeElement.value = this.formatValue(newValue);\n    this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n    this.updateModel(event, newValue);\n    this.onBlur.emit(event);\n  }\n\n  formattedValue() {\n    return this.formatValue(this.value);\n  }\n\n  updateModel(event, value) {\n    if (this.value !== value) {\n      this.value = value;\n      this.onModelChange(value);\n    }\n\n    this.onModelTouched();\n  }\n\n  writeValue(value) {\n    this.value = value;\n    this.cd.markForCheck();\n  }\n\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState(val) {\n    this.disabled = val;\n    this.cd.markForCheck();\n  }\n\n  get filled() {\n    return this.value != null && this.value.toString().length > 0;\n  }\n\n  clearTimer() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  }\n\n}\n\nInputNumber.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: InputNumber,\n  deps: [{\n    token: i0.ElementRef\n  }, {\n    token: i0.ChangeDetectorRef\n  }],\n  target: i0.ɵɵFactoryTarget.Component\n});\nInputNumber.ɵcmp = i0.ɵɵdefineComponent({\n  type: InputNumber,\n  selectors: [[\"p-inputNumber\"]],\n  viewQuery: function InputNumber_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n    }\n  },\n  hostVars: 4,\n  hostBindings: function InputNumber_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵclassProp(\"p-inputwrapper-filled\", ctx.filled)(\"p-inputwrapper-focus\", ctx.focused);\n    }\n  },\n  inputs: {\n    showButtons: \"showButtons\",\n    format: \"format\",\n    buttonLayout: \"buttonLayout\",\n    inputId: \"inputId\",\n    styleClass: \"styleClass\",\n    style: \"style\",\n    placeholder: \"placeholder\",\n    size: \"size\",\n    maxlength: \"maxlength\",\n    tabindex: \"tabindex\",\n    title: \"title\",\n    ariaLabel: \"ariaLabel\",\n    ariaRequired: \"ariaRequired\",\n    name: \"name\",\n    required: \"required\",\n    autocomplete: \"autocomplete\",\n    min: \"min\",\n    max: \"max\",\n    incrementButtonClass: \"incrementButtonClass\",\n    decrementButtonClass: \"decrementButtonClass\",\n    incrementButtonIcon: \"incrementButtonIcon\",\n    decrementButtonIcon: \"decrementButtonIcon\",\n    step: \"step\",\n    inputStyle: \"inputStyle\",\n    inputStyleClass: \"inputStyleClass\",\n    locale: \"locale\",\n    localeMatcher: \"localeMatcher\",\n    mode: \"mode\",\n    currency: \"currency\",\n    currencyDisplay: \"currencyDisplay\",\n    useGrouping: \"useGrouping\",\n    minFractionDigits: \"minFractionDigits\",\n    maxFractionDigits: \"maxFractionDigits\",\n    prefix: \"prefix\",\n    suffix: \"suffix\",\n    disabled: \"disabled\"\n  },\n  outputs: {\n    onInput: \"onInput\",\n    onFocus: \"onFocus\",\n    onBlur: \"onBlur\",\n    onKeyDown: \"onKeyDown\"\n  },\n  features: [i0.ɵɵProvidersFeature([INPUTNUMBER_VALUE_ACCESSOR])],\n  decls: 6,\n  vars: 30,\n  consts: [[3, \"ngClass\", \"ngStyle\"], [\"pInputText\", \"\", 3, \"ngClass\", \"ngStyle\", \"value\", \"disabled\", \"input\", \"keydown\", \"keypress\", \"paste\", \"click\", \"focus\", \"blur\"], [\"input\", \"\"], [\"class\", \"p-inputnumber-button-group\", 4, \"ngIf\"], [\"type\", \"button\", \"pButton\", \"\", 3, \"ngClass\", \"class\", \"icon\", \"disabled\", \"mousedown\", \"mouseup\", \"mouseleave\", \"keydown\", \"keyup\", 4, \"ngIf\"], [1, \"p-inputnumber-button-group\"], [\"type\", \"button\", \"pButton\", \"\", 3, \"ngClass\", \"icon\", \"disabled\", \"mousedown\", \"mouseup\", \"mouseleave\", \"keydown\", \"keyup\"]],\n  template: function InputNumber_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"span\", 0);\n      i0.ɵɵelementStart(1, \"input\", 1, 2);\n      i0.ɵɵlistener(\"input\", function InputNumber_Template_input_input_1_listener($event) {\n        return ctx.onUserInput($event);\n      })(\"keydown\", function InputNumber_Template_input_keydown_1_listener($event) {\n        return ctx.onInputKeyDown($event);\n      })(\"keypress\", function InputNumber_Template_input_keypress_1_listener($event) {\n        return ctx.onInputKeyPress($event);\n      })(\"paste\", function InputNumber_Template_input_paste_1_listener($event) {\n        return ctx.onPaste($event);\n      })(\"click\", function InputNumber_Template_input_click_1_listener() {\n        return ctx.onInputClick();\n      })(\"focus\", function InputNumber_Template_input_focus_1_listener($event) {\n        return ctx.onInputFocus($event);\n      })(\"blur\", function InputNumber_Template_input_blur_1_listener($event) {\n        return ctx.onInputBlur($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(3, InputNumber_span_3_Template, 3, 12, \"span\", 3);\n      i0.ɵɵtemplate(4, InputNumber_button_4_Template, 1, 6, \"button\", 4);\n      i0.ɵɵtemplate(5, InputNumber_button_5_Template, 1, 6, \"button\", 4);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.styleClass);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(26, _c3, ctx.showButtons && ctx.buttonLayout === \"stacked\", ctx.showButtons && ctx.buttonLayout === \"horizontal\", ctx.showButtons && ctx.buttonLayout === \"vertical\"))(\"ngStyle\", ctx.style);\n      i0.ɵɵadvance(1);\n      i0.ɵɵclassMap(ctx.inputStyleClass);\n      i0.ɵɵproperty(\"ngClass\", \"p-inputnumber-input\")(\"ngStyle\", ctx.inputStyle)(\"value\", ctx.formattedValue())(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"placeholder\", ctx.placeholder)(\"title\", ctx.title)(\"id\", ctx.inputId)(\"size\", ctx.size)(\"name\", ctx.name)(\"autocomplete\", ctx.autocomplete)(\"maxlength\", ctx.maxlength)(\"tabindex\", ctx.tabindex)(\"aria-label\", ctx.ariaLabel)(\"aria-required\", ctx.ariaRequired)(\"required\", ctx.required)(\"aria-valuemin\", ctx.min)(\"aria-valuemax\", ctx.max);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.showButtons && ctx.buttonLayout === \"stacked\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showButtons && ctx.buttonLayout !== \"stacked\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.showButtons && ctx.buttonLayout !== \"stacked\");\n    }\n  },\n  directives: [i1.NgClass, i1.NgStyle, i2.InputText, i1.NgIf, i3.ButtonDirective],\n  styles: [\".p-inputnumber{display:inline-flex}.p-inputnumber-button{display:flex;align-items:center;justify-content:center;flex:0 0 auto}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label,.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label{display:none}.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up{border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0;padding:0}.p-inputnumber-buttons-stacked .p-inputnumber-input{border-top-right-radius:0;border-bottom-right-radius:0}.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down{border-top-left-radius:0;border-top-right-radius:0;border-bottom-left-radius:0;padding:0}.p-inputnumber-buttons-stacked .p-inputnumber-button-group{display:flex;flex-direction:column}.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button{flex:1 1 auto}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up{order:3;border-top-left-radius:0;border-bottom-left-radius:0}.p-inputnumber-buttons-horizontal .p-inputnumber-input{order:2;border-radius:0}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down{order:1;border-top-right-radius:0;border-bottom-right-radius:0}.p-inputnumber-buttons-vertical{flex-direction:column}.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up{order:1;border-bottom-left-radius:0;border-bottom-right-radius:0;width:100%}.p-inputnumber-buttons-vertical .p-inputnumber-input{order:2;border-radius:0;text-align:center}.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down{order:3;border-top-left-radius:0;border-top-right-radius:0;width:100%}.p-inputnumber-input{flex:1 1 auto}.p-fluid .p-inputnumber{width:100%}.p-fluid .p-inputnumber .p-inputnumber-input{width:1%}.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input{width:100%}\"],\n  encapsulation: 2,\n  changeDetection: 0\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: InputNumber,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'p-inputNumber',\n      template: `\n        <span [ngClass]=\"{'p-inputnumber p-component': true,'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n                'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal', 'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\"\n                [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input #input [ngClass]=\"'p-inputnumber-input'\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valuemin]=\"min\" [attr.aria-valuemax]=\"max\"\n                (input)=\"onUserInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <span class=\"p-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n            </span>\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n        </span>\n    `,\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [INPUTNUMBER_VALUE_ACCESSOR],\n      encapsulation: ViewEncapsulation.None,\n      styleUrls: ['./inputnumber.css'],\n      host: {\n        '[class.p-inputwrapper-filled]': 'filled',\n        '[class.p-inputwrapper-focus]': 'focused'\n      }\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  },\n  propDecorators: {\n    showButtons: [{\n      type: Input\n    }],\n    format: [{\n      type: Input\n    }],\n    buttonLayout: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    placeholder: [{\n      type: Input\n    }],\n    size: [{\n      type: Input\n    }],\n    maxlength: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    title: [{\n      type: Input\n    }],\n    ariaLabel: [{\n      type: Input\n    }],\n    ariaRequired: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    required: [{\n      type: Input\n    }],\n    autocomplete: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    incrementButtonClass: [{\n      type: Input\n    }],\n    decrementButtonClass: [{\n      type: Input\n    }],\n    incrementButtonIcon: [{\n      type: Input\n    }],\n    decrementButtonIcon: [{\n      type: Input\n    }],\n    step: [{\n      type: Input\n    }],\n    inputStyle: [{\n      type: Input\n    }],\n    inputStyleClass: [{\n      type: Input\n    }],\n    input: [{\n      type: ViewChild,\n      args: ['input']\n    }],\n    onInput: [{\n      type: Output\n    }],\n    onFocus: [{\n      type: Output\n    }],\n    onBlur: [{\n      type: Output\n    }],\n    onKeyDown: [{\n      type: Output\n    }],\n    locale: [{\n      type: Input\n    }],\n    localeMatcher: [{\n      type: Input\n    }],\n    mode: [{\n      type: Input\n    }],\n    currency: [{\n      type: Input\n    }],\n    currencyDisplay: [{\n      type: Input\n    }],\n    useGrouping: [{\n      type: Input\n    }],\n    minFractionDigits: [{\n      type: Input\n    }],\n    maxFractionDigits: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    suffix: [{\n      type: Input\n    }],\n    disabled: [{\n      type: Input\n    }]\n  }\n});\n\nclass InputNumberModule {}\n\nInputNumberModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: InputNumberModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nInputNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: InputNumberModule,\n  declarations: [InputNumber],\n  imports: [CommonModule, InputTextModule, ButtonModule],\n  exports: [InputNumber]\n});\nInputNumberModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: InputNumberModule,\n  imports: [[CommonModule, InputTextModule, ButtonModule]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: InputNumberModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, InputTextModule, ButtonModule],\n      exports: [InputNumber],\n      declarations: [InputNumber]\n    }]\n  }]\n});\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INPUTNUMBER_VALUE_ACCESSOR, InputNumber, InputNumberModule }; //# sourceMappingURL=primeng-inputnumber.js.map","map":{"version":3,"sources":["C:/Users/trang/Projects/SenecaForum/node_modules/primeng/fesm2015/primeng-inputnumber.js"],"names":["i0","forwardRef","EventEmitter","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","ViewChild","Output","NgModule","i1","CommonModule","i2","InputTextModule","i3","ButtonModule","NG_VALUE_ACCESSOR","INPUTNUMBER_VALUE_ACCESSOR","provide","useExisting","InputNumber","multi","constructor","el","cd","showButtons","format","buttonLayout","incrementButtonIcon","decrementButtonIcon","step","onInput","onFocus","onBlur","onKeyDown","onModelChange","onModelTouched","groupChar","prefixChar","suffixChar","_modeOption","_useGroupingOption","locale","_localeOption","localeOption","updateConstructParser","localeMatcher","_localeMatcherOption","localeMatcherOption","mode","modeOption","currency","_currencyOption","currencyOption","currencyDisplay","_currencyDisplayOption","currencyDisplayOption","useGrouping","useGroupingOption","minFractionDigits","_minFractionDigitsOption","minFractionDigitsOption","maxFractionDigits","_maxFractionDigitsOption","maxFractionDigitsOption","prefix","_prefixOption","prefixOption","suffix","_suffixOption","suffixOption","disabled","_disabled","focused","timer","clearTimer","ngOnInit","constructParser","initialized","getOptions","style","minimumFractionDigits","maximumFractionDigits","numberFormat","Intl","NumberFormat","numerals","reverse","index","Map","map","d","i","_numeral","RegExp","join","_decimal","getDecimalExpression","_group","getGroupingExpression","_minusSign","getMinusSignExpression","_currency","getCurrencyExpression","_suffix","getSuffixExpression","_prefix","getPrefixExpression","_index","get","escapeRegExp","text","replace","formatter","trim","charAt","split","formatValue","value","formattedValue","toString","parseValue","filteredText","parsedValue","isNaN","repeat","event","interval","dir","setTimeout","spin","currentValue","input","nativeElement","newValue","validateValue","maxlength","length","updateInput","updateModel","handleOnInput","onUpButtonMouseDown","focus","preventDefault","onUpButtonMouseUp","onUpButtonMouseLeave","onUpButtonKeyDown","keyCode","onUpButtonKeyUp","onDownButtonMouseDown","onDownButtonMouseUp","onDownButtonMouseLeave","onDownButtonKeyUp","onDownButtonKeyDown","onUserInput","isSpecialChar","target","lastValue","onInputKeyDown","shiftKey","altKey","selectionStart","selectionEnd","inputValue","newValueStr","which","isNumeralChar","setAttribute","deleteChar","decimalCharIndex","search","lastIndex","test","slice","setSelectionRange","updateValue","deleteRange","emit","onInputKeyPress","code","char","String","fromCharCode","isDecimalSign","isMinusSign","insert","onPaste","data","clipboardData","window","getData","filteredData","sign","minusCharIndex","insertText","resolvedOptions","operation","start","end","textSplit","initCursor","valueLength","onInputClick","resetRegex","valueStr","insertedValueStr","isValueChanged","originalEvent","parsedCurrentValue","min","max","currentLength","prefixLength","newLength","startValue","startValueStr","startExpr","sRegex","tExpr","tRegex","prevChar","nextChar","diff","isGroupChar","onInputFocus","onInputBlur","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","val","filled","clearInterval","ɵfac","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","token","ElementRef","ChangeDetectorRef","ɵɵFactoryTarget","ɵcmp","NgClass","NgStyle","InputText","NgIf","ButtonDirective","ɵɵngDeclareClassMetadata","decorators","args","selector","template","changeDetection","OnPush","providers","encapsulation","None","styleUrls","host","ctorParameters","propDecorators","inputId","styleClass","placeholder","size","tabindex","title","ariaLabel","ariaRequired","name","required","autocomplete","incrementButtonClass","decrementButtonClass","inputStyle","inputStyleClass","InputNumberModule","ɵmod","ɵɵngDeclareNgModule","declarations","imports","exports","ɵinj","ɵɵngDeclareInjector"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ViewChild, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from 'primeng/inputtext';\nimport { InputTextModule } from 'primeng/inputtext';\nimport * as i3 from 'primeng/button';\nimport { ButtonModule } from 'primeng/button';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst INPUTNUMBER_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => InputNumber),\n    multi: true\n};\nclass InputNumber {\n    constructor(el, cd) {\n        this.el = el;\n        this.cd = cd;\n        this.showButtons = false;\n        this.format = true;\n        this.buttonLayout = \"stacked\";\n        this.incrementButtonIcon = 'pi pi-angle-up';\n        this.decrementButtonIcon = 'pi pi-angle-down';\n        this.step = 1;\n        this.onInput = new EventEmitter();\n        this.onFocus = new EventEmitter();\n        this.onBlur = new EventEmitter();\n        this.onKeyDown = new EventEmitter();\n        this.onModelChange = () => { };\n        this.onModelTouched = () => { };\n        this.groupChar = '';\n        this.prefixChar = '';\n        this.suffixChar = '';\n        this._modeOption = \"decimal\";\n        this._useGroupingOption = true;\n    }\n    get locale() {\n        return this._localeOption;\n    }\n    set locale(localeOption) {\n        this._localeOption = localeOption;\n        this.updateConstructParser();\n    }\n    get localeMatcher() {\n        return this._localeMatcherOption;\n    }\n    set localeMatcher(localeMatcherOption) {\n        this._localeMatcherOption = localeMatcherOption;\n        this.updateConstructParser();\n    }\n    get mode() {\n        return this._modeOption;\n    }\n    set mode(modeOption) {\n        this._modeOption = modeOption;\n        this.updateConstructParser();\n    }\n    get currency() {\n        return this._currencyOption;\n    }\n    set currency(currencyOption) {\n        this._currencyOption = currencyOption;\n        this.updateConstructParser();\n    }\n    get currencyDisplay() {\n        return this._currencyDisplayOption;\n    }\n    set currencyDisplay(currencyDisplayOption) {\n        this._currencyDisplayOption = currencyDisplayOption;\n        this.updateConstructParser();\n    }\n    get useGrouping() {\n        return this._useGroupingOption;\n    }\n    set useGrouping(useGroupingOption) {\n        this._useGroupingOption = useGroupingOption;\n        this.updateConstructParser();\n    }\n    get minFractionDigits() {\n        return this._minFractionDigitsOption;\n    }\n    set minFractionDigits(minFractionDigitsOption) {\n        this._minFractionDigitsOption = minFractionDigitsOption;\n        this.updateConstructParser();\n    }\n    get maxFractionDigits() {\n        return this._maxFractionDigitsOption;\n    }\n    set maxFractionDigits(maxFractionDigitsOption) {\n        this._maxFractionDigitsOption = maxFractionDigitsOption;\n        this.updateConstructParser();\n    }\n    get prefix() {\n        return this._prefixOption;\n    }\n    set prefix(prefixOption) {\n        this._prefixOption = prefixOption;\n        this.updateConstructParser();\n    }\n    get suffix() {\n        return this._suffixOption;\n    }\n    set suffix(suffixOption) {\n        this._suffixOption = suffixOption;\n        this.updateConstructParser();\n    }\n    get disabled() {\n        return this._disabled;\n    }\n    set disabled(disabled) {\n        if (disabled)\n            this.focused = false;\n        this._disabled = disabled;\n        if (this.timer)\n            this.clearTimer();\n    }\n    ngOnInit() {\n        this.constructParser();\n        this.initialized = true;\n    }\n    getOptions() {\n        return {\n            localeMatcher: this.localeMatcher,\n            style: this.mode,\n            currency: this.currency,\n            currencyDisplay: this.currencyDisplay,\n            useGrouping: this.useGrouping,\n            minimumFractionDigits: this.minFractionDigits,\n            maximumFractionDigits: this.maxFractionDigits\n        };\n    }\n    constructParser() {\n        this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n        const numerals = [...new Intl.NumberFormat(this.locale, { useGrouping: false }).format(9876543210)].reverse();\n        const index = new Map(numerals.map((d, i) => [d, i]));\n        this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n        this._decimal = this.getDecimalExpression();\n        this._group = this.getGroupingExpression();\n        this._minusSign = this.getMinusSignExpression();\n        this._currency = this.getCurrencyExpression();\n        this._suffix = this.getSuffixExpression();\n        this._prefix = this.getPrefixExpression();\n        this._index = d => index.get(d);\n    }\n    updateConstructParser() {\n        if (this.initialized) {\n            this.constructParser();\n        }\n    }\n    escapeRegExp(text) {\n        return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    }\n    getDecimalExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n        return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n    getGroupingExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, { useGrouping: true });\n        this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n        return new RegExp(`[${this.groupChar}]`, 'g');\n    }\n    getMinusSignExpression() {\n        const formatter = new Intl.NumberFormat(this.locale, { useGrouping: false });\n        return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n    }\n    getCurrencyExpression() {\n        if (this.currency) {\n            const formatter = new Intl.NumberFormat(this.locale, { style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay });\n            return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\n        }\n        return new RegExp(`[]`, 'g');\n    }\n    getPrefixExpression() {\n        if (this.prefix) {\n            this.prefixChar = this.prefix;\n        }\n        else {\n            const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay });\n            this.prefixChar = formatter.format(1).split('1')[0];\n        }\n        return new RegExp(`${this.escapeRegExp(this.prefixChar || '')}`, 'g');\n    }\n    getSuffixExpression() {\n        if (this.suffix) {\n            this.suffixChar = this.suffix;\n        }\n        else {\n            const formatter = new Intl.NumberFormat(this.locale, { style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay,\n                minimumFractionDigits: 0, maximumFractionDigits: 0 });\n            this.suffixChar = formatter.format(1).split('1')[1];\n        }\n        return new RegExp(`${this.escapeRegExp(this.suffixChar || '')}`, 'g');\n    }\n    formatValue(value) {\n        if (value != null) {\n            if (value === '-') { // Minus sign\n                return value;\n            }\n            if (this.format) {\n                let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                let formattedValue = formatter.format(value);\n                if (this.prefix) {\n                    formattedValue = this.prefix + formattedValue;\n                }\n                if (this.suffix) {\n                    formattedValue = formattedValue + this.suffix;\n                }\n                return formattedValue;\n            }\n            return value.toString();\n        }\n        return '';\n    }\n    parseValue(text) {\n        let filteredText = text\n            .replace(this._suffix, '')\n            .replace(this._prefix, '')\n            .trim()\n            .replace(/\\s/g, '')\n            .replace(this._currency, '')\n            .replace(this._group, '')\n            .replace(this._minusSign, '-')\n            .replace(this._decimal, '.')\n            .replace(this._numeral, this._index);\n        if (filteredText) {\n            if (filteredText === '-') // Minus sign\n                return filteredText;\n            let parsedValue = +filteredText;\n            return isNaN(parsedValue) ? null : parsedValue;\n        }\n        return null;\n    }\n    repeat(event, interval, dir) {\n        let i = interval || 500;\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n        this.spin(event, dir);\n    }\n    spin(event, dir) {\n        let step = this.step * dir;\n        let currentValue = this.parseValue(this.input.nativeElement.value) || 0;\n        let newValue = this.validateValue(currentValue + step);\n        if (this.maxlength && this.maxlength < this.formatValue(newValue).length) {\n            return;\n        }\n        this.updateInput(newValue, null, 'spin');\n        this.updateModel(event, newValue);\n        this.handleOnInput(event, currentValue, newValue);\n    }\n    onUpButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, 1);\n        event.preventDefault();\n    }\n    onUpButtonMouseUp() {\n        this.clearTimer();\n    }\n    onUpButtonMouseLeave() {\n        this.clearTimer();\n    }\n    onUpButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, 1);\n        }\n    }\n    onUpButtonKeyUp() {\n        this.clearTimer();\n    }\n    onDownButtonMouseDown(event) {\n        this.input.nativeElement.focus();\n        this.repeat(event, null, -1);\n        event.preventDefault();\n    }\n    onDownButtonMouseUp() {\n        this.clearTimer();\n    }\n    onDownButtonMouseLeave() {\n        this.clearTimer();\n    }\n    onDownButtonKeyUp() {\n        this.clearTimer();\n    }\n    onDownButtonKeyDown(event) {\n        if (event.keyCode === 32 || event.keyCode === 13) {\n            this.repeat(event, null, -1);\n        }\n    }\n    onUserInput(event) {\n        if (this.isSpecialChar) {\n            event.target.value = this.lastValue;\n        }\n        this.isSpecialChar = false;\n    }\n    onInputKeyDown(event) {\n        this.lastValue = event.target.value;\n        if (event.shiftKey || event.altKey) {\n            this.isSpecialChar = true;\n            return;\n        }\n        let selectionStart = event.target.selectionStart;\n        let selectionEnd = event.target.selectionEnd;\n        let inputValue = event.target.value;\n        let newValueStr = null;\n        if (event.altKey) {\n            event.preventDefault();\n        }\n        switch (event.which) {\n            //up\n            case 38:\n                this.spin(event, 1);\n                event.preventDefault();\n                break;\n            //down\n            case 40:\n                this.spin(event, -1);\n                event.preventDefault();\n                break;\n            //left\n            case 37:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                    event.preventDefault();\n                }\n                break;\n            //right\n            case 39:\n                if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                    event.preventDefault();\n                }\n                break;\n            //enter\n            case 13:\n                let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n                this.input.nativeElement.value = this.formatValue(newValue);\n                this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n                this.updateModel(event, newValue);\n                break;\n            //backspace\n            case 8: {\n                event.preventDefault();\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart - 1);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                        }\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                        }\n                    }\n                    this.updateValue(event, newValueStr, null, 'delete-single');\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, null, 'delete-range');\n                }\n                break;\n            }\n            // del\n            case 46:\n                event.preventDefault();\n                if (selectionStart === selectionEnd) {\n                    let deleteChar = inputValue.charAt(selectionStart);\n                    let decimalCharIndex = inputValue.search(this._decimal);\n                    this._decimal.lastIndex = 0;\n                    if (this.isNumeralChar(deleteChar)) {\n                        if (this._group.test(deleteChar)) {\n                            this._group.lastIndex = 0;\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                        }\n                        else if (this._decimal.test(deleteChar)) {\n                            this._decimal.lastIndex = 0;\n                            this.input.nativeElement.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                        }\n                        else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                        }\n                        else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                            newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                            newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                        }\n                        else {\n                            newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                        }\n                    }\n                    this.updateValue(event, newValueStr, null, 'delete-back-single');\n                }\n                else {\n                    newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, null, 'delete-range');\n                }\n                break;\n            default:\n                break;\n        }\n        this.onKeyDown.emit(event);\n    }\n    onInputKeyPress(event) {\n        event.preventDefault();\n        let code = event.which || event.keyCode;\n        let char = String.fromCharCode(code);\n        const isDecimalSign = this.isDecimalSign(char);\n        const isMinusSign = this.isMinusSign(char);\n        if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\n            this.insert(event, char, { isDecimalSign, isMinusSign });\n        }\n    }\n    onPaste(event) {\n        if (!this.disabled) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n            if (data) {\n                let filteredData = this.parseValue(data);\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        }\n    }\n    isMinusSign(char) {\n        if (this._minusSign.test(char)) {\n            this._minusSign.lastIndex = 0;\n            return true;\n        }\n        return false;\n    }\n    isDecimalSign(char) {\n        if (this._decimal.test(char)) {\n            this._decimal.lastIndex = 0;\n            return true;\n        }\n        return false;\n    }\n    insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let selectionEnd = this.input.nativeElement.selectionEnd;\n        let inputValue = this.input.nativeElement.value.trim();\n        const decimalCharIndex = inputValue.search(this._decimal);\n        this._decimal.lastIndex = 0;\n        const minusCharIndex = inputValue.search(this._minusSign);\n        this._minusSign.lastIndex = 0;\n        let newValueStr;\n        if (sign.isMinusSign) {\n            if (selectionStart === 0) {\n                newValueStr = inputValue;\n                if (minusCharIndex === -1 || selectionEnd !== 0) {\n                    newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                }\n                this.updateValue(event, newValueStr, text, 'insert');\n            }\n        }\n        else if (sign.isDecimalSign) {\n            if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                this.updateValue(event, inputValue, text, 'insert');\n            }\n            else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                this.updateValue(event, newValueStr, text, 'insert');\n            }\n        }\n        else {\n            const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n            const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n            if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                    newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n            else {\n                newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                this.updateValue(event, newValueStr, text, operation);\n            }\n        }\n    }\n    insertText(value, text, start, end) {\n        let textSplit = text.split('.');\n        if (textSplit.length == 2) {\n            const decimalCharIndex = value.slice(start, end).search(this._decimal);\n            this._decimal.lastIndex = 0;\n            return (decimalCharIndex > 0) ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : (value || this.formatValue(text));\n        }\n        else if ((end - start) === value.length) {\n            return this.formatValue(text);\n        }\n        else if (start === 0) {\n            return text + value.slice(end);\n        }\n        else if (end === value.length) {\n            return value.slice(0, start) + text;\n        }\n        else {\n            return value.slice(0, start) + text + value.slice(end);\n        }\n    }\n    deleteRange(value, start, end) {\n        let newValueStr;\n        if ((end - start) === value.length)\n            newValueStr = '';\n        else if (start === 0)\n            newValueStr = value.slice(end);\n        else if (end === value.length)\n            newValueStr = value.slice(0, start);\n        else\n            newValueStr = value.slice(0, start) + value.slice(end);\n        return newValueStr;\n    }\n    initCursor() {\n        let selectionStart = this.input.nativeElement.selectionStart;\n        let inputValue = this.input.nativeElement.value;\n        let valueLength = inputValue.length;\n        let index = null;\n        let char = inputValue.charAt(selectionStart);\n        if (this.isNumeralChar(char)) {\n            return;\n        }\n        //left\n        let i = selectionStart - 1;\n        while (i >= 0) {\n            char = inputValue.charAt(i);\n            if (this.isNumeralChar(char)) {\n                index = i;\n                break;\n            }\n            else {\n                i--;\n            }\n        }\n        if (index !== null) {\n            this.input.nativeElement.setSelectionRange(index + 1, index + 1);\n        }\n        else {\n            i = selectionStart + 1;\n            while (i < valueLength) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i;\n                    break;\n                }\n                else {\n                    i++;\n                }\n            }\n            if (index !== null) {\n                this.input.nativeElement.setSelectionRange(index, index);\n            }\n        }\n    }\n    onInputClick() {\n        this.initCursor();\n    }\n    isNumeralChar(char) {\n        if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n            this.resetRegex();\n            return true;\n        }\n        return false;\n    }\n    resetRegex() {\n        this._numeral.lastIndex = 0;\n        this._decimal.lastIndex = 0;\n        this._group.lastIndex = 0;\n        this._minusSign.lastIndex = 0;\n    }\n    updateValue(event, valueStr, insertedValueStr, operation) {\n        let currentValue = this.input.nativeElement.value;\n        let newValue = null;\n        if (valueStr != null) {\n            newValue = this.parseValue(valueStr);\n            this.updateInput(newValue, insertedValueStr, operation);\n        }\n        this.handleOnInput(event, currentValue, newValue);\n    }\n    handleOnInput(event, currentValue, newValue) {\n        if (this.isValueChanged(currentValue, newValue)) {\n            this.onInput.emit({ originalEvent: event, value: newValue });\n        }\n    }\n    isValueChanged(currentValue, newValue) {\n        if (newValue === null && currentValue !== null) {\n            return true;\n        }\n        if (newValue != null) {\n            let parsedCurrentValue = (typeof currentValue === 'string') ? this.parseValue(currentValue) : currentValue;\n            return newValue !== parsedCurrentValue;\n        }\n        return false;\n    }\n    validateValue(value) {\n        if (this.min !== null && value < this.min) {\n            return this.min;\n        }\n        if (this.max !== null && value > this.max) {\n            return this.max;\n        }\n        if (value === '-') { // Minus sign\n            return null;\n        }\n        return value;\n    }\n    updateInput(value, insertedValueStr, operation) {\n        insertedValueStr = insertedValueStr || '';\n        let inputValue = this.input.nativeElement.value;\n        let newValue = this.formatValue(value);\n        let currentLength = inputValue.length;\n        if (currentLength === 0) {\n            this.input.nativeElement.value = newValue;\n            this.input.nativeElement.setSelectionRange(0, 0);\n            this.initCursor();\n            const prefixLength = (this.prefixChar || '').length;\n            const selectionEnd = prefixLength + insertedValueStr.length;\n            this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n        }\n        else {\n            let selectionStart = this.input.nativeElement.selectionStart;\n            let selectionEnd = this.input.nativeElement.selectionEnd;\n            if (this.maxlength && this.maxlength < newValue.length) {\n                return;\n            }\n            this.input.nativeElement.value = newValue;\n            let newLength = newValue.length;\n            if (operation === 'range-insert') {\n                const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                const startValueStr = startValue !== null ? startValue.toString() : '';\n                const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                const sRegex = new RegExp(startExpr, 'g');\n                sRegex.test(newValue);\n                const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                const tRegex = new RegExp(tExpr, 'g');\n                tRegex.test(newValue.slice(sRegex.lastIndex));\n                selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else if (newLength === currentLength) {\n                if (operation === 'insert' || operation === 'delete-back-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                else if (operation === 'delete-single')\n                    this.input.nativeElement.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                else if (operation === 'delete-range' || operation === 'spin')\n                    this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else if (operation === 'delete-back-single') {\n                let prevChar = inputValue.charAt(selectionEnd - 1);\n                let nextChar = inputValue.charAt(selectionEnd);\n                let diff = currentLength - newLength;\n                let isGroupChar = this._group.test(nextChar);\n                if (isGroupChar && diff === 1) {\n                    selectionEnd += 1;\n                }\n                else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                    selectionEnd += (-1 * diff) + 1;\n                }\n                this._group.lastIndex = 0;\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else {\n                selectionEnd = selectionEnd + (newLength - currentLength);\n                this.input.nativeElement.setSelectionRange(selectionEnd, selectionEnd);\n            }\n        }\n        this.input.nativeElement.setAttribute('aria-valuenow', value);\n    }\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n    onInputBlur(event) {\n        this.focused = false;\n        let newValue = this.validateValue(this.parseValue(this.input.nativeElement.value));\n        this.input.nativeElement.value = this.formatValue(newValue);\n        this.input.nativeElement.setAttribute('aria-valuenow', newValue);\n        this.updateModel(event, newValue);\n        this.onBlur.emit(event);\n    }\n    formattedValue() {\n        return this.formatValue(this.value);\n    }\n    updateModel(event, value) {\n        if (this.value !== value) {\n            this.value = value;\n            this.onModelChange(value);\n        }\n        this.onModelTouched();\n    }\n    writeValue(value) {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    setDisabledState(val) {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n    get filled() {\n        return (this.value != null && this.value.toString().length > 0);\n    }\n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n}\nInputNumber.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: InputNumber, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nInputNumber.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.0\", type: InputNumber, selector: \"p-inputNumber\", inputs: { showButtons: \"showButtons\", format: \"format\", buttonLayout: \"buttonLayout\", inputId: \"inputId\", styleClass: \"styleClass\", style: \"style\", placeholder: \"placeholder\", size: \"size\", maxlength: \"maxlength\", tabindex: \"tabindex\", title: \"title\", ariaLabel: \"ariaLabel\", ariaRequired: \"ariaRequired\", name: \"name\", required: \"required\", autocomplete: \"autocomplete\", min: \"min\", max: \"max\", incrementButtonClass: \"incrementButtonClass\", decrementButtonClass: \"decrementButtonClass\", incrementButtonIcon: \"incrementButtonIcon\", decrementButtonIcon: \"decrementButtonIcon\", step: \"step\", inputStyle: \"inputStyle\", inputStyleClass: \"inputStyleClass\", locale: \"locale\", localeMatcher: \"localeMatcher\", mode: \"mode\", currency: \"currency\", currencyDisplay: \"currencyDisplay\", useGrouping: \"useGrouping\", minFractionDigits: \"minFractionDigits\", maxFractionDigits: \"maxFractionDigits\", prefix: \"prefix\", suffix: \"suffix\", disabled: \"disabled\" }, outputs: { onInput: \"onInput\", onFocus: \"onFocus\", onBlur: \"onBlur\", onKeyDown: \"onKeyDown\" }, host: { properties: { \"class.p-inputwrapper-filled\": \"filled\", \"class.p-inputwrapper-focus\": \"focused\" } }, providers: [INPUTNUMBER_VALUE_ACCESSOR], viewQueries: [{ propertyName: \"input\", first: true, predicate: [\"input\"], descendants: true }], ngImport: i0, template: `\n        <span [ngClass]=\"{'p-inputnumber p-component': true,'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n                'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal', 'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\"\n                [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input #input [ngClass]=\"'p-inputnumber-input'\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valuemin]=\"min\" [attr.aria-valuemax]=\"max\"\n                (input)=\"onUserInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <span class=\"p-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n            </span>\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n        </span>\n    `, isInline: true, styles: [\".p-inputnumber{display:inline-flex}.p-inputnumber-button{display:flex;align-items:center;justify-content:center;flex:0 0 auto}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label,.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label{display:none}.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up{border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0;padding:0}.p-inputnumber-buttons-stacked .p-inputnumber-input{border-top-right-radius:0;border-bottom-right-radius:0}.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down{border-top-left-radius:0;border-top-right-radius:0;border-bottom-left-radius:0;padding:0}.p-inputnumber-buttons-stacked .p-inputnumber-button-group{display:flex;flex-direction:column}.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button{flex:1 1 auto}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up{order:3;border-top-left-radius:0;border-bottom-left-radius:0}.p-inputnumber-buttons-horizontal .p-inputnumber-input{order:2;border-radius:0}.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down{order:1;border-top-right-radius:0;border-bottom-right-radius:0}.p-inputnumber-buttons-vertical{flex-direction:column}.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up{order:1;border-bottom-left-radius:0;border-bottom-right-radius:0;width:100%}.p-inputnumber-buttons-vertical .p-inputnumber-input{order:2;border-radius:0;text-align:center}.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down{order:3;border-top-left-radius:0;border-top-right-radius:0;width:100%}.p-inputnumber-input{flex:1 1 auto}.p-fluid .p-inputnumber{width:100%}.p-fluid .p-inputnumber .p-inputnumber-input{width:1%}.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input{width:100%}\"], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i2.InputText, selector: \"[pInputText]\" }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i3.ButtonDirective, selector: \"[pButton]\", inputs: [\"iconPos\", \"loadingIcon\", \"label\", \"icon\", \"loading\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: InputNumber, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-inputNumber',\n                    template: `\n        <span [ngClass]=\"{'p-inputnumber p-component': true,'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n                'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal', 'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'}\"\n                [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input #input [ngClass]=\"'p-inputnumber-input'\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" pInputText [value]=\"formattedValue()\" [attr.placeholder]=\"placeholder\" [attr.title]=\"title\" [attr.id]=\"inputId\"\n                [attr.size]=\"size\" [attr.name]=\"name\" [attr.autocomplete]=\"autocomplete\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.aria-label]=\"ariaLabel\"\n                [attr.aria-required]=\"ariaRequired\" [disabled]=\"disabled\" [attr.required]=\"required\" [attr.aria-valuemin]=\"min\" [attr.aria-valuemax]=\"max\"\n                (input)=\"onUserInput($event)\" (keydown)=\"onInputKeyDown($event)\" (keypress)=\"onInputKeyPress($event)\" (paste)=\"onPaste($event)\" (click)=\"onInputClick()\"\n                (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\">\n            <span class=\"p-inputnumber-button-group\" *ngIf=\"showButtons && buttonLayout === 'stacked'\">\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n                <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" [disabled]=\"disabled\"\n                    (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n            </span>\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-up': true}\" [class]=\"incrementButtonClass\" [icon]=\"incrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onUpButtonMouseDown($event)\" (mouseup)=\"onUpButtonMouseUp()\" (mouseleave)=\"onUpButtonMouseLeave()\" (keydown)=\"onUpButtonKeyDown($event)\" (keyup)=\"onUpButtonKeyUp()\"></button>\n            <button type=\"button\" pButton [ngClass]=\"{'p-inputnumber-button p-inputnumber-button-down': true}\" [class]=\"decrementButtonClass\" [icon]=\"decrementButtonIcon\" *ngIf=\"showButtons && buttonLayout !== 'stacked'\" [disabled]=\"disabled\"\n                (mousedown)=\"this.onDownButtonMouseDown($event)\" (mouseup)=\"onDownButtonMouseUp()\" (mouseleave)=\"onDownButtonMouseLeave()\" (keydown)=\"onDownButtonKeyDown($event)\" (keyup)=\"onDownButtonKeyUp()\"></button>\n        </span>\n    `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [INPUTNUMBER_VALUE_ACCESSOR],\n                    encapsulation: ViewEncapsulation.None,\n                    styleUrls: ['./inputnumber.css'],\n                    host: {\n                        '[class.p-inputwrapper-filled]': 'filled',\n                        '[class.p-inputwrapper-focus]': 'focused'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { showButtons: [{\n                type: Input\n            }], format: [{\n                type: Input\n            }], buttonLayout: [{\n                type: Input\n            }], inputId: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], placeholder: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], maxlength: [{\n                type: Input\n            }], tabindex: [{\n                type: Input\n            }], title: [{\n                type: Input\n            }], ariaLabel: [{\n                type: Input\n            }], ariaRequired: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], required: [{\n                type: Input\n            }], autocomplete: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], incrementButtonClass: [{\n                type: Input\n            }], decrementButtonClass: [{\n                type: Input\n            }], incrementButtonIcon: [{\n                type: Input\n            }], decrementButtonIcon: [{\n                type: Input\n            }], step: [{\n                type: Input\n            }], inputStyle: [{\n                type: Input\n            }], inputStyleClass: [{\n                type: Input\n            }], input: [{\n                type: ViewChild,\n                args: ['input']\n            }], onInput: [{\n                type: Output\n            }], onFocus: [{\n                type: Output\n            }], onBlur: [{\n                type: Output\n            }], onKeyDown: [{\n                type: Output\n            }], locale: [{\n                type: Input\n            }], localeMatcher: [{\n                type: Input\n            }], mode: [{\n                type: Input\n            }], currency: [{\n                type: Input\n            }], currencyDisplay: [{\n                type: Input\n            }], useGrouping: [{\n                type: Input\n            }], minFractionDigits: [{\n                type: Input\n            }], maxFractionDigits: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], suffix: [{\n                type: Input\n            }], disabled: [{\n                type: Input\n            }] } });\nclass InputNumberModule {\n}\nInputNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: InputNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nInputNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: InputNumberModule, declarations: [InputNumber], imports: [CommonModule, InputTextModule, ButtonModule], exports: [InputNumber] });\nInputNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: InputNumberModule, imports: [[CommonModule, InputTextModule, ButtonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: InputNumberModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, InputTextModule, ButtonModule],\n                    exports: [InputNumber],\n                    declarations: [InputNumber]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { INPUTNUMBER_VALUE_ACCESSOR, InputNumber, InputNumberModule };\n//# sourceMappingURL=primeng-inputnumber.js.map\n"]},"metadata":{},"sourceType":"module"}