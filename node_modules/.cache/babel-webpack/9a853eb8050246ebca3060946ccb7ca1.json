{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst _c0 = function (a0, a1, a2) {\n  return {\n    \"p-checkbox-label-active\": a0,\n    \"p-disabled\": a1,\n    \"p-checkbox-label-focus\": a2\n  };\n};\n\nfunction TriStateCheckbox_label_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"label\", 7);\n    i0.ɵɵlistener(\"click\", function TriStateCheckbox_label_6_Template_label_click_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n\n      const _r0 = i0.ɵɵreference(3);\n\n      return ctx_r2.onClick($event, _r0);\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(3, _c0, ctx_r1.value != null, ctx_r1.disabled, ctx_r1.focused));\n    i0.ɵɵattribute(\"for\", ctx_r1.inputId);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r1.label);\n  }\n}\n\nconst _c1 = function (a1, a2) {\n  return {\n    \"p-checkbox p-component\": true,\n    \"p-checkbox-disabled\": a1,\n    \"p-checkbox-focused\": a2\n  };\n};\n\nconst _c2 = function (a0, a1, a2) {\n  return {\n    \"p-highlight\": a0,\n    \"p-disabled\": a1,\n    \"p-focus\": a2\n  };\n};\n\nconst TRISTATECHECKBOX_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\nclass TriStateCheckbox {\n  constructor(cd) {\n    this.cd = cd;\n    this.checkboxTrueIcon = 'pi pi-check';\n    this.checkboxFalseIcon = 'pi pi-times';\n    this.onChange = new EventEmitter();\n\n    this.onModelChange = () => {};\n\n    this.onModelTouched = () => {};\n  }\n\n  onClick(event, input) {\n    if (!this.disabled && !this.readonly) {\n      this.toggle(event);\n      this.focused = true;\n      input.focus();\n    }\n  }\n\n  onKeydown(event) {\n    if (event.keyCode == 32) {\n      event.preventDefault();\n    }\n  }\n\n  onKeyup(event) {\n    if (event.keyCode == 32 && !this.readonly) {\n      this.toggle(event);\n      event.preventDefault();\n    }\n  }\n\n  toggle(event) {\n    if (this.value == null || this.value == undefined) this.value = true;else if (this.value == true) this.value = false;else if (this.value == false) this.value = null;\n    this.onModelChange(this.value);\n    this.onChange.emit({\n      originalEvent: event,\n      value: this.value\n    });\n  }\n\n  onFocus() {\n    this.focused = true;\n  }\n\n  onBlur() {\n    this.focused = false;\n    this.onModelTouched();\n  }\n\n  registerOnChange(fn) {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn) {\n    this.onModelTouched = fn;\n  }\n\n  writeValue(value) {\n    this.value = value;\n    this.cd.markForCheck();\n  }\n\n  setDisabledState(disabled) {\n    this.disabled = disabled;\n    this.cd.markForCheck();\n  }\n\n}\n\nTriStateCheckbox.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: TriStateCheckbox,\n  deps: [{\n    token: i0.ChangeDetectorRef\n  }],\n  target: i0.ɵɵFactoryTarget.Component\n});\nTriStateCheckbox.ɵcmp = i0.ɵɵdefineComponent({\n  type: TriStateCheckbox,\n  selectors: [[\"p-triStateCheckbox\"]],\n  inputs: {\n    disabled: \"disabled\",\n    name: \"name\",\n    ariaLabelledBy: \"ariaLabelledBy\",\n    tabindex: \"tabindex\",\n    inputId: \"inputId\",\n    style: \"style\",\n    styleClass: \"styleClass\",\n    label: \"label\",\n    readonly: \"readonly\",\n    checkboxTrueIcon: \"checkboxTrueIcon\",\n    checkboxFalseIcon: \"checkboxFalseIcon\"\n  },\n  outputs: {\n    onChange: \"onChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([TRISTATECHECKBOX_VALUE_ACCESSOR])],\n  decls: 7,\n  vars: 21,\n  consts: [[3, \"ngStyle\", \"ngClass\"], [1, \"p-hidden-accessible\"], [\"type\", \"text\", \"inputmode\", \"none\", 3, \"name\", \"readonly\", \"disabled\", \"keyup\", \"keydown\", \"focus\", \"blur\"], [\"input\", \"\"], [\"role\", \"checkbox\", 1, \"p-checkbox-box\", 3, \"ngClass\", \"click\"], [1, \"p-checkbox-icon\", 3, \"ngClass\"], [\"class\", \"p-checkbox-label\", 3, \"ngClass\", \"click\", 4, \"ngIf\"], [1, \"p-checkbox-label\", 3, \"ngClass\", \"click\"]],\n  template: function TriStateCheckbox_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r4 = i0.ɵɵgetCurrentView();\n\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"input\", 2, 3);\n      i0.ɵɵlistener(\"keyup\", function TriStateCheckbox_Template_input_keyup_2_listener($event) {\n        return ctx.onKeyup($event);\n      })(\"keydown\", function TriStateCheckbox_Template_input_keydown_2_listener($event) {\n        return ctx.onKeydown($event);\n      })(\"focus\", function TriStateCheckbox_Template_input_focus_2_listener() {\n        return ctx.onFocus();\n      })(\"blur\", function TriStateCheckbox_Template_input_blur_2_listener() {\n        return ctx.onBlur();\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"div\", 4);\n      i0.ɵɵlistener(\"click\", function TriStateCheckbox_Template_div_click_4_listener($event) {\n        i0.ɵɵrestoreView(_r4);\n\n        const _r0 = i0.ɵɵreference(3);\n\n        return ctx.onClick($event, _r0);\n      });\n      i0.ɵɵelement(5, \"span\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(6, TriStateCheckbox_label_6_Template, 2, 7, \"label\", 6);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.styleClass);\n      i0.ɵɵproperty(\"ngStyle\", ctx.style)(\"ngClass\", i0.ɵɵpureFunction2(14, _c1, ctx.disabled, ctx.focused));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"name\", ctx.name)(\"readonly\", ctx.readonly)(\"disabled\", ctx.disabled);\n      i0.ɵɵattribute(\"id\", ctx.inputId)(\"tabindex\", ctx.tabindex)(\"aria-labelledby\", ctx.ariaLabelledBy);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction3(17, _c2, ctx.value != null, ctx.disabled, ctx.focused));\n      i0.ɵɵattribute(\"aria-checked\", ctx.value === true);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngClass\", ctx.value === true ? ctx.checkboxTrueIcon : ctx.value === false ? ctx.checkboxFalseIcon : \"\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.label);\n    }\n  },\n  directives: [i1.NgStyle, i1.NgClass, i1.NgIf],\n  encapsulation: 2,\n  changeDetection: 0\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: TriStateCheckbox,\n  decorators: [{\n    type: Component,\n    args: [{\n      selector: 'p-triStateCheckbox',\n      template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\" inputmode=\"none\">\n            </div>\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"value === true ? checkboxTrueIcon : value === false ? checkboxFalseIcon : ''\"></span>\n            </div>\n        </div>\n        <label class=\"p-checkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n      providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      encapsulation: ViewEncapsulation.None\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ChangeDetectorRef\n    }];\n  },\n  propDecorators: {\n    disabled: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    ariaLabelledBy: [{\n      type: Input\n    }],\n    tabindex: [{\n      type: Input\n    }],\n    inputId: [{\n      type: Input\n    }],\n    style: [{\n      type: Input\n    }],\n    styleClass: [{\n      type: Input\n    }],\n    label: [{\n      type: Input\n    }],\n    readonly: [{\n      type: Input\n    }],\n    checkboxTrueIcon: [{\n      type: Input\n    }],\n    checkboxFalseIcon: [{\n      type: Input\n    }],\n    onChange: [{\n      type: Output\n    }]\n  }\n});\n\nclass TriStateCheckboxModule {}\n\nTriStateCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: TriStateCheckboxModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nTriStateCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: TriStateCheckboxModule,\n  declarations: [TriStateCheckbox],\n  imports: [CommonModule],\n  exports: [TriStateCheckbox]\n});\nTriStateCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: TriStateCheckboxModule,\n  imports: [[CommonModule]]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"12.0.0\",\n  ngImport: i0,\n  type: TriStateCheckboxModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      exports: [TriStateCheckbox],\n      declarations: [TriStateCheckbox]\n    }]\n  }]\n});\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TRISTATECHECKBOX_VALUE_ACCESSOR, TriStateCheckbox, TriStateCheckboxModule }; //# sourceMappingURL=primeng-tristatecheckbox.js.map","map":{"version":3,"sources":["C:/Users/trang/Projects/SenecaForum/node_modules/primeng/fesm2015/primeng-tristatecheckbox.js"],"names":["i0","forwardRef","EventEmitter","Component","ChangeDetectionStrategy","ViewEncapsulation","Input","Output","NgModule","i1","CommonModule","NG_VALUE_ACCESSOR","TRISTATECHECKBOX_VALUE_ACCESSOR","provide","useExisting","TriStateCheckbox","multi","constructor","cd","checkboxTrueIcon","checkboxFalseIcon","onChange","onModelChange","onModelTouched","onClick","event","input","disabled","readonly","toggle","focused","focus","onKeydown","keyCode","preventDefault","onKeyup","value","undefined","emit","originalEvent","onFocus","onBlur","registerOnChange","fn","registerOnTouched","writeValue","markForCheck","setDisabledState","ɵfac","ɵɵngDeclareFactory","minVersion","version","ngImport","type","deps","token","ChangeDetectorRef","target","ɵɵFactoryTarget","ɵcmp","NgStyle","NgClass","NgIf","ɵɵngDeclareClassMetadata","decorators","args","selector","template","providers","changeDetection","OnPush","encapsulation","None","ctorParameters","propDecorators","name","ariaLabelledBy","tabindex","inputId","style","styleClass","label","TriStateCheckboxModule","ɵmod","ɵɵngDeclareNgModule","declarations","imports","exports","ɵinj","ɵɵngDeclareInjector"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { forwardRef, EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nconst TRISTATECHECKBOX_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => TriStateCheckbox),\n    multi: true\n};\nclass TriStateCheckbox {\n    constructor(cd) {\n        this.cd = cd;\n        this.checkboxTrueIcon = 'pi pi-check';\n        this.checkboxFalseIcon = 'pi pi-times';\n        this.onChange = new EventEmitter();\n        this.onModelChange = () => { };\n        this.onModelTouched = () => { };\n    }\n    onClick(event, input) {\n        if (!this.disabled && !this.readonly) {\n            this.toggle(event);\n            this.focused = true;\n            input.focus();\n        }\n    }\n    onKeydown(event) {\n        if (event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n    onKeyup(event) {\n        if (event.keyCode == 32 && !this.readonly) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n    toggle(event) {\n        if (this.value == null || this.value == undefined)\n            this.value = true;\n        else if (this.value == true)\n            this.value = false;\n        else if (this.value == false)\n            this.value = null;\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        });\n    }\n    onFocus() {\n        this.focused = true;\n    }\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n    registerOnChange(fn) {\n        this.onModelChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onModelTouched = fn;\n    }\n    writeValue(value) {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n    setDisabledState(disabled) {\n        this.disabled = disabled;\n        this.cd.markForCheck();\n    }\n}\nTriStateCheckbox.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: TriStateCheckbox, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nTriStateCheckbox.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.0.0\", type: TriStateCheckbox, selector: \"p-triStateCheckbox\", inputs: { disabled: \"disabled\", name: \"name\", ariaLabelledBy: \"ariaLabelledBy\", tabindex: \"tabindex\", inputId: \"inputId\", style: \"style\", styleClass: \"styleClass\", label: \"label\", readonly: \"readonly\", checkboxTrueIcon: \"checkboxTrueIcon\", checkboxFalseIcon: \"checkboxFalseIcon\" }, outputs: { onChange: \"onChange\" }, providers: [TRISTATECHECKBOX_VALUE_ACCESSOR], ngImport: i0, template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\" inputmode=\"none\">\n            </div>\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"value === true ? checkboxTrueIcon : value === false ? checkboxFalseIcon : ''\"></span>\n            </div>\n        </div>\n        <label class=\"p-checkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `, isInline: true, directives: [{ type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: TriStateCheckbox, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'p-triStateCheckbox',\n                    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\" inputmode=\"none\">\n            </div>\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"value === true ? checkboxTrueIcon : value === false ? checkboxFalseIcon : ''\"></span>\n            </div>\n        </div>\n        <label class=\"p-checkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n                    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { disabled: [{\n                type: Input\n            }], name: [{\n                type: Input\n            }], ariaLabelledBy: [{\n                type: Input\n            }], tabindex: [{\n                type: Input\n            }], inputId: [{\n                type: Input\n            }], style: [{\n                type: Input\n            }], styleClass: [{\n                type: Input\n            }], label: [{\n                type: Input\n            }], readonly: [{\n                type: Input\n            }], checkboxTrueIcon: [{\n                type: Input\n            }], checkboxFalseIcon: [{\n                type: Input\n            }], onChange: [{\n                type: Output\n            }] } });\nclass TriStateCheckboxModule {\n}\nTriStateCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: TriStateCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTriStateCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: TriStateCheckboxModule, declarations: [TriStateCheckbox], imports: [CommonModule], exports: [TriStateCheckbox] });\nTriStateCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: TriStateCheckboxModule, imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.0.0\", ngImport: i0, type: TriStateCheckboxModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    exports: [TriStateCheckbox],\n                    declarations: [TriStateCheckbox]\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TRISTATECHECKBOX_VALUE_ACCESSOR, TriStateCheckbox, TriStateCheckboxModule };\n//# sourceMappingURL=primeng-tristatecheckbox.js.map\n"]},"metadata":{},"sourceType":"module"}