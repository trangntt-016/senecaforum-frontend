{"version":3,"file":"ngx-avatar.js","sources":["../../../projects/ngx-avatar/src/lib/sources/async-source.ts","../../../projects/ngx-avatar/src/lib/sources/avatar-source.enum.ts","../../../projects/ngx-avatar/src/lib/sources/facebook.ts","../../../projects/ngx-avatar/src/lib/sources/twitter.ts","../../../projects/ngx-avatar/src/lib/sources/google.ts","../../../projects/ngx-avatar/src/lib/sources/instagram.ts","../../../projects/ngx-avatar/src/lib/sources/custom.ts","../../../projects/ngx-avatar/src/lib/sources/initials.ts","../../../projects/ngx-avatar/src/lib/sources/gravatar.ts","../../../projects/ngx-avatar/src/lib/sources/skype.ts","../../../projects/ngx-avatar/src/lib/sources/value.ts","../../../projects/ngx-avatar/src/lib/sources/vkontakte.ts","../../../projects/ngx-avatar/src/lib/sources/github.ts","../../../projects/ngx-avatar/src/lib/sources/source.factory.ts","../../../projects/ngx-avatar/src/lib/avatar-config.token.ts","../../../projects/ngx-avatar/src/lib/avatar-config.service.ts","../../../projects/ngx-avatar/src/lib/avatar.service.ts","../../../projects/ngx-avatar/src/lib/avatar.component.ts","../../../projects/ngx-avatar/src/lib/avatar.module.ts","../../../projects/ngx-avatar/src/public_api.ts","../../../projects/ngx-avatar/src/ngx-avatar.ts"],"sourcesContent":["import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Contract of all async sources.\n * Every async source must implement the processResponse method that extracts the avatar url from the data\n */\nexport abstract class AsyncSource implements Source {\n  readonly abstract sourceType: AvatarSource;\n\n  constructor(public sourceId: string) {}\n\n  abstract getAvatar(size: number): string;\n  abstract processResponse(data: unknown, size?: number): string | null;\n}\n","export enum AvatarSource {\n  FACEBOOK = 'facebook',\n  GOOGLE = 'google',\n  TWITTER = 'twitter',\n  INSTAGRAM = 'instagram',\n  VKONTAKTE = 'vkontakte',\n  SKYPE = 'skype',\n  GRAVATAR = 'gravatar',\n  GITHUB = 'github',\n  CUSTOM = 'custom',\n  INITIALS = 'initials',\n  VALUE = 'value'\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Facebook source implementation.\n *  Fetch avatar source based on facebook identifier\n *  and image size\n */\nexport class Facebook implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.FACEBOOK;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(size: number): string {\n    return (\n      'https://graph.facebook.com/' +\n      `${this.sourceId}/picture?width=${size}&height=${size}`\n    );\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Twitter source implementation.\n *  Fetch avatar source based on google identifier\n *  and image size\n */\nexport class Twitter implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.TWITTER;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(size: number): string {\n    const twitterImgSize = this.getImageSize(size);\n    return `https://twitter.com/${\n      this.sourceId\n    }/profile_image?size=${twitterImgSize}`;\n  }\n\n  private getImageSize(size: number) {\n    if (size <= 24) {\n      return 'mini';\n    }\n\n    if (size <= 48) {\n      return 'normal';\n    }\n\n    if (size <= 73) {\n      return 'bigger';\n    }\n\n    return 'original';\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Google source implementation.\n *  Fetch avatar source based on google identifier\n *  and image size\n */\nexport class Google extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.GOOGLE;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://picasaweb.google.com/data/entry/api/user/${\n      this.sourceId\n    }?alt=json`;\n  }\n\n  /**\n   * Extract google avatar from json data\n   */\n  public processResponse(data: { entry: { gphoto$thumbnail: { $t: string } } }, size?: number): string | null {\n    const avatarSrc = data.entry.gphoto$thumbnail.$t;\n    if (avatarSrc) {\n      return avatarSrc.replace('s64', 's' + size);\n    }\n\n    return null;\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Instagram source impelementation.\n *  Fetch avatar source based on instagram identifier\n */\nexport class Instagram extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.INSTAGRAM;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://www.instagram.com/${this.sourceId}/?__a=1`;\n  }\n\n  /**\n   * extract instagram avatar from json data\n   */\n  public processResponse(data: { graphql: { user: { profile_pic_url_hd: string } } }, size?: number): string {\n    return `${data.graphql.user.profile_pic_url_hd}&s=${size}`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Custom source implementation.\n *  return custom image as an avatar\n *\n */\nexport class Custom implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.CUSTOM;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return this.sourceId;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Initials source implementation.\n * return the initials of the given value\n */\nexport class Initials implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.INITIALS;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(size: number): string {\n    return this.getInitials(this.sourceId, size);\n  }\n\n  /**\n   * Returns the initial letters of a name in a string.\n   */\n  private getInitials(name: string, size: number): string {\n    name = name.trim();\n\n    if (!name) {\n      return '';\n    }\n\n    const initials = name.split(' ');\n\n    if (size && size < initials.length) {\n      return this.constructInitials(initials.slice(0, size));\n    } else {\n      return this.constructInitials(initials);\n    }\n  }\n\n  /**\n   * Iterates a person's name string to get the initials of each word in uppercase.\n   */\n  private constructInitials(elements: string[]): string {\n    if (!elements || !elements.length) {\n      return '';\n    }\n\n    return elements\n      .filter(element => element && element.length > 0)\n      .map(element => element[0].toUpperCase())\n      .join('');\n  }\n}\n","import { Md5 } from 'ts-md5';\nimport { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\nfunction isRetina(): boolean {\n  if (typeof window !== 'undefined' && window !== null) {\n    if (window.devicePixelRatio > 1.25) {\n      return true;\n    }\n\n    const mediaQuery = '(-webkit-min-device-pixel-ratio: 1.25), (min--moz-device-pixel-ratio: 1.25), (-o-min-device-pixel-ratio: 5/4), (min-resolution: 1.25dppx)';\n    if (window.matchMedia && window.matchMedia(mediaQuery).matches) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n/**\n *  Gravatar source implementation.\n *  Fetch avatar source based on gravatar email\n */\nexport class Gravatar implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.GRAVATAR;\n  public sourceId: string;\n\n  constructor(public value: string) {\n    this.sourceId = value.match('^[a-f0-9]{32}$')\n      ? value\n      : Md5.hashStr(value).toString();\n  }\n\n  public getAvatar(size: number): string {\n    const avatarSize = isRetina() ? size * 2 : size;\n    return `https://secure.gravatar.com/avatar/${\n      this.sourceId\n    }?s=${avatarSize}&d=404`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n/**\n *  Skype source implementation.\n *  Fetch avatar source based on skype identifier\n */\nexport class Skype implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.SKYPE;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return `https://api.skype.com/users/${this.sourceId}/profile/avatar`;\n  }\n}\n","import { Source } from './source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Value source implementation.\n *  return the value as avatar\n */\nexport class Value implements Source {\n  readonly sourceType: AvatarSource = AvatarSource.VALUE;\n\n  constructor(public sourceId: string) {}\n\n  public getAvatar(): string {\n    return this.sourceId;\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  Vkontakte source implementation.\n *  Fetch avatar source based on vkontakte identifier\n *  and image size\n */\nconst apiVersion = 5.8;\n\nexport class Vkontakte extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.VKONTAKTE;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(size: number): string {\n    const imgSize = this.getImageSize(size);\n    return `https://api.vk.com/method/users.get?user_id=${\n      this.sourceId\n    }&v=${apiVersion}&fields=${imgSize}`;\n  }\n\n  /**\n   * extract vkontakte avatar from json data\n   */\n  public processResponse(data: {\n    response: {\n      [key: string]: string;\n    }[]\n  }): string | null {\n    // avatar key property is the size used to generate avatar url\n    // size property is always the last key in the response object\n    const sizeProperty = Object.keys(data['response'][0]).pop();\n    if (!sizeProperty) {\n      return null;\n    }\n    // return avatar src\n    return data['response'][0][sizeProperty] || null;\n  }\n\n  /**\n   * Returns image size related to vkontakte API\n   */\n  private getImageSize(size: number): string {\n    if (size <= 50) {\n      return 'photo_50';\n    }\n\n    if (size <= 100) {\n      return 'photo_100';\n    }\n\n    if (size <= 200) {\n      return 'photo_200';\n    }\n\n    return 'photo_max';\n  }\n}\n","import { AsyncSource } from './async-source';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n *  GitHub source implementation.\n *  Fetch avatar source based on github identifier\n */\nexport class Github extends AsyncSource {\n  readonly sourceType: AvatarSource = AvatarSource.GITHUB;\n\n  constructor(sourceId: string) {\n    super(sourceId);\n  }\n\n  public getAvatar(): string {\n    return `https://api.github.com/users/${this.sourceId}`;\n  }\n\n  /**\n   * extract github avatar from json data\n   */\n  public processResponse(data: { avatar_url: string }, size?: number): string {\n    if (size) {\n      return `${data.avatar_url}&s=${size}`;\n    }\n    return data.avatar_url;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Source } from './source';\nimport { Facebook } from './facebook';\nimport { Twitter } from './twitter';\nimport { Google } from './google';\nimport { Instagram } from './instagram';\nimport { Custom } from './custom';\nimport { Initials } from './initials';\nimport { Gravatar } from './gravatar';\nimport { Skype } from './skype';\nimport { Value } from './value';\nimport { Vkontakte } from './vkontakte';\nimport { Github } from './github';\nimport { SourceCreator } from './source.creator';\nimport { AvatarSource } from './avatar-source.enum';\n\n/**\n * Factory class that implements factory method pattern.\n * Used to create Source implementation class based\n * on the source Type\n */\n@Injectable()\nexport class SourceFactory {\n  private sources: { [key: string]: SourceCreator } = {};\n\n  constructor() {\n    this.sources[AvatarSource.FACEBOOK] = Facebook;\n    this.sources[AvatarSource.TWITTER] = Twitter;\n    this.sources[AvatarSource.GOOGLE] = Google;\n    this.sources[AvatarSource.INSTAGRAM] = Instagram;\n    this.sources[AvatarSource.SKYPE] = Skype;\n    this.sources[AvatarSource.GRAVATAR] = Gravatar;\n    this.sources[AvatarSource.CUSTOM] = Custom;\n    this.sources[AvatarSource.INITIALS] = Initials;\n    this.sources[AvatarSource.VALUE] = Value;\n    this.sources[AvatarSource.VKONTAKTE] = Vkontakte;\n    this.sources[AvatarSource.GITHUB] = Github;\n  }\n\n  public newInstance(sourceType: AvatarSource, sourceValue: string): Source {\n    return new this.sources[sourceType](sourceValue);\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { AvatarConfig } from './avatar-config';\n/**\n * Token used to inject the AvatarConfig object\n */\nexport const AVATAR_CONFIG = new InjectionToken<AvatarConfig>('avatar.config');\n","import { Injectable, Inject, Optional } from '@angular/core';\n\nimport { AvatarSource } from './sources/avatar-source.enum';\nimport { AVATAR_CONFIG } from './avatar-config.token';\nimport { AvatarConfig } from './avatar-config';\n\n@Injectable()\nexport class AvatarConfigService {\n  constructor(\n    @Optional()\n    @Inject(AVATAR_CONFIG)\n    public userConfig: AvatarConfig\n  ) {}\n\n  public getAvatarSources(defaultSources: AvatarSource[]): AvatarSource[] {\n    if (\n      this.userConfig &&\n      this.userConfig.sourcePriorityOrder &&\n      this.userConfig.sourcePriorityOrder.length\n    ) {\n      const uniqueSources = [...new Set(this.userConfig.sourcePriorityOrder)];\n      const validSources = uniqueSources.filter(source =>\n        defaultSources.includes(source)\n      );\n      return [\n        ...validSources,\n        ...defaultSources.filter(source => !validSources.includes(source))\n      ];\n    }\n    return defaultSources;\n  }\n\n  public getAvatarColors(defaultColors: string[]): string[] {\n    return (\n      (this.userConfig &&\n        this.userConfig.colors &&\n        this.userConfig.colors.length &&\n        this.userConfig.colors) ||\n      defaultColors\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\n\nimport { AvatarConfigService } from './avatar-config.service';\nimport { AvatarSource } from './sources/avatar-source.enum';\nimport { Source } from './sources/source';\n\n/**\n * list of Supported avatar sources\n */\nexport const defaultSources = [\n  AvatarSource.FACEBOOK,\n  AvatarSource.GOOGLE,\n  AvatarSource.TWITTER,\n  AvatarSource.INSTAGRAM,\n  AvatarSource.VKONTAKTE,\n  AvatarSource.SKYPE,\n  AvatarSource.GRAVATAR,\n  AvatarSource.GITHUB,\n  AvatarSource.CUSTOM,\n  AvatarSource.INITIALS,\n  AvatarSource.VALUE\n];\n\n/**\n * list of default colors\n */\nexport const defaultColors = [\n  '#1abc9c',\n  '#3498db',\n  '#f1c40f',\n  '#8e44ad',\n  '#e74c3c',\n  '#d35400',\n  '#2c3e50',\n  '#7f8c8d'\n];\n\n/**\n * Provides utilities methods related to Avatar component\n */\n@Injectable()\nexport class AvatarService {\n  public avatarSources: AvatarSource[] = defaultSources;\n  public avatarColors: string[] = defaultColors;\n\n  private readonly failedSources = new Map<string, Source>();\n\n  constructor(\n    private http: HttpClient,\n    private avatarConfigService: AvatarConfigService\n  ) {\n    this.overrideAvatarSources();\n    this.overrideAvatarColors();\n  }\n\n  public fetchAvatar(avatarUrl: string): Observable<unknown> {\n    return this.http.get(avatarUrl);\n  }\n\n  public getRandomColor(avatarText: string): string {\n    if (!avatarText) {\n      return 'transparent';\n    }\n    const asciiCodeSum = this.calculateAsciiCode(avatarText);\n    return this.avatarColors[asciiCodeSum % this.avatarColors.length];\n  }\n\n  public compareSources(\n    sourceType1: AvatarSource,\n    sourceType2: AvatarSource\n  ): number {\n    return (\n      this.getSourcePriority(sourceType1) - this.getSourcePriority(sourceType2)\n    );\n  }\n\n  public isSource(source: string): boolean {\n    return this.avatarSources.includes(source as AvatarSource);\n  }\n\n  public isTextAvatar(sourceType: AvatarSource): boolean {\n    return [AvatarSource.INITIALS, AvatarSource.VALUE].includes(sourceType);\n  }\n\n  private buildSourceKey(source: Source): string {\n    return source.sourceType + '-' + source.sourceId;\n  }\n\n  public sourceHasFailedBefore(source: Source): boolean {\n    return this.failedSources.has(this.buildSourceKey(source));\n  }\n\n  public markSourceAsFailed(source: Source): void {\n    this.failedSources.set(this.buildSourceKey(source), source);\n  }\n\n  private overrideAvatarSources(): void {\n    this.avatarSources = this.avatarConfigService.getAvatarSources(\n      defaultSources\n    );\n  }\n\n  private overrideAvatarColors(): void {\n    this.avatarColors = this.avatarConfigService.getAvatarColors(defaultColors);\n  }\n\n  private calculateAsciiCode(value: string): number {\n    return value\n      .split('')\n      .map(letter => letter.charCodeAt(0))\n      .reduce((previous, current) => previous + current);\n  }\n\n  private getSourcePriority(sourceType: AvatarSource) {\n    return this.avatarSources.indexOf(sourceType);\n  }\n}\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  OnChanges,\n  SimpleChanges,\n  OnDestroy\n} from '@angular/core';\n\nimport { Source } from './sources/source';\nimport { AsyncSource } from './sources/async-source';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\nimport { AvatarSource } from './sources/avatar-source.enum';\nimport { takeWhile, map } from 'rxjs/operators';\n\ntype Style = Partial<CSSStyleDeclaration>;\n\n/**\n * Universal avatar component that\n * generates avatar from different sources\n *\n * export\n * class AvatarComponent\n * implements {OnChanges}\n */\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'ngx-avatar',\n  styles: [\n    `\n      :host {\n        border-radius: 50%;\n      }\n    `\n  ],\n  template: `\n    <div\n      (click)=\"onAvatarClicked()\"\n      class=\"avatar-container\"\n      [ngStyle]=\"hostStyle\"\n    >\n      <img\n        *ngIf=\"avatarSrc; else textAvatar\"\n        [src]=\"avatarSrc\"\n        [width]=\"size\"\n        [height]=\"size\"\n        [ngStyle]=\"avatarStyle\"\n        (error)=\"fetchAvatarSource()\"\n        class=\"avatar-content\"\n        loading=\"lazy\"\n      />\n      <ng-template #textAvatar>\n        <div *ngIf=\"avatarText\" class=\"avatar-content\" [ngStyle]=\"avatarStyle\">\n          {{ avatarText }}\n        </div>\n      </ng-template>\n    </div>\n  `\n})\nexport class AvatarComponent implements OnChanges, OnDestroy {\n  @Input()\n  public round = true;\n  @Input()\n  public size: string | number = 50;\n  @Input()\n  public textSizeRatio = 3;\n  @Input()\n  public bgColor: string | undefined;\n  @Input()\n  public fgColor = '#FFF';\n  @Input()\n  public borderColor: string | undefined;\n  @Input()\n  public style: Style = {};\n  @Input()\n  public cornerRadius: string | number = 0;\n  @Input('facebookId')\n  public facebook?: string | null;\n  @Input('twitterId')\n  public twitter?: string | null;\n  @Input('googleId')\n  public google?: string | null;\n  @Input('instagramId')\n  public instagram?: string | null;\n  @Input('vkontakteId')\n  public vkontakte?: string | null;\n  @Input('skypeId')\n  public skype?: string | null;\n  @Input('gravatarId')\n  public gravatar?: string | null;\n  @Input('githubId')\n  public github?: string | null;\n  @Input('src')\n  public custom?: string | null;\n  @Input('name')\n  public initials?: string | null;\n  @Input()\n  public value?: string | null;\n  @Input()\n  public placeholder?: string;\n  @Input()\n  public initialsSize: string | number = 0;\n\n  @Output()\n  public clickOnAvatar: EventEmitter<Source> = new EventEmitter<Source>();\n\n  public isAlive = true;\n  public avatarSrc: string | null = null;\n  public avatarText: string | null = null;\n  public avatarStyle: Style = {};\n  public hostStyle: Style = {};\n\n  private currentIndex = -1;\n  private sources: Source[] = [];\n\n  constructor(\n    public sourceFactory: SourceFactory,\n    private avatarService: AvatarService\n  ) {}\n\n  public onAvatarClicked(): void {\n    this.clickOnAvatar.emit(this.sources[this.currentIndex]);\n  }\n\n  /**\n   * Detect inputs change\n   *\n   * param {{ [propKey: string]: SimpleChange }} changes\n   *\n   * memberof AvatarComponent\n   */\n  public ngOnChanges(changes: SimpleChanges): void {\n    for (const propName in changes) {\n      if (this.avatarService.isSource(propName)) {\n        const sourceType: AvatarSource = AvatarSource[propName.toUpperCase() as keyof typeof AvatarSource] ;\n        const currentValue = changes[propName].currentValue;\n        if (currentValue && typeof currentValue === 'string') {\n          this.addSource(sourceType, currentValue);\n        } else {\n          this.removeSource(sourceType);\n        }\n      }\n    }\n    // reinitialize the avatar component when a source property value has changed\n    // the fallback system must be re-invoked with the new values.\n    this.initializeAvatar();\n  }\n\n  /**\n   * Fetch avatar source\n   *\n   * memberOf AvatarComponent\n   */\n  public fetchAvatarSource(): void {\n    const previousSource = this.sources[this.currentIndex];\n    if (previousSource) {\n      this.avatarService.markSourceAsFailed(previousSource);\n    }\n\n    const source = this.findNextSource();\n    if (!source) {\n      return;\n    }\n\n    if (this.avatarService.isTextAvatar(source.sourceType)) {\n      this.buildTextAvatar(source);\n      this.avatarSrc = null;\n    } else {\n      this.buildImageAvatar(source);\n    }\n  }\n\n  private findNextSource(): Source | null {\n    while (++this.currentIndex < this.sources.length) {\n      const source = this.sources[this.currentIndex];\n      if (source && !this.avatarService.sourceHasFailedBefore(source)) {\n        return source;\n      }\n    }\n\n    return null;\n  }\n\n  public ngOnDestroy(): void {\n    this.isAlive = false;\n  }\n\n  /**\n   * Initialize the avatar component and its fallback system\n   */\n  private initializeAvatar(): void {\n    this.currentIndex = -1;\n    if (this.sources.length > 0) {\n      this.sortAvatarSources();\n      this.fetchAvatarSource();\n      this.hostStyle = {\n        width: this.size + 'px',\n        height: this.size + 'px'\n      };\n    }\n  }\n\n  private sortAvatarSources(): void {\n    this.sources.sort((source1, source2) =>\n      this.avatarService.compareSources(source1.sourceType, source2.sourceType)\n    );\n  }\n\n  private buildTextAvatar(avatarSource: Source): void {\n    this.avatarText = avatarSource.getAvatar(+this.initialsSize);\n    this.avatarStyle = this.getInitialsStyle(avatarSource.sourceId);\n  }\n\n  private buildImageAvatar(avatarSource: Source): void {\n    this.avatarStyle = this.getImageStyle();\n    if (avatarSource instanceof AsyncSource) {\n      this.fetchAndProcessAsyncAvatar(avatarSource);\n    } else {\n      this.avatarSrc = avatarSource.getAvatar(+this.size);\n    }\n  }\n\n  /**\n   *\n   * returns initials style\n   *\n   * memberOf AvatarComponent\n   */\n  private getInitialsStyle(avatarValue: string): Style {\n    return {\n      textAlign: 'center',\n      borderRadius: this.round ? '100%' : this.cornerRadius + 'px',\n      border: this.borderColor ? '1px solid ' + this.borderColor : '',\n      textTransform: 'uppercase',\n      color: this.fgColor,\n      backgroundColor: this.bgColor\n        ? this.bgColor\n        : this.avatarService.getRandomColor(avatarValue),\n      font:\n        Math.floor(+this.size / this.textSizeRatio) +\n        'px Helvetica, Arial, sans-serif',\n      lineHeight: this.size + 'px',\n      ...this.style\n    };\n  }\n\n  /**\n   *\n   * returns image style\n   *\n   * memberOf AvatarComponent\n   */\n  private getImageStyle(): Style {\n    return {\n      maxWidth: '100%',\n      borderRadius: this.round ? '50%' : this.cornerRadius + 'px',\n      border: this.borderColor ? '1px solid ' + this.borderColor : '',\n      width: this.size + 'px',\n      height: this.size + 'px',\n      ...this.style,\n    };\n  }\n  /**\n   * Fetch avatar image asynchronously.\n   *\n   * param {Source} source represents avatar source\n   * memberof AvatarComponent\n   */\n  private fetchAndProcessAsyncAvatar(source: AsyncSource): void {\n    if (this.avatarService.sourceHasFailedBefore(source)) {\n      return;\n    }\n\n    this.avatarService\n        .fetchAvatar(source.getAvatar(+this.size))\n        .pipe(\n            takeWhile(() => this.isAlive),\n            map(response => source.processResponse(response, +this.size)),\n        )\n        .subscribe(\n            avatarSrc => (this.avatarSrc = avatarSrc),\n            err => {\n              this.fetchAvatarSource();\n            },\n        );\n  }\n\n  /**\n   * Add avatar source\n   *\n   * param sourceType avatar source type e.g facebook,twitter, etc.\n   * param sourceValue  source value e.g facebookId value, etc.\n   */\n  private addSource(sourceType: AvatarSource, sourceValue: string): void {\n    const source = this.sources.find(s => s.sourceType === sourceType);\n    if (source) {\n      source.sourceId = sourceValue;\n    } else {\n      this.sources.push(\n          this.sourceFactory.newInstance(sourceType, sourceValue),\n      );\n    }\n  }\n\n  /**\n   * Remove avatar source\n   *\n   * param sourceType avatar source type e.g facebook,twitter, etc.\n   */\n  private removeSource(sourceType: AvatarSource): void {\n    this.sources = this.sources.filter(source => source.sourceType !== sourceType);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { AvatarComponent } from './avatar.component';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\nimport { AvatarConfig } from './avatar-config';\nimport { AVATAR_CONFIG } from './avatar-config.token';\nimport { AvatarConfigService } from './avatar-config.service';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [AvatarComponent],\n  providers: [SourceFactory, AvatarService, AvatarConfigService],\n  exports: [AvatarComponent]\n})\nexport class AvatarModule {\n  static forRoot(avatarConfig?: AvatarConfig): ModuleWithProviders<AvatarModule> {\n    return {\n      ngModule: AvatarModule,\n      providers: [\n        { provide: AVATAR_CONFIG, useValue: avatarConfig ? avatarConfig : {} }\n      ]\n    };\n  }\n}\n","/*\n * Public API Surface of ngx-avatar\n */\nexport * from './lib/avatar.module';\nexport * from './lib/avatar.component';\nexport * from './lib/avatar-config';\nexport * from './lib/avatar.service';\nexport * from './lib/sources/avatar-source.enum';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {AvatarConfigService as ɵb} from './lib/avatar-config.service';\nexport {AVATAR_CONFIG as ɵc} from './lib/avatar-config.token';\nexport {SourceFactory as ɵa} from './lib/sources/source.factory';"],"names":[],"mappings":"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"}