{"version":3,"file":"avatar.component.d.ts","sources":["avatar.component.d.ts"],"names":[],"mappingssourcesContent":["import { EventEmitter, OnChanges, SimpleChanges, OnDestroy } from '@angular/core';\nimport { Source } from './sources/source';\nimport { SourceFactory } from './sources/source.factory';\nimport { AvatarService } from './avatar.service';\ndeclare type Style = Partial<CSSStyleDeclaration>;\n/**\n * Universal avatar component that\n * generates avatar from different sources\n *\n * export\n * class AvatarComponent\n * implements {OnChanges}\n */\nexport declare class AvatarComponent implements OnChanges, OnDestroy {\n    sourceFactory: SourceFactory;\n    private avatarService;\n    round: boolean;\n    size: string | number;\n    textSizeRatio: number;\n    bgColor: string | undefined;\n    fgColor: string;\n    borderColor: string | undefined;\n    style: Style;\n    cornerRadius: string | number;\n    facebook?: string | null;\n    twitter?: string | null;\n    google?: string | null;\n    instagram?: string | null;\n    vkontakte?: string | null;\n    skype?: string | null;\n    gravatar?: string | null;\n    github?: string | null;\n    custom?: string | null;\n    initials?: string | null;\n    value?: string | null;\n    placeholder?: string;\n    initialsSize: string | number;\n    clickOnAvatar: EventEmitter<Source>;\n    isAlive: boolean;\n    avatarSrc: string | null;\n    avatarText: string | null;\n    avatarStyle: Style;\n    hostStyle: Style;\n    private currentIndex;\n    private sources;\n    constructor(sourceFactory: SourceFactory, avatarService: AvatarService);\n    onAvatarClicked(): void;\n    /**\n     * Detect inputs change\n     *\n     * param {{ [propKey: string]: SimpleChange }} changes\n     *\n     * memberof AvatarComponent\n     */\n    ngOnChanges(changes: SimpleChanges): void;\n    /**\n     * Fetch avatar source\n     *\n     * memberOf AvatarComponent\n     */\n    fetchAvatarSource(): void;\n    private findNextSource;\n    ngOnDestroy(): void;\n    /**\n     * Initialize the avatar component and its fallback system\n     */\n    private initializeAvatar;\n    private sortAvatarSources;\n    private buildTextAvatar;\n    private buildImageAvatar;\n    /**\n     *\n     * returns initials style\n     *\n     * memberOf AvatarComponent\n     */\n    private getInitialsStyle;\n    /**\n     *\n     * returns image style\n     *\n     * memberOf AvatarComponent\n     */\n    private getImageStyle;\n    /**\n     * Fetch avatar image asynchronously.\n     *\n     * param {Source} source represents avatar source\n     * memberof AvatarComponent\n     */\n    private fetchAndProcessAsyncAvatar;\n    /**\n     * Add avatar source\n     *\n     * param sourceType avatar source type e.g facebook,twitter, etc.\n     * param sourceValue  source value e.g facebookId value, etc.\n     */\n    private addSource;\n    /**\n     * Remove avatar source\n     *\n     * param sourceType avatar source type e.g facebook,twitter, etc.\n     */\n    private removeSource;\n}\nexport {};\n"]}