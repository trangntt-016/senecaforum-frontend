{"version":3,"file":"avatar.service.d.ts","sources":["avatar.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { AvatarConfigService } from './avatar-config.service';\nimport { AvatarSource } from './sources/avatar-source.enum';\nimport { Source } from './sources/source';\n/**\n * list of Supported avatar sources\n */\nexport declare const defaultSources: AvatarSource[];\n/**\n * list of default colors\n */\nexport declare const defaultColors: string[];\n/**\n * Provides utilities methods related to Avatar component\n */\nexport declare class AvatarService {\n    private http;\n    private avatarConfigService;\n    avatarSources: AvatarSource[];\n    avatarColors: string[];\n    private readonly failedSources;\n    constructor(http: HttpClient, avatarConfigService: AvatarConfigService);\n    fetchAvatar(avatarUrl: string): Observable<unknown>;\n    getRandomColor(avatarText: string): string;\n    compareSources(sourceType1: AvatarSource, sourceType2: AvatarSource): number;\n    isSource(source: string): boolean;\n    isTextAvatar(sourceType: AvatarSource): boolean;\n    private buildSourceKey;\n    sourceHasFailedBefore(source: Source): boolean;\n    markSourceAsFailed(source: Source): void;\n    private overrideAvatarSources;\n    private overrideAvatarColors;\n    private calculateAsciiCode;\n    private getSourcePriority;\n}\n"]}