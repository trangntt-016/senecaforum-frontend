{"version":3,"sources":["../../src/app/components/radiobutton/radiobutton.ts"],"names":["RADIO_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","RadioButton","multi","RadioControlRegistry","this","accessors","prototype","add","control","accessor","push","remove","filter","c","select","_this","forEach","isSameGroup","writeValue","value","controlPair","root","name","Injectable","args","providedIn","cd","injector","registry","onClick","EventEmitter","onFocus","onBlur","onModelChange","onModelTouched","ngOnInit","get","NgControl","checkName","handleClick","event","radioButton","focus","preventDefault","disabled","inputViewChild","nativeElement","checked","emit","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","val","onInputFocus","focused","onInputBlur","onChange","ngOnDestroy","formControlName","throwNameError","Error","Component","selector","template","providers","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","Injector","Input","Output","ViewChild","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,Input,Output,ElementRef,EventEmitter,forwardRef,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy, Injectable, Injector, OnInit, OnDestroy} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor, NgControl} from '@angular/forms';\n\nexport const RADIO_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => RadioButton),\n    multi: true\n};\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class RadioControlRegistry {\n    private accessors: any[] = [];\n\n    add(control: NgControl, accessor: RadioButton) {\n        this.accessors.push([control, accessor]);\n    }\n\n    remove(accessor: RadioButton) {\n        this.accessors = this.accessors.filter((c) => {\n            return c[1] !== accessor;\n        })\n    }\n\n    select(accessor: RadioButton) {\n        this.accessors.forEach((c) => {\n            if (this.isSameGroup(c, accessor) && c[1] !== accessor) {\n                c[1].writeValue(accessor.value);\n            }\n        });\n    }\n\n    private isSameGroup(controlPair: [NgControl, RadioButton], accessor: RadioButton): boolean {\n        if (!controlPair[0].control) {\n            return false;\n        }\n\n        return controlPair[0].control.root === accessor.control.control.root && controlPair[1].name === accessor.name;\n    }\n}\n\n@Component({\n    selector: 'p-radioButton',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-radiobutton p-component':true,'p-radiobutton-checked': checked, 'p-radiobutton-disabled': disabled, 'p-radiobutton-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #rb type=\"radio\" [attr.id]=\"inputId\" [attr.name]=\"name\" [attr.value]=\"value\" [attr.tabindex]=\"tabindex\" [attr.aria-checked]=\"checked\" [attr.aria-label]=\"ariaLabel\"\n                    [attr.aria-labelledby]=\"ariaLabelledBy\" [checked]=\"checked\" (change)=\"onChange($event)\" (focus)=\"onInputFocus($event)\" (blur)=\"onInputBlur($event)\" [disabled]=\"disabled\">\n            </div>\n            <div (click)=\"handleClick($event, rb, true)\" [ngClass]=\"{'p-radiobutton-box':true, 'p-highlight': checked, 'p-disabled': disabled, 'p-focus': focused}\">\n                <span class=\"p-radiobutton-icon\"></span>\n            </div>\n        </div>\n        <label (click)=\"select($event)\" [class]=\"labelStyleClass\"\n            [ngClass]=\"{'p-radiobutton-label':true, 'p-radiobutton-label-active':rb.checked, 'p-disabled':disabled, 'p-radiobutton-label-focus':focused}\"\n            *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [RADIO_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class RadioButton implements ControlValueAccessor, OnInit, OnDestroy {\n\n    @Input() value: any;\n\n    @Input() formControlName: string;\n\n    @Input() name: string;\n\n    @Input() disabled: boolean;\n\n    @Input() label: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() ariaLabel: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() labelStyleClass: string;\n\n    @Output() onClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('rb') inputViewChild: ElementRef;\n\n    public onModelChange: Function = () => {};\n\n    public onModelTouched: Function = () => {};\n\n    public checked: boolean;\n\n    public focused: boolean;\n\n    control: NgControl;\n\n    constructor(public cd: ChangeDetectorRef, private injector: Injector, private registry: RadioControlRegistry) {}\n\n    ngOnInit() {\n        this.control = this.injector.get(NgControl);\n        this.checkName();\n        this.registry.add(this.control, this);\n    }\n    \n    handleClick(event, radioButton, focus) {\n        event.preventDefault();\n\n        if (this.disabled) {\n            return;\n        }\n\n        this.select(event);\n\n        if (focus) {\n            radioButton.focus();\n        }\n    }\n    \n    select(event) {\n        if (!this.disabled) {\n            this.inputViewChild.nativeElement.checked = true;\n            this.checked = true;\n            this.onModelChange(this.value);\n            this.registry.select(this);\n            this.onClick.emit(event);\n        }\n    }\n\n    writeValue(value: any) : void {\n        this.checked = (value == this.value);\n\n        if (this.inputViewChild && this.inputViewChild.nativeElement) {\n            this.inputViewChild.nativeElement.checked = this.checked;\n        }\n\n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n\n    onInputFocus(event) {\n        this.focused = true;\n        this.onFocus.emit(event);\n    }\n\n    onInputBlur(event) {\n        this.focused = false;\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n\n    onChange(event) {\n        this.select(event);\n    }\n\n    focus() {\n        this.inputViewChild.nativeElement.focus();\n    }\n\n    ngOnDestroy() {\n        this.registry.remove(this);\n    }\n\n    private checkName() {\n        if (this.name && this.formControlName && this.name !== this.formControlName) {\n            this.throwNameError();\n        }\n        if (!this.name && this.formControlName) {\n            this.name = this.formControlName;\n        }\n    }\n\n    private throwNameError() {\n        throw new Error(`\n          If you define both a name and a formControlName attribute on your radio button, their values\n          must match. Ex: <p-radioButton formControlName=\"food\" name=\"food\"></p-radioButton>\n        `);\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [RadioButton],\n    declarations: [RadioButton]\n})\nexport class RadioButtonModule { }"]}