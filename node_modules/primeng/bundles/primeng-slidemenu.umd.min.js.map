{"version":3,"sources":["../../src/app/components/slidemenu/slidemenu.ts"],"names":["SlideMenuSub","slideMenu","this","backLabel","easing","prototype","itemClick","event","item","listitem","_this","disabled","preventDefault","url","command","originalEvent","items","animating","left","menuWidth","activeItem","setTimeout","effectDuration","popup","hide","ngOnDestroy","Component","args","selector","template","encapsulation","ViewEncapsulation","None","Inject","forwardRef","SlideMenu","Input","el","renderer","cd","viewportHeight","autoZIndex","baseZIndex","showTransitionOptions","hideTransitionOptions","onShow","EventEmitter","onHide","ngAfterViewChecked","viewportUpdated","containerViewChild","updateViewPort","Object","defineProperty","element","backwardViewChild","slideMenuContentViewChild","nativeElement","style","height","DomHandler","getHiddenElementOuterHeight","toggle","visible","show","preventDocumentDefault","target","currentTarget","markForCheck","onOverlayAnimationStart","toState","moveOnTop","emit","appendOverlay","absolutePosition","bindDocumentClickListener","bindDocumentResizeListener","bindScrollListener","onOverlayHide","appendTo","document","body","appendChild","restoreOverlayAppend","container","zIndex","String","zindex","onWindowResize","onClick","goBack","documentClickListener","documentTarget","ownerDocument","listen","detectChanges","unbindDocumentClickListener","documentResizeListener","bind","window","addEventListener","unbindDocumentResizeListener","removeEventListener","scrollHandler","ConnectedOverlayScrollHandler","unbindScrollListener","destroy","animations","trigger","transition","opacity","transform","animate","changeDetection","ChangeDetectionStrategy","OnPush","ElementRef","Renderer2","ChangeDetectorRef","Output","ViewChild","NgModule","imports","CommonModule","RouterModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,AfterViewChecked,OnDestroy,Input,Renderer2,Inject,forwardRef,ViewChild,Output,EventEmitter,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {trigger,state,style,transition,animate,AnimationEvent} from '@angular/animations';\nimport {CommonModule} from '@angular/common';\nimport {DomHandler, ConnectedOverlayScrollHandler} from 'primeng/dom';\nimport {MenuItem} from 'primeng/api';\nimport {RouterModule} from '@angular/router';\n\n@Component({\n    selector: 'p-slideMenuSub',\n    template: `\n        <ul [ngClass]=\"{'p-slidemenu-rootlist':root, 'p-submenu-list':!root, 'p-active-submenu': (-slideMenu.left == (index * menuWidth))}\"\n            [style.width.px]=\"menuWidth\" [style.left.px]=\"root ? slideMenu.left : slideMenu.menuWidth\"\n            [style.transitionProperty]=\"root ? 'left' : 'none'\" [style.transitionDuration]=\"effectDuration + 'ms'\" [style.transitionTimingFunction]=\"easing\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" [ngClass]=\"{'p-hidden': child.visible === false}\">\n                <li *ngIf=\"!child.separator\" #listitem [ngClass]=\"{'p-menuitem':true,'p-menuitem-active':listitem==activeItem,'p-hidden': child.visible === false}\"\n                    [class]=\"child.styleClass\" [ngStyle]=\"child.style\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" class=\"p-menuitem-link\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\"\n                        [ngClass]=\"{'p-disabled':child.disabled}\" [attr.tabindex]=\"child.disabled ? null : '0'\"\n                        (click)=\"itemClick($event, child, listitem)\">\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\">{{child.label}}</span>\n                        <span class=\"p-submenu-icon pi pi-fw pi-angle-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\"\n                        [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\" [href]=\"child.url\" class=\"p-menuitem-link\"\n                        [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\"\n                        [ngClass]=\"{'p-disabled':child.disabled}\"\n                        (click)=\"itemClick($event, child, listitem)\"\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\">\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\">{{child.label}}</span>\n                        <span class=\"p-submenu-icon pi pi-fw pi-caret-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <p-slideMenuSub class=\"p-submenu\" [item]=\"child\" [index]=\"index + 1\" [menuWidth]=\"menuWidth\" *ngIf=\"child.items\"></p-slideMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class SlideMenuSub implements OnDestroy {\n\n    @Input() item: MenuItem;\n\n    @Input() root: boolean;\n\n    @Input() backLabel: string = 'Back';\n\n    @Input() menuWidth: number;\n\n    @Input() effectDuration: any;\n\n    @Input() easing: string = 'ease-out';\n\n    @Input() index: number;\n\n    slideMenu: SlideMenu;\n\n    constructor(@Inject(forwardRef(() => SlideMenu)) slideMenu) {\n        this.slideMenu = slideMenu as SlideMenu;\n    }\n\n    activeItem: any;\n\n    itemClick(event, item: MenuItem, listitem: any) {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n\n        if (!item.url) {\n            event.preventDefault();\n        }\n\n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n\n        if (item.items && !this.slideMenu.animating) {\n            this.slideMenu.left -= this.slideMenu.menuWidth;\n\n            this.activeItem = listitem;\n            this.slideMenu.animating = true;\n            setTimeout(() => this.slideMenu.animating = false, this.effectDuration);\n        }\n\n        if (!item.items && this.slideMenu.popup) {\n            this.slideMenu.hide();\n        }\n    }\n\n    ngOnDestroy() {\n        this.activeItem = null;\n    }\n}\n\n@Component({\n    selector: 'p-slideMenu',\n    template: `\n        <div #container [ngClass]=\"{'p-slidemenu p-component':true, 'p-slidemenu-overlay':popup}\"\n            [class]=\"styleClass\" [ngStyle]=\"style\" (click)=\"onClick($event)\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" [@.disabled]=\"popup !== true\" (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" *ngIf=\"!popup || visible\">\n            <div class=\"p-slidemenu-wrapper\" [style.height]=\"left ? viewportHeight + 'px' : 'auto'\">\n                <div #slideMenuContent class=\"p-slidemenu-content\">\n                    <p-slideMenuSub [item]=\"model\" root=\"root\" [index]=\"0\" [menuWidth]=\"menuWidth\" [effectDuration]=\"effectDuration\" [easing]=\"easing\"></p-slideMenuSub>\n                </div>\n                <div #backward class=\"p-slidemenu-backward\" [style.display]=\"left ? 'block' : 'none'\" (click)=\"goBack()\">\n                    <span class=\"p-slidemenu-backward-icon pi pi-fw pi-caret-left\"></span><span>{{backLabel}}</span>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n              ]),\n              transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n              ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./slidemenu.css']\n})\nexport class SlideMenu implements AfterViewChecked, OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() popup: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() menuWidth: number = 190;\n\n    @Input() viewportHeight: number = 180;\n\n    @Input() effectDuration: any = 250;\n\n    @Input() easing: string = 'ease-out';\n\n    @Input() backLabel: string = 'Back';\n\n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @Output() onShow: EventEmitter<any> = new EventEmitter();\n\n    @Output() onHide: EventEmitter<any> = new EventEmitter();\n\n    containerViewChild: ElementRef;\n\n    backwardViewChild: ElementRef;\n\n    slideMenuContentViewChild: ElementRef;\n\n    documentClickListener: any;\n\n    documentResizeListener: any;\n\n    preventDocumentDefault: boolean;\n\n    scrollHandler: any;\n\n    left: number = 0;\n\n    animating: boolean = false;\n\n    target: any;\n\n    visible: boolean;\n\n    viewportUpdated: boolean;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) {}\n\n    ngAfterViewChecked() {\n        if (!this.viewportUpdated && !this.popup && this.containerViewChild) {\n            this.updateViewPort();\n            this.viewportUpdated = true;\n        }\n    }\n\n    @ViewChild('container') set container(element: ElementRef) {\n        this.containerViewChild = element;\n    }\n\n    @ViewChild('backward') set backward(element: ElementRef) {\n        this.backwardViewChild = element;\n    }\n\n    @ViewChild('slideMenuContent') set slideMenuContent(element: ElementRef) {\n        this.slideMenuContentViewChild = element;\n    }\n\n    updateViewPort() {\n        this.slideMenuContentViewChild.nativeElement.style.height = this.viewportHeight - DomHandler.getHiddenElementOuterHeight(this.backwardViewChild.nativeElement) + 'px';\n    }\n\n    toggle(event) {\n        if (this.visible)\n            this.hide();\n        else\n            this.show(event);\n\n        this.preventDocumentDefault = true;\n    }\n\n    show(event) {\n        this.target = event.currentTarget;\n        this.visible = true;\n        this.preventDocumentDefault = true;\n        this.cd.markForCheck();\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                if (this.popup) {\n                    this.updateViewPort();\n                    this.moveOnTop();\n                    this.onShow.emit({});\n                    this.appendOverlay();\n                    DomHandler.absolutePosition(this.containerViewChild.nativeElement, this.target);\n                    this.bindDocumentClickListener();\n                    this.bindDocumentResizeListener();\n                    this.bindScrollListener();\n                }\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n                this.onHide.emit({});\n            break;\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.containerViewChild.nativeElement);\n            else\n                DomHandler.appendChild(this.containerViewChild.nativeElement, this.appendTo);\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.containerViewChild.nativeElement);\n        }\n    }\n\n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.containerViewChild.nativeElement.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    hide() {\n        this.visible = false;\n        this.cd.markForCheck();\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n\n    onClick(event) {\n        this.preventDocumentDefault = true;\n    }\n\n    goBack() {\n        this.left += this.menuWidth;\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentClickListener = this.renderer.listen(documentTarget, 'click', () => {\n                if (!this.preventDocumentDefault) {\n                    this.hide();\n                    this.cd.detectChanges();\n                }\n\n                this.preventDocumentDefault = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                if (this.visible) {\n                    this.hide();\n                }\n            });\n        }\n\n        this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n        this.preventDocumentDefault = false;\n        this.target = null;\n        this.left = 0;\n    }\n\n    ngOnDestroy() {\n        if (this.popup) {\n            if (this.scrollHandler) {\n                this.scrollHandler.destroy();\n                this.scrollHandler = null;\n            }\n\n            this.restoreOverlayAppend();\n            this.onOverlayHide();\n        }\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule],\n    exports: [SlideMenu,RouterModule],\n    declarations: [SlideMenu,SlideMenuSub]\n})\nexport class SlideMenuModule { }\n"]}