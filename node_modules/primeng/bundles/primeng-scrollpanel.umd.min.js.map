{"version":3,"sources":["../../src/app/components/scrollpanel/scrollpanel.ts"],"names":["ScrollPanel","el","zone","cd","this","timeoutFrame","fn","setTimeout","prototype","ngAfterViewInit","_this","runOutsideAngular","moveBar","bind","onXBarMouseDown","onYBarMouseDown","onDocumentMouseMove","onDocumentMouseUp","window","addEventListener","contentViewChild","nativeElement","xBarViewChild","yBarViewChild","calculateContainerHeight","initialized","ngAfterContentInit","templates","forEach","item","getType","contentTemplate","template","container","containerViewChild","content","xBar","containerStyles","getComputedStyle","xBarStyles","pureContainerHeight","DomHandler","getHeight","parseInt","offsetHeight","style","height","parseFloat","paddingTop","paddingBottom","borderTopWidth","borderBottomWidth","totalWidth","scrollWidth","ownWidth","clientWidth","bottom","clientHeight","scrollXRatio","yBar","totalHeight","scrollHeight","ownHeight","right","scrollYRatio","requestAnimationFrame","addClass","removeClass","xBarWidth","Math","max","xBarLeft","scrollLeft","cssText","yBarHeight","yBarTop","scrollTop","markForCheck","e","isYBarClicked","lastPageY","pageY","document","body","preventDefault","isXBarClicked","lastPageX","pageX","onMouseMoveForXBar","onMouseMoveForYBar","deltaX","deltaY","scrollableHeight","removeEventListener","f","ngOnDestroy","refresh","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","NgZone","ChangeDetectorRef","Input","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, Input, AfterViewInit, OnDestroy, ElementRef, NgZone, ViewChild, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef, AfterContentInit, ContentChildren, QueryList, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { PrimeTemplate } from 'primeng/api';\n\n@Component({\n    selector: 'p-scrollPanel',\n    template: `\n        <div #container [ngClass]=\"'p-scrollpanel p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"p-scrollpanel-wrapper\">\n                <div #content class=\"p-scrollpanel-content\">\n                    <ng-content></ng-content>\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                </div>\n            </div>\n            <div #xBar class=\"p-scrollpanel-bar p-scrollpanel-bar-x\"></div>\n            <div #yBar class=\"p-scrollpanel-bar p-scrollpanel-bar-y\"></div>   \n        </div>\n    `,\n   changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./scrollpanel.css']\n})\nexport class ScrollPanel implements AfterViewInit, AfterContentInit, OnDestroy {\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n    \n    constructor(public el: ElementRef, public zone: NgZone, public cd: ChangeDetectorRef) {}\n\n    @ViewChild('container') containerViewChild: ElementRef;\n\n    @ViewChild('content') contentViewChild: ElementRef;\n\n    @ViewChild('xBar') xBarViewChild: ElementRef;\n    \n    @ViewChild('yBar') yBarViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    scrollYRatio: number;\n\n    scrollXRatio: number;\n\n    timeoutFrame: any = (fn) => setTimeout(fn, 0);\n\n    initialized: boolean;\n\n    lastPageY: number;\n\n    lastPageX: number;\n\n    isXBarClicked: boolean;\n\n    isYBarClicked: boolean;\n\n    contentTemplate: TemplateRef<any>;\n\n    ngAfterViewInit() {\n        this.zone.runOutsideAngular(() => {\n            this.moveBar();\n            this.moveBar = this.moveBar.bind(this);\n            this.onXBarMouseDown = this.onXBarMouseDown.bind(this);\n            this.onYBarMouseDown = this.onYBarMouseDown.bind(this);\n            this.onDocumentMouseMove = this.onDocumentMouseMove.bind(this);\n            this.onDocumentMouseUp = this.onDocumentMouseUp.bind(this);\n            \n            window.addEventListener('resize', this.moveBar);\n            this.contentViewChild.nativeElement.addEventListener('scroll', this.moveBar);\n            this.contentViewChild.nativeElement.addEventListener('mouseenter', this.moveBar);\n            this.xBarViewChild.nativeElement.addEventListener('mousedown', this.onXBarMouseDown);\n            this.yBarViewChild.nativeElement.addEventListener('mousedown', this.onYBarMouseDown);\n\n            this.calculateContainerHeight();\n\n            this.initialized = true;\n        });\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    calculateContainerHeight() {\n        let container = this.containerViewChild.nativeElement;\n        let content = this.contentViewChild.nativeElement;\n        let xBar = this.xBarViewChild.nativeElement;\n\n        let containerStyles = getComputedStyle(container),\n        xBarStyles = getComputedStyle(xBar),\n        pureContainerHeight = DomHandler.getHeight(container) - parseInt(xBarStyles['height'], 10);\n\n        if (containerStyles['max-height'] != \"none\" && pureContainerHeight == 0) {\n            if (content.offsetHeight + parseInt(xBarStyles['height'], 10) > parseInt(containerStyles['max-height'], 10)) {\n                container.style.height = containerStyles['max-height'];\n            }\n            else {\n                container.style.height = content.offsetHeight + parseFloat(containerStyles.paddingTop) + parseFloat(containerStyles.paddingBottom) + parseFloat(containerStyles.borderTopWidth) + parseFloat(containerStyles.borderBottomWidth) + \"px\";\n            }\n        }\n    }\n\n    moveBar() {\n        let container = this.containerViewChild.nativeElement;\n        let content = this.contentViewChild.nativeElement;\n\n        /* horizontal scroll */\n        let xBar = this.xBarViewChild.nativeElement;\n        let totalWidth = content.scrollWidth;\n        let ownWidth = content.clientWidth;\n        let bottom = (container.clientHeight - xBar.clientHeight) * -1;\n\n        this.scrollXRatio = ownWidth / totalWidth;\n\n        /* vertical scroll */\n        let yBar = this.yBarViewChild.nativeElement;\n        let totalHeight = content.scrollHeight;\n        let ownHeight = content.clientHeight;\n        let right = (container.clientWidth - yBar.clientWidth) * -1;\n\n        this.scrollYRatio = ownHeight / totalHeight;\n\n        this.requestAnimationFrame(() => {\n            if (this.scrollXRatio >= 1) {\n                DomHandler.addClass(xBar, 'p-scrollpanel-hidden');\n            } \n            else {\n                DomHandler.removeClass(xBar, 'p-scrollpanel-hidden');\n                const xBarWidth = Math.max(this.scrollXRatio * 100, 10);\n                const xBarLeft = content.scrollLeft * (100 - xBarWidth) / (totalWidth - ownWidth);\n                xBar.style.cssText = 'width:' + xBarWidth + '%; left:' + xBarLeft + '%;bottom:' + bottom + 'px;';\n            }\n\n            if (this.scrollYRatio >= 1) {\n                DomHandler.addClass(yBar, 'p-scrollpanel-hidden');\n            } \n            else {\n                DomHandler.removeClass(yBar, 'p-scrollpanel-hidden');\n                const yBarHeight = Math.max(this.scrollYRatio * 100, 10);\n                const yBarTop = content.scrollTop * (100 - yBarHeight) / (totalHeight - ownHeight);\n                yBar.style.cssText = 'height:' + yBarHeight + '%; top: calc(' + yBarTop + '% - ' + xBar.clientHeight + 'px);right:' + right + 'px;';\n            }\n        });\n        this.cd.markForCheck();\n    }\n\n    onYBarMouseDown(e: MouseEvent) {\n        this.isYBarClicked = true;\n        this.lastPageY = e.pageY;\n        DomHandler.addClass(this.yBarViewChild.nativeElement, 'p-scrollpanel-grabbed');\n        \n        DomHandler.addClass(document.body, 'p-scrollpanel-grabbed');\n\n        document.addEventListener('mousemove', this.onDocumentMouseMove);\n        document.addEventListener('mouseup', this.onDocumentMouseUp);\n        e.preventDefault();\n    }\n\n    onXBarMouseDown(e: MouseEvent) {\n        this.isXBarClicked = true;\n        this.lastPageX = e.pageX;\n        DomHandler.addClass(this.xBarViewChild.nativeElement, 'p-scrollpanel-grabbed');\n\n        DomHandler.addClass(document.body, 'p-scrollpanel-grabbed');\n\n        document.addEventListener('mousemove', this.onDocumentMouseMove);\n        document.addEventListener('mouseup', this.onDocumentMouseUp);\n        e.preventDefault();\n    }\n\n    onDocumentMouseMove(e: MouseEvent) {\n        if (this.isXBarClicked) {\n            this.onMouseMoveForXBar(e);\n        }\n        else if (this.isYBarClicked) {\n            this.onMouseMoveForYBar(e);\n        }\n        else {\n            this.onMouseMoveForXBar(e);\n            this.onMouseMoveForYBar(e);\n        }\n        \n    }\n\n    onMouseMoveForXBar(e: MouseEvent) {\n        let deltaX = e.pageX - this.lastPageX;\n        this.lastPageX = e.pageX;\n\n        this.requestAnimationFrame(() => {\n            this.contentViewChild.nativeElement.scrollLeft += deltaX / this.scrollXRatio;\n        });\n    }\n\n    onMouseMoveForYBar(e: MouseEvent) {\n        let deltaY = e.pageY - this.lastPageY;\n        this.lastPageY = e.pageY;\n\n        this.requestAnimationFrame(() => {\n            this.contentViewChild.nativeElement.scrollTop += deltaY / this.scrollYRatio;\n        });\n    }\n\n    scrollTop(scrollTop: number) {\n        let scrollableHeight = this.contentViewChild.nativeElement.scrollHeight - this.contentViewChild.nativeElement.clientHeight;\n        scrollTop = scrollTop > scrollableHeight ? scrollableHeight : scrollTop > 0 ? scrollTop : 0;\n        this.contentViewChild.nativeElement.scrollTop = scrollTop;\n    }\n\n    onDocumentMouseUp(e: Event) {\n        DomHandler.removeClass(this.yBarViewChild.nativeElement, 'p-scrollpanel-grabbed');\n        DomHandler.removeClass(this.xBarViewChild.nativeElement, 'p-scrollpanel-grabbed');\n        DomHandler.removeClass(document.body, 'p-scrollpanel-grabbed');\n\n        document.removeEventListener('mousemove', this.onDocumentMouseMove);\n        document.removeEventListener('mouseup', this.onDocumentMouseUp);\n        this.isXBarClicked = false;\n        this.isYBarClicked = false;\n    }\n\n    requestAnimationFrame(f: Function) {\n        let frame = window.requestAnimationFrame || this.timeoutFrame;\n        frame(f);\n    }\n\n    ngOnDestroy() {\n        if (this.initialized) {\n            window.removeEventListener('resize', this.moveBar);\n            this.contentViewChild.nativeElement.removeEventListener('scroll', this.moveBar);\n            this.contentViewChild.nativeElement.removeEventListener('mouseenter', this.moveBar);\n            this.xBarViewChild.nativeElement.removeEventListener('mousedown', this.onXBarMouseDown);\n            this.yBarViewChild.nativeElement.removeEventListener('mousedown', this.onYBarMouseDown);\n        }\n    }\n\n    refresh() {\n        this.moveBar();\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [ScrollPanel],\n    declarations: [ScrollPanel]\n})\nexport class ScrollPanelModule { }\n"]}