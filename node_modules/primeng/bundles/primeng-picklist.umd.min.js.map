{"version":3,"sources":["../../src/app/components/picklist/picklist.ts"],"names":["PickList","el","cd","filterService","this","trackBy","index","item","showSourceFilter","showTargetFilter","metaKeySelection","dragdrop","showSourceControls","showTargetControls","disabled","filterMatchMode","breakpoint","onMoveToSource","EventEmitter","onMoveAllToSource","onMoveAllToTarget","onMoveToTarget","onSourceReorder","onTargetReorder","onSourceSelect","onTargetSelect","onSourceFilter","onTargetFilter","selectedItemsSource","selectedItemsTarget","id","UniqueComponentId","SOURCE_LIST","TARGET_LIST","prototype","ngOnInit","responsive","createStyle","ngAfterContentInit","_this","templates","forEach","getType","itemTemplate","template","emptyMessageSourceTemplate","emptyMessageTargetTemplate","ngAfterViewChecked","movedUp","movedDown","listItems","DomHandler","find","reorderedListElement","listItem","length","scrollInView","onItemClick","event","selectedItems","callback","findIndexInSelection","selected","itemTouched","metaKey","ctrlKey","shiftKey","splice","push","emit","originalEvent","items","onSourceItemDblClick","moveRight","onTargetItemDblClick","moveLeft","onFilter","data","listType","query","target","value","trim","toLocaleLowerCase","filterLocale","filterValueSource","filterValueTarget","filter","searchFields","filterBy","split","visibleOptionsSource","visibleOptionsTarget","isItemVisible","isVisibleInList","filterValue","i","onItemTouchEnd","sortByIndexInList","list","sort","item1","item2","ObjectUtils","findIndexInList","moveUp","listElement","selectedItem","selectedItemIndex","movedItem","temp","moveTop","unshift","scrollTop","moveDown","moveBottom","scrollHeight","source","moveAllRight","movedItems","removedItem","moveAllLeft","isSelected","onDrop","isTransfer","previousContainer","container","dropIndexes","getDropIndexes","previousIndex","currentIndex","transferArrayItem","moveItemInArray","fromIndex","toIndex","droppedList","findFilteredCurrentIndex","visibleOptions","options","resetFilter","sourceFilterViewChild","nativeElement","targetFilterViewChild","onItemKeydown","currentTarget","which","nextItem","findNextItem","focus","preventDefault","prevItem","findPrevItem","nextElementSibling","hasClass","isHidden","previousElementSibling","styleElement","children","setAttribute","document","createElement","type","head","appendChild","innerHTML","destroyStyle","removeChild","ngOnDestroy","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","FilterService","Input","Output","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","ButtonModule","SharedModule","RippleModule","DragDropModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, AfterContentInit, AfterViewChecked, Input, Output, ContentChildren, QueryList, TemplateRef, EventEmitter, ViewChild, ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ButtonModule} from 'primeng/button';\nimport {SharedModule,PrimeTemplate,FilterService} from 'primeng/api';\nimport {DomHandler} from 'primeng/dom';\nimport {RippleModule} from 'primeng/ripple';\nimport {CdkDragDrop, DragDropModule, moveItemInArray, transferArrayItem} from '@angular/cdk/drag-drop';\nimport {ObjectUtils, UniqueComponentId} from 'primeng/utils';\n\n@Component({\n    selector: 'p-pickList',\n    template: `\n        <div [class]=\"styleClass\" [ngStyle]=\"style\" [ngClass]=\"'p-picklist p-component'\" cdkDropListGroup>\n            <div class=\"p-picklist-buttons p-picklist-source-controls\" *ngIf=\"showSourceControls\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-up\" [disabled]=\"disabled\" (click)=\"moveUp(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-up\" [disabled]=\"disabled\" (click)=\"moveTop(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-down\" [disabled]=\"disabled\" (click)=\"moveDown(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-down\" [disabled]=\"disabled\" (click)=\"moveBottom(sourcelist,source,selectedItemsSource,onSourceReorder,SOURCE_LIST)\"></button>\n            </div>\n            <div class=\"p-picklist-list-wrapper p-picklist-source-wrapper\">\n                <div class=\"p-picklist-header\" *ngIf=\"sourceHeader\">\n                    <div class=\"p-picklist-title\">{{sourceHeader}}</div>\n                </div>\n                <div class=\"p-picklist-filter-container\" *ngIf=\"filterBy && showSourceFilter !== false\">\n                    <div class=\"p-picklist-filter\">\n                        <input #sourceFilter type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,source,SOURCE_LIST)\" class=\"p-picklist-filter-input p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"sourceFilterPlaceholder\" [attr.aria-label]=\"ariaSourceFilterLabel\">\n                        <span class=\"p-picklist-filter-icon pi pi-search\"></span>\n                    </div>\n                </div>\n                \n                <ul #sourcelist class=\"p-picklist-list p-picklist-source\" cdkDropList [cdkDropListData]=\"source\" (cdkDropListDropped)=\"onDrop($event, SOURCE_LIST)\"\n                    [ngStyle]=\"sourceStyle\" role=\"listbox\" aria-multiselectable=\"multiple\">\n                    <ng-template ngFor let-item [ngForOf]=\"source\" [ngForTrackBy]=\"sourceTrackBy || trackBy\" let-i=\"index\" let-l=\"last\">\n                        <li [ngClass]=\"{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsSource),'p-disabled': disabled}\" pRipple cdkDrag [cdkDragData]=\"item\" [cdkDragDisabled]=\"!dragdrop\"\n                            (click)=\"onItemClick($event,item,selectedItemsSource,onSourceSelect)\" (dblclick)=\"onSourceItemDblClick()\" (touchend)=\"onItemTouchEnd()\" (keydown)=\"onItemKeydown($event,item,selectedItemsSource,onSourceSelect)\"\n                            *ngIf=\"isItemVisible(item, SOURCE_LIST)\" tabindex=\"0\" role=\"option\" [attr.aria-selected]=\"isSelected(item, selectedItemsSource)\">\n                            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\n                        </li>\n                    </ng-template>\n                    <ng-container *ngIf=\"(source == null || source.length === 0) && emptyMessageSourceTemplate\">\n                        <li class=\"p-picklist-empty-message\">\n                            <ng-container *ngTemplateOutlet=\"emptyMessageSourceTemplate\"></ng-container>\n                        </li>\n                    </ng-container>\n                </ul>\n            </div>\n            <div class=\"p-picklist-buttons p-picklist-transfer-buttons\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-right\" [disabled]=\"disabled\" (click)=\"moveRight()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-right\" [disabled]=\"disabled\" (click)=\"moveAllRight()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-left\" [disabled]=\"disabled\" (click)=\"moveLeft()\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-left\" [disabled]=\"disabled\" (click)=\"moveAllLeft()\"></button>\n            </div>\n            <div class=\"p-picklist-list-wrapper p-picklist-target-wrapper\">\n                <div class=\"p-picklist-header\" *ngIf=\"targetHeader\">\n                    <div class=\"p-picklist-title\" *ngIf=\"targetHeader\">{{targetHeader}}</div>\n                </div>\n                <div class=\"p-picklist-filter-container\" *ngIf=\"filterBy && showTargetFilter !== false\">\n                    <div class=\"p-picklist-filter\">\n                        <input #targetFilter type=\"text\" role=\"textbox\" (keyup)=\"onFilter($event,target,TARGET_LIST)\" class=\"p-picklist-filter-input p-inputtext p-component\" [disabled]=\"disabled\" [attr.placeholder]=\"targetFilterPlaceholder\" [attr.aria-label]=\"ariaTargetFilterLabel\">\n                        <span class=\"p-picklist-filter-icon pi pi-search\"></span>\n                    </div>\n                </div>\n                <ul #targetlist class=\"p-picklist-list p-picklist-target\" cdkDropList [cdkDropListData]=\"target\" (cdkDropListDropped)=\"onDrop($event, TARGET_LIST)\"\n                    [ngStyle]=\"targetStyle\" role=\"listbox\" aria-multiselectable=\"multiple\">\n                    <ng-template ngFor let-item [ngForOf]=\"target\" [ngForTrackBy]=\"targetTrackBy || trackBy\" let-i=\"index\" let-l=\"last\">\n                        <li [ngClass]=\"{'p-picklist-item':true,'p-highlight':isSelected(item,selectedItemsTarget), 'p-disabled': disabled}\" pRipple cdkDrag [cdkDragData]=\"item\" [cdkDragDisabled]=\"!dragdrop\"\n                            (click)=\"onItemClick($event,item,selectedItemsTarget,onTargetSelect)\" (dblclick)=\"onTargetItemDblClick()\" (touchend)=\"onItemTouchEnd()\" (keydown)=\"onItemKeydown($event,item,selectedItemsTarget,onTargetSelect)\"\n                            *ngIf=\"isItemVisible(item, TARGET_LIST)\" tabindex=\"0\" role=\"option\" [attr.aria-selected]=\"isSelected(item, selectedItemsTarget)\">\n                            <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: item, index: i}\"></ng-container>\n                        </li>\n                    </ng-template>\n                    <ng-container *ngIf=\"(target == null || target.length === 0) && emptyMessageTargetTemplate\">\n                        <li class=\"p-picklist-empty-message\">\n                            <ng-container *ngTemplateOutlet=\"emptyMessageTargetTemplate\"></ng-container>\n                        </li>\n                    </ng-container>\n                </ul>\n            </div>\n            <div class=\"p-picklist-buttons p-picklist-target-controls\" *ngIf=\"showTargetControls\">\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-up\" [disabled]=\"disabled\" (click)=\"moveUp(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-up\" [disabled]=\"disabled\" (click)=\"moveTop(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-down\" [disabled]=\"disabled\" (click)=\"moveDown(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)\"></button>\n                <button type=\"button\" pButton pRipple icon=\"pi pi-angle-double-down\" [disabled]=\"disabled\" (click)=\"moveBottom(targetlist,target,selectedItemsTarget,onTargetReorder,TARGET_LIST)\"></button>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./picklist.css']\n})\nexport class PickList implements AfterViewChecked,AfterContentInit {\n\n    @Input() source: any[];\n\n    @Input() target: any[];\n\n    @Input() sourceHeader: string;\n\n    @Input() targetHeader: string;\n\n    @Input() responsive: boolean;\n\n    @Input() filterBy: string;\n\n    @Input() filterLocale: string;\n\n    @Input() trackBy: Function = (index: number, item: any) => item;\n\n    @Input() sourceTrackBy: Function;\n\n    @Input() targetTrackBy: Function;\n\n    @Input() showSourceFilter: boolean = true;\n\n    @Input() showTargetFilter: boolean = true;\n\n    @Input() metaKeySelection: boolean = true;\n\n    @Input() dragdrop: boolean = false;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() sourceStyle: any;\n\n    @Input() targetStyle: any;\n\n    @Input() showSourceControls: boolean = true;\n\n    @Input() showTargetControls: boolean = true;\n\n    @Input() sourceFilterPlaceholder: string;\n\n    @Input() targetFilterPlaceholder: string;\n\n    @Input() disabled: boolean = false;\n\n    @Input() ariaSourceFilterLabel: string;\n\n    @Input() ariaTargetFilterLabel: string;\n\n    @Input() filterMatchMode: string = \"contains\";\n\n    @Input() breakpoint: string = \"960px\";\n\n    @Output() onMoveToSource: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveAllToSource: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveAllToTarget: EventEmitter<any> = new EventEmitter();\n\n    @Output() onMoveToTarget: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetReorder: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetSelect: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSourceFilter: EventEmitter<any> = new EventEmitter();\n\n    @Output() onTargetFilter: EventEmitter<any> = new EventEmitter();\n\n    @ViewChild('sourcelist') listViewSourceChild: ElementRef;\n\n    @ViewChild('targetlist') listViewTargetChild: ElementRef;\n\n    @ViewChild('sourceFilter') sourceFilterViewChild: ElementRef;\n\n    @ViewChild('targetFilter') targetFilterViewChild: ElementRef;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    public itemTemplate: TemplateRef<any>;\n\n    public visibleOptionsSource: any[];\n\n    public visibleOptionsTarget: any[];\n\n    selectedItemsSource: any[] = [];\n\n    selectedItemsTarget: any[] = [];\n\n    reorderedListElement: any;\n\n    movedUp: boolean;\n\n    movedDown: boolean;\n\n    itemTouched: boolean;\n\n    styleElement: any;\n\n    id: string = UniqueComponentId();\n\n    filterValueSource: string;\n\n    filterValueTarget: string;\n\n    fromListType: number;\n\n    emptyMessageSourceTemplate: TemplateRef<any>;\n\n    emptyMessageTargetTemplate: TemplateRef<any>;\n\n    readonly SOURCE_LIST = -1;\n\n    readonly TARGET_LIST = 1;\n\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef, public filterService: FilterService) {}\n\n\n    ngOnInit() {\n        if (this.responsive) {\n            this.createStyle();\n        }\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'item':\n                    this.itemTemplate = item.template;\n                break;\n\n                case 'emptymessagesource':\n                    this.emptyMessageSourceTemplate = item.template;\n                break;\n\n                case 'emptymessagetarget':\n                    this.emptyMessageTargetTemplate = item.template;\n                    break;\n\n                default:\n                    this.itemTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngAfterViewChecked() {\n        if (this.movedUp||this.movedDown) {\n            let listItems = DomHandler.find(this.reorderedListElement, 'li.p-highlight');\n            let listItem;\n\n            if (this.movedUp)\n                listItem = listItems[0];\n            else\n                listItem = listItems[listItems.length - 1];\n\n            DomHandler.scrollInView(this.reorderedListElement, listItem);\n            this.movedUp = false;\n            this.movedDown = false;\n            this.reorderedListElement = null;\n        }\n    }\n\n    onItemClick(event, item: any, selectedItems: any[], callback: EventEmitter<any>) {\n        if (this.disabled) {\n            return;\n        }\n\n        let index = this.findIndexInSelection(item,selectedItems);\n        let selected = (index != -1);\n        let metaSelection = this.itemTouched ? false : this.metaKeySelection;\n\n        if (metaSelection) {\n            let metaKey = (event.metaKey||event.ctrlKey||event.shiftKey);\n\n            if (selected && metaKey) {\n                selectedItems.splice(index, 1);\n            }\n            else {\n                if (!metaKey) {\n                    selectedItems.length = 0;\n                }\n                selectedItems.push(item);\n            }\n        }\n        else {\n            if (selected)\n                selectedItems.splice(index, 1);\n            else\n                selectedItems.push(item);\n        }\n\n        callback.emit({originalEvent: event, items: selectedItems});\n\n        this.itemTouched = false;\n    }\n\n    onSourceItemDblClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.moveRight();\n    }\n\n    onTargetItemDblClick() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.moveLeft();\n    }\n\n    onFilter(event: KeyboardEvent, data: any[], listType: number) {\n        let query = ((<HTMLInputElement> event.target).value.trim() as any).toLocaleLowerCase(this.filterLocale);\n        if (listType === this.SOURCE_LIST)\n            this.filterValueSource = query;\n        else if (listType === this.TARGET_LIST)\n            this.filterValueTarget = query;\n        \n        this.filter(data, listType);\n    }\n\n    filter(data: any[], listType: number) {\n        let searchFields = this.filterBy.split(',');\n\n        if (listType === this.SOURCE_LIST) {\n            this.visibleOptionsSource = this.filterService.filter(data, searchFields, this.filterValueSource, this.filterMatchMode, this.filterLocale);\n            this.onSourceFilter.emit({query: this.filterValueSource, value: this.visibleOptionsSource});\n        }\n        else if (listType === this.TARGET_LIST) {\n            this.visibleOptionsTarget = this.filterService.filter(data, searchFields, this.filterValueTarget, this.filterMatchMode, this.filterLocale);\n            this.onTargetFilter.emit({query: this.filterValueTarget, value: this.visibleOptionsTarget});\n        }\n    }\n\n    isItemVisible(item: any, listType: number): boolean {\n        if (listType == this.SOURCE_LIST)\n            return this.isVisibleInList(this.visibleOptionsSource, item, this.filterValueSource);\n        else\n            return this.isVisibleInList(this.visibleOptionsTarget, item, this.filterValueTarget);\n    }\n\n    isVisibleInList(data: any[], item: any, filterValue: string): boolean {\n        if (filterValue && filterValue.trim().length) {\n            for(let i = 0; i < data.length; i++) {\n                if (item == data[i]) {\n                    return true;\n                }\n            }\n        }\n        else {\n            return true;\n        }\n    }\n\n    onItemTouchEnd() {\n        if (this.disabled) {\n            return;\n        }\n\n        this.itemTouched = true;\n    }\n\n    private sortByIndexInList(items: any[], list: any) {\n        return items.sort((item1, item2) =>\n            ObjectUtils.findIndexInList(item1, list) - ObjectUtils.findIndexInList(item2, list));\n    }\n\n    moveUp(listElement, list, selectedItems, callback, listType) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = 0; i < selectedItems.length; i++) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = ObjectUtils.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != 0) {\n                    let movedItem = list[selectedItemIndex];\n                    let temp = list[selectedItemIndex-1];\n                    list[selectedItemIndex-1] = movedItem;\n                    list[selectedItemIndex] = temp;\n                }\n                else {\n                    break;\n                }\n            }\n\n            if (this.dragdrop && ((this.filterValueSource && listType === this.SOURCE_LIST) || (this.filterValueTarget && listType === this.TARGET_LIST)))\n                this.filter(list, listType);\n\n            this.movedUp = true;\n            this.reorderedListElement = listElement;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveTop(listElement, list, selectedItems, callback, listType) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = 0; i < selectedItems.length; i++) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = ObjectUtils.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != 0) {\n                    let movedItem = list.splice(selectedItemIndex,1)[0];\n                    list.unshift(movedItem);\n                }\n                else {\n                    break;\n                }\n            }\n\n            if (this.dragdrop && ((this.filterValueSource && listType === this.SOURCE_LIST) || (this.filterValueTarget && listType === this.TARGET_LIST)))\n                this.filter(list, listType);\n\n            listElement.scrollTop = 0;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveDown(listElement, list, selectedItems, callback, listType) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = selectedItems.length - 1; i >= 0; i--) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = ObjectUtils.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != (list.length - 1)) {\n                    let movedItem = list[selectedItemIndex];\n                    let temp = list[selectedItemIndex+1];\n                    list[selectedItemIndex+1] = movedItem;\n                    list[selectedItemIndex] = temp;\n                }\n                else {\n                    break;\n                }\n            }\n\n            if (this.dragdrop && ((this.filterValueSource && listType === this.SOURCE_LIST) || (this.filterValueTarget && listType === this.TARGET_LIST)))\n                this.filter(list, listType);\n\n            this.movedDown = true;\n            this.reorderedListElement = listElement;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveBottom(listElement, list, selectedItems, callback, listType) {\n        if (selectedItems && selectedItems.length) {\n            selectedItems = this.sortByIndexInList(selectedItems, list);\n            for(let i = selectedItems.length - 1; i >= 0; i--) {\n                let selectedItem = selectedItems[i];\n                let selectedItemIndex: number = ObjectUtils.findIndexInList(selectedItem, list);\n\n                if (selectedItemIndex != (list.length - 1)) {\n                    let movedItem = list.splice(selectedItemIndex,1)[0];\n                    list.push(movedItem);\n                }\n                else {\n                    break;\n                }\n            }\n\n            if (this.dragdrop && ((this.filterValueSource && listType === this.SOURCE_LIST) || (this.filterValueTarget && listType === this.TARGET_LIST)))\n                this.filter(list, listType);\n\n            listElement.scrollTop = listElement.scrollHeight;\n            callback.emit({items: selectedItems});\n        }\n    }\n\n    moveRight() {\n        if (this.selectedItemsSource && this.selectedItemsSource.length) {\n            for(let i = 0; i < this.selectedItemsSource.length; i++) {\n                let selectedItem = this.selectedItemsSource[i];\n                if (ObjectUtils.findIndexInList(selectedItem, this.target) == -1) {\n                    this.target.push(this.source.splice(ObjectUtils.findIndexInList(selectedItem, this.source),1)[0]);\n                }\n            }\n            this.onMoveToTarget.emit({\n                items: this.selectedItemsSource\n            });\n            this.selectedItemsSource = [];\n\n            if (this.filterValueTarget) {\n                this.filter(this.target, this.TARGET_LIST);\n            }\n        }\n    }\n\n    moveAllRight() {\n        if (this.source) {\n            let movedItems = [];\n\n            for(let i = 0; i < this.source.length; i++) {\n                if (this.isItemVisible(this.source[i], this.SOURCE_LIST)) {\n                    let removedItem = this.source.splice(i, 1)[0];\n                    this.target.push(removedItem);\n                    movedItems.push(removedItem);\n                    i--;\n                }\n            }\n\n            this.onMoveAllToTarget.emit({\n                items: movedItems\n            });\n\n            this.selectedItemsSource = [];\n\n            if (this.filterValueTarget) {\n                this.filter(this.target, this.TARGET_LIST);\n            }\n        }\n    }\n\n    moveLeft() {\n        if (this.selectedItemsTarget && this.selectedItemsTarget.length) {\n            for(let i = 0; i < this.selectedItemsTarget.length; i++) {\n                let selectedItem = this.selectedItemsTarget[i];\n                if (ObjectUtils.findIndexInList(selectedItem, this.source) == -1) {\n                    this.source.push(this.target.splice(ObjectUtils.findIndexInList(selectedItem, this.target),1)[0]);\n                }\n            }\n            this.onMoveToSource.emit({\n                items: this.selectedItemsTarget\n            });\n\n            this.selectedItemsTarget = [];\n\n            if (this.filterValueSource) {\n                this.filter(this.source, this.SOURCE_LIST);\n            }\n        }\n    }\n\n    moveAllLeft() {\n        if (this.target) {\n            let movedItems = [];\n\n            for(let i = 0; i < this.target.length; i++) {\n                if (this.isItemVisible(this.target[i], this.TARGET_LIST)) {\n                    let removedItem = this.target.splice(i, 1)[0];\n                    this.source.push(removedItem);\n                    movedItems.push(removedItem);\n                    i--;\n                }\n            }\n\n            this.onMoveAllToSource.emit({\n                items: movedItems\n            });\n\n            this.selectedItemsTarget = [];\n\n            if (this.filterValueSource) {\n                this.filter(this.source, this.SOURCE_LIST);\n            }\n        }\n    }\n\n    isSelected(item: any, selectedItems: any[]) {\n        return this.findIndexInSelection(item, selectedItems) != -1;\n    }\n\n    findIndexInSelection(item: any, selectedItems: any[]): number {\n        return ObjectUtils.findIndexInList(item, selectedItems);\n    }\n\n    onDrop(event: CdkDragDrop<string[]>, listType: number) {\n        let isTransfer = event.previousContainer !== event.container;\n        let dropIndexes = this.getDropIndexes(event.previousIndex, event.currentIndex, listType, isTransfer, event.item.data);\n        \n        if (listType === this.SOURCE_LIST) {\n            if (isTransfer) {\n                transferArrayItem(event.previousContainer.data, event.container.data, dropIndexes.previousIndex, dropIndexes.currentIndex);\n                \n                if (this.visibleOptionsTarget)\n                    this.visibleOptionsTarget.splice(event.previousIndex, 1);\n                \n                this.onMoveToSource.emit({items: event.item.data});\n            }\n            else {\n                moveItemInArray(event.container.data, dropIndexes.previousIndex, dropIndexes.currentIndex);\n                this.onSourceReorder.emit({items: event.item.data});\n            }\n\n            if (this.filterValueSource) {\n                this.filter(this.source, this.SOURCE_LIST);\n            }\n        }\n        else {\n            if (isTransfer) {\n                transferArrayItem(event.previousContainer.data, event.container.data, dropIndexes.previousIndex, dropIndexes.currentIndex);\n                \n                if (this.visibleOptionsSource)\n                    this.visibleOptionsSource.splice(event.previousIndex, 1);\n                \n                this.onMoveToTarget.emit({items: event.item.data});\n            }\n            else {\n                moveItemInArray(event.container.data, dropIndexes.previousIndex, dropIndexes.currentIndex);\n                this.onTargetReorder.emit({items: event.item.data});\n            }\n\n            if (this.filterValueTarget) {\n                this.filter(this.target, this.TARGET_LIST);\n            }\n        }\n    }\n\n    getDropIndexes(fromIndex, toIndex, droppedList, isTransfer, data) {\n        let previousIndex, currentIndex;\n\n        if (droppedList === this.SOURCE_LIST) {\n            previousIndex = isTransfer ? this.filterValueTarget ? ObjectUtils.findIndexInList(data, this.target) : fromIndex : this.filterValueSource ? ObjectUtils.findIndexInList(data, this.source) : fromIndex;\n            currentIndex = this.filterValueSource ? this.findFilteredCurrentIndex(this.visibleOptionsSource, toIndex, this.source) : toIndex;\n        }\n        else {\n            previousIndex = isTransfer ? this.filterValueSource ? ObjectUtils.findIndexInList(data, this.source) : fromIndex : this.filterValueTarget ? ObjectUtils.findIndexInList(data, this.target) : fromIndex;\n            currentIndex = this.filterValueTarget ? this.findFilteredCurrentIndex(this.visibleOptionsTarget, toIndex, this.target) : toIndex;\n        }\n\n        return {previousIndex, currentIndex};\n    }\n\n    findFilteredCurrentIndex(visibleOptions, index, options) {\n        if (visibleOptions.length === index) {\n            let toIndex = ObjectUtils.findIndexInList(visibleOptions[index-1], options);\n            \n            return toIndex + 1;\n        }\n        else {\n            return ObjectUtils.findIndexInList(visibleOptions[index], options);\n        }\n    }\n\n    resetFilter() {\n        this.visibleOptionsSource = null;\n        this.filterValueSource = null;\n        this.visibleOptionsTarget = null;\n        this.filterValueTarget = null;\n\n        (<HTMLInputElement> this.sourceFilterViewChild.nativeElement).value = '';\n        (<HTMLInputElement> this.targetFilterViewChild.nativeElement).value = '';\n    }\n\n    onItemKeydown(event: KeyboardEvent, item: any, selectedItems: any[], callback: EventEmitter<any>) {\n        let listItem = <HTMLLIElement> event.currentTarget;\n\n        switch(event.which) {\n            //down\n            case 40:\n                var nextItem = this.findNextItem(listItem);\n                if (nextItem) {\n                    nextItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //up\n            case 38:\n                var prevItem = this.findPrevItem(listItem);\n                if (prevItem) {\n                    prevItem.focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            //enter\n            case 13:\n                this.onItemClick(event, item, selectedItems, callback);\n                event.preventDefault();\n            break;\n        }\n    }\n\n    findNextItem(item) {\n        let nextItem = item.nextElementSibling;\n\n        if (nextItem)\n            return !DomHandler.hasClass(nextItem, 'p-picklist-item') || DomHandler.isHidden(nextItem) ? this.findNextItem(nextItem) : nextItem;\n        else\n            return null;\n    }\n\n    findPrevItem(item) {\n        let prevItem = item.previousElementSibling;\n\n        if (prevItem)\n            return !DomHandler.hasClass(prevItem, 'p-picklist-item') || DomHandler.isHidden(prevItem) ? this.findPrevItem(prevItem) : prevItem;\n        else\n            return null;\n    }\n\n    createStyle() {\n        if (!this.styleElement) {\n            this.el.nativeElement.children[0].setAttribute(this.id, '');\n            this.styleElement = document.createElement('style');\n            this.styleElement.type = 'text/css';\n            document.head.appendChild(this.styleElement);\n\n            let innerHTML = `\n            @media screen and (max-width: ${this.breakpoint}) {\n                .p-picklist[${this.id}] {\n                    flex-direction: column;\n                }\n            \n                .p-picklist[${this.id}] .p-picklist-buttons {\n                    padding: var(--content-padding);\n                    flex-direction: row;\n                }\n            \n                .p-picklist[${this.id}] .p-picklist-buttons .p-button {\n                    margin-right: var(--inline-spacing);\n                    margin-bottom: 0;\n                }\n            \n                .p-picklist[${this.id}] .p-picklist-buttons .p-button:last-child {\n                    margin-right: 0;\n                }\n            \n                .p-picklist[${this.id}] .pi-angle-right:before {\n                    content: \"\\\\e930\"\n                }\n            \n                .p-picklist[${this.id}] .pi-angle-double-right:before {\n                    content: \"\\\\e92c\"\n                }\n            \n                .p-picklist[${this.id}] .pi-angle-left:before {\n                    content: \"\\\\e933\"\n                }\n            \n                .p-picklist[${this.id}] .pi-angle-double-left:before {\n                    content: \"\\\\e92f\"\n                }\n            }\n            `;\n            \n            this.styleElement.innerHTML = innerHTML;\n        }\n    }\n\n    destroyStyle() {\n        if (this.styleElement) {\n            document.head.removeChild(this.styleElement);\n            this.styleElement = null;``\n        }\n    }\n\n    ngOnDestroy() {\n        this.destroyStyle();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,ButtonModule,SharedModule,RippleModule,DragDropModule],\n    exports: [PickList,SharedModule,DragDropModule],\n    declarations: [PickList]\n})\nexport class PickListModule { }\n"]}