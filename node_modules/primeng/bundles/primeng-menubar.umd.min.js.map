{"version":3,"sources":["../../src/app/components/menubar/menubar.ts"],"names":["MenubarSub","el","renderer","cd","this","autoZIndex","baseZIndex","leafClick","EventEmitter","menuHoverActive","Object","defineProperty","prototype","_parentActive","value","root","activeItem","onItemClick","event","item","disabled","preventDefault","url","routerLink","command","originalEvent","items","unbindDocumentClickListener","bindDocumentClickListener","onLeafClick","onItemMouseEnter","mobileActive","autoDisplay","emit","_this","documentClickListener","nativeElement","contains","target","markForCheck","document","addEventListener","removeEventListener","ngOnDestroy","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","Input","Output","Menubar","ngAfterContentInit","templates","forEach","getType","startTemplate","endTemplate","toggle","DomHandler","findSingle","style","zIndex","String","generateZIndex","bindOutsideClickListener","outsideClickListener","rootmenu","menubutton","unbindOutsideClickListener","changeDetection","ChangeDetectionStrategy","OnPush","ContentChildren","PrimeTemplate","ViewChild","NgModule","imports","CommonModule","RouterModule","RippleModule","exports","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, Input, Renderer2, OnDestroy,ChangeDetectorRef, ChangeDetectionStrategy, ViewEncapsulation, AfterContentInit, ContentChildren, QueryList, TemplateRef, ViewChild, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DomHandler } from 'primeng/dom';\nimport { MenuItem, PrimeTemplate } from 'primeng/api';\nimport { RouterModule } from '@angular/router';\nimport { RippleModule } from 'primeng/ripple';  \n\n@Component({\n    selector: 'p-menubarSub',\n    template: `\n        <ul [ngClass]=\"{'p-submenu-list': !root, 'p-menubar-root-list': root}\" [attr.role]=\"root ? 'menubar' : 'menu'\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" [ngClass]=\"{'p-hidden': child.visible === false}\" role=\"separator\">\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'p-menuitem':true, 'p-menuitem-active': child === activeItem, 'p-hidden': child.visible === false}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\" role=\"none\">\n                    <a *ngIf=\"!child.routerLink\" [attr.href]=\"child.url\" [attr.data-automationid]=\"child.automationId\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" role=\"menuitem\"\n                        (click)=\"onItemClick($event, child)\" (mouseenter)=\"onItemMouseEnter($event,child)\" \n                         [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\" [attr.tabindex]=\"child.disabled ? null : '0'\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlLabel\">{{child.label}}</span>\n                        <ng-template #htmlLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                        <span class=\"p-submenu-icon pi\" *ngIf=\"child.items\" [ngClass]=\"{'pi-angle-down':root,'pi-angle-right':!root}\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" [routerLink]=\"child.routerLink\" [attr.data-automationid]=\"child.automationId\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\"\n                        [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" role=\"menuitem\"\n                        (click)=\"onItemClick($event, child)\" (mouseenter)=\"onItemMouseEnter($event,child)\" \n                        [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\"\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlRouteLabel\">{{child.label}}</span>\n                        <ng-template #htmlRouteLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                        <span class=\"p-submenu-icon pi\" *ngIf=\"child.items\" [ngClass]=\"{'pi-angle-down':root,'pi-angle-right':!root}\"></span>\n                    </a>\n                    <p-menubarSub [parentActive]=\"child === activeItem\" [item]=\"child\" *ngIf=\"child.items\" [mobileActive]=\"mobileActive\" [autoDisplay]=\"autoDisplay\" (leafClick)=\"onLeafClick()\"></p-menubarSub>\n                </li>\n            </ng-template>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class MenubarSub implements OnDestroy {\n\n    @Input() item: MenuItem;\n\n    @Input() root: boolean;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() mobileActive: boolean;\n\n    @Input() autoDisplay: boolean;\n\n    @Input() get parentActive():boolean \n    {\n        return this._parentActive;\n    }\n    set parentActive(value) {\n        if (!this.root) {\n            this._parentActive = value;\n\n            if (!value)\n                this.activeItem = null;\n        }\n    }\n\n    @Output() leafClick: EventEmitter<any> = new EventEmitter();\n\n    _parentActive: boolean;\n\n    documentClickListener: any;\n\n    menuHoverActive: boolean = false;\n\n    activeItem: any;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) { }\n\n    onItemClick(event, item) {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n\n        if (!item.url && !item.routerLink) {\n            event.preventDefault();\n        }\n\n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n        \n        if (item.items) {\n            if (this.activeItem && item === this.activeItem) {\n                this.activeItem = null;\n                this.unbindDocumentClickListener();\n            }\n            else {\n                this.activeItem = item;\n                if (this.root) {\n                    this.bindDocumentClickListener();\n                }\n            }\n        }\n\n        if (!item.items) {\n            this.onLeafClick();\n        }\n    }\n\n    onItemMouseEnter(event, item) {\n        if (item.disabled || this.mobileActive) {\n            event.preventDefault();\n            return;\n        }\n\n        if (this.root) {\n            if (this.activeItem || this.autoDisplay) {\n                this.activeItem = item;\n                this.bindDocumentClickListener();\n            }\n        }\n        else {\n            this.activeItem = item;\n            this.bindDocumentClickListener();\n        }\n    }\n\n    onLeafClick() {\n        this.activeItem = null;\n        if (this.root) {\n            this.unbindDocumentClickListener();\n        }\n\n        this.leafClick.emit();\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = (event) => {\n                if (this.el && !this.el.nativeElement.contains(event.target)) {\n                    this.activeItem = null;\n                    this.cd.markForCheck();\n                    this.unbindDocumentClickListener();\n                }\n            };\n\n            document.addEventListener('click', this.documentClickListener);\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            document.removeEventListener('click', this.documentClickListener);\n            this.documentClickListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentClickListener();\n    }\n}\n\n@Component({\n    selector: 'p-menubar',\n    template: `\n        <div [ngClass]=\"{'p-menubar p-component':true, 'p-menubar-mobile-active': mobileActive}\" [class]=\"styleClass\" [ngStyle]=\"style\">\n            <div class=\"p-menubar-start\" *ngIf=\"startTemplate\">\n                <ng-container *ngTemplateOutlet=\"startTemplate\"></ng-container>\n            </div>\n            <a #menubutton tabindex=\"0\" class=\"p-menubar-button\" (click)=\"toggle($event)\">\n                <i class=\"pi pi-bars\"></i>\n            </a>\n            <p-menubarSub #rootmenu [item]=\"model\" root=\"root\" [baseZIndex]=\"baseZIndex\" (leafClick)=\"onLeafClick()\" [autoZIndex]=\"autoZIndex\" [mobileActive]=\"mobileActive\" [autoDisplay]=\"autoDisplay\"></p-menubarSub>\n            <div class=\"p-menubar-end\" *ngIf=\"endTemplate; else legacy\">\n                <ng-container *ngTemplateOutlet=\"endTemplate\"></ng-container>\n            </div>\n            <ng-template #legacy>\n                <div class=\"p-menubar-end\">\n                    <ng-content></ng-content>\n                </div>\n            </ng-template>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./menubar.css']\n})\nexport class Menubar implements AfterContentInit, OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() autoDisplay: boolean;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    @ViewChild('menubutton') menubutton: ElementRef;\n\n    @ViewChild('rootmenu') rootmenu: MenubarSub;\n\n    startTemplate: TemplateRef<any>;\n\n    endTemplate: TemplateRef<any>;\n\n    mobileActive: boolean;\n\n    outsideClickListener: any;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) { }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'start':\n                    this.startTemplate = item.template;\n                break;\n\n                case 'end':\n                    this.endTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    toggle(event) {\n        this.mobileActive = !this.mobileActive;\n        let rootmenu = DomHandler.findSingle(this.el.nativeElement,\".p-menubar-root-list\")\n        rootmenu.style.zIndex = String(DomHandler.generateZIndex());\n        this.bindOutsideClickListener();\n        event.preventDefault();\n    }\n\n    bindOutsideClickListener() {\n        if (!this.outsideClickListener) {\n            this.outsideClickListener = (event) => {\n                if (this.mobileActive && this.rootmenu.el.nativeElement !== event.target && !this.rootmenu.el.nativeElement.contains(event.target)\n                    && this.menubutton.nativeElement !== event.target && !this.menubutton.nativeElement.contains(event.target)) {\n                    this.mobileActive = false;\n                    this.cd.markForCheck();\n                }\n            };\n            document.addEventListener('click', this.outsideClickListener);\n        }\n    }\n\n    onLeafClick() {\n        this.mobileActive = false;\n        this.unbindOutsideClickListener();\n    }\n\n    unbindOutsideClickListener() {\n        if (this.outsideClickListener) {\n            document.removeEventListener('click', this.outsideClickListener);\n            this.outsideClickListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindOutsideClickListener();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule,RippleModule],\n    exports: [Menubar,RouterModule],\n    declarations: [Menubar,MenubarSub]\n})\nexport class MenubarModule { }\n"]}