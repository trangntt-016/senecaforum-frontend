{"version":3,"sources":["../../src/app/components/accordion/accordion.ts"],"names":["idx","AccordionTab","accordion","changeDetector","this","cache","selectedChange","EventEmitter","transitionOptions","id","Object","defineProperty","prototype","_selected","val","loaded","detectChanges","ngAfterContentInit","_this","templates","forEach","item","getType","contentTemplate","template","headerTemplate","toggle","event","disabled","index","findTabIndex","selected","onClose","emit","originalEvent","multiple","i","tabs","length","markForCheck","onOpen","updateActiveIndex","preventDefault","headerFacet","onKeydown","which","ngOnDestroy","splice","Component","args","selector","animations","trigger","state","style","height","overflow","transition","animate","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","Inject","forwardRef","Accordion","ChangeDetectorRef","Input","Output","ContentChildren","Header","PrimeTemplate","el","expandIcon","collapseIcon","activeIndexChange","initTabs","tabListSubscription","tabList","changes","subscribe","_","toArray","updateSelectionState","getBlockableElement","nativeElement","children","_activeIndex","preventActiveIndexPropagation","includes","tab","push","unsubscribe","ElementRef","NgModule","imports","CommonModule","exports","SharedModule","declarations"],"mappings":"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","sourcesContent":["import { NgModule, Component, ElementRef, AfterContentInit, OnDestroy, Input, Output, EventEmitter, \n    ContentChildren, QueryList, ChangeDetectorRef, Inject, forwardRef, TemplateRef, ViewRef, ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { CommonModule } from '@angular/common';\nimport { SharedModule, Header, PrimeTemplate, BlockableUI } from 'primeng/api';\nimport { Subscription } from 'rxjs';\n\nlet idx: number = 0;\n\n@Component({\n    selector: 'p-accordionTab',\n    template: `\n        <div class=\"p-accordion-tab\" [ngClass]=\"{'p-accordion-tab-active': selected}\">\n            <div class=\"p-accordion-header\" [ngClass]=\"{'p-highlight': selected, 'p-disabled': disabled}\">\n                <a role=\"tab\" class=\"p-accordion-header-link\" (click)=\"toggle($event)\" (keydown)=\"onKeydown($event)\" [attr.tabindex]=\"disabled ? null : 0\"\n                    [attr.id]=\"id\" [attr.aria-controls]=\"id + '-content'\" [attr.aria-expanded]=\"selected\">\n                    <span class=\"p-accordion-toggle-icon\" [ngClass]=\"selected ? accordion.collapseIcon : accordion.expandIcon\"></span>\n                    <span class=\"p-accordion-header-text\" *ngIf=\"!hasHeaderFacet\">\n                        {{header}}\n                    </span>\n                    <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                    <ng-content select=\"p-header\" *ngIf=\"hasHeaderFacet\"></ng-content>\n                </a>\n            </div>\n            <div [attr.id]=\"id + '-content'\" class=\"p-toggleable-content\" [@tabContent]=\"selected ? {value: 'visible', params: {transitionParams: transitionOptions}} : {value: 'hidden', params: {transitionParams: transitionOptions}}\"\n                role=\"region\" [attr.aria-hidden]=\"!selected\" [attr.aria-labelledby]=\"id\">\n                <div class=\"p-accordion-content\">\n                    <ng-content></ng-content>\n                    <ng-container *ngIf=\"contentTemplate && (cache ? loaded : selected)\">\n                        <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                    </ng-container>\n                </div>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('tabContent', [\n            state('hidden', style({\n                height: '0',\n                overflow: 'hidden'\n            })),\n            state('visible', style({\n                height: '*'\n            })),\n            transition('visible <=> hidden', [style({overflow: 'hidden'}), animate('{{transitionParams}}')]),\n            transition('void => *', animate(0))\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./accordion.css']\n})\nexport class AccordionTab implements AfterContentInit,OnDestroy {\n\n    @Input() header: string;\n\n    @Input() disabled: boolean;\n\n    @Input() cache: boolean = true;\n\n    @Output() selectedChange: EventEmitter<any> = new EventEmitter();\n\n    @Input() transitionOptions: string = '400ms cubic-bezier(0.86, 0, 0.07, 1)';\n\n    @ContentChildren(Header) headerFacet: QueryList<Header>;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    private _selected: boolean;\n\n    @Input() get selected(): any {\n        return this._selected;\n    }\n\n    set selected(val: any) {\n        this._selected = val;\n        \n        if (!this.loaded) {\n            if (this._selected && this.cache) {\n                this.loaded = true;\n            }\n\n            this.changeDetector.detectChanges();\n        }\n    }\n\n    contentTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    id: string = `p-accordiontab-${idx++}`;\n\n    loaded: boolean;\n\n    accordion: Accordion;\n\n    constructor(@Inject(forwardRef(() => Accordion)) accordion, public changeDetector: ChangeDetectorRef) {\n        this.accordion = accordion as Accordion;\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n                \n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    toggle(event) {\n        if (this.disabled) {\n            return false;\n        }\n\n        let index = this.findTabIndex();\n\n        if (this.selected) {\n            this.selected = false;\n            this.accordion.onClose.emit({ originalEvent: event, index: index });\n        }\n        else {\n            if (!this.accordion.multiple) {\n                for (var i = 0; i < this.accordion.tabs.length; i++) {\n                    this.accordion.tabs[i].selected = false;\n                    this.accordion.tabs[i].selectedChange.emit(false);\n                    this.accordion.tabs[i].changeDetector.markForCheck();\n                }\n            }\n\n            this.selected = true;\n            this.loaded = true;\n            this.accordion.onOpen.emit({ originalEvent: event, index: index });\n        }\n\n        this.selectedChange.emit(this.selected);\n        this.accordion.updateActiveIndex();\n        this.changeDetector.markForCheck();\n\n        event.preventDefault();\n    }\n\n    findTabIndex() {\n        let index = -1;\n        for (var i = 0; i < this.accordion.tabs.length; i++) {\n            if (this.accordion.tabs[i] == this) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n\n    get hasHeaderFacet(): boolean {\n        return this.headerFacet && this.headerFacet.length > 0;\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (event.which === 32 || event.which === 13) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n\n    ngOnDestroy() {\n        this.accordion.tabs.splice(this.findTabIndex(), 1);\n    }\n}\n\n@Component({\n    selector: 'p-accordion',\n    template: `\n        <div [ngClass]=\"'p-accordion p-component'\" [ngStyle]=\"style\" [class]=\"styleClass\" role=\"tablist\">\n            <ng-content></ng-content>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class Accordion implements BlockableUI, AfterContentInit, OnDestroy {\n    \n    @Input() multiple: boolean;\n    \n    @Output() onClose: EventEmitter<any> = new EventEmitter();\n\n    @Output() onOpen: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n    \n    @Input() styleClass: string;\n\n    @Input() expandIcon: string = 'pi pi-fw pi-chevron-right';\n\n    @Input() collapseIcon: string = 'pi pi-fw pi-chevron-down';\n\n    @Output() activeIndexChange: EventEmitter<any> = new EventEmitter();\n    \n    @ContentChildren(AccordionTab) tabList: QueryList<AccordionTab>;\n\n    tabListSubscription: Subscription;\n    \n    private _activeIndex: any;\n\n    preventActiveIndexPropagation: boolean;\n    \n    public tabs: AccordionTab[] = [];\n\n    constructor(public el: ElementRef, public changeDetector: ChangeDetectorRef) {}\n\n    ngAfterContentInit() {\n        this.initTabs();\n\n        this.tabListSubscription = this.tabList.changes.subscribe(_ => {\n            this.initTabs();\n        });\n    }\n\n    initTabs(): any {\n        this.tabs = this.tabList.toArray();\n        this.updateSelectionState();\n        this.changeDetector.markForCheck();\n    }\n      \n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    } \n    \n    @Input() get activeIndex(): any {\n        return this._activeIndex;\n    }\n\n    set activeIndex(val: any) {\n        this._activeIndex = val;\n        if (this.preventActiveIndexPropagation) {\n            this.preventActiveIndexPropagation = false;\n            return;\n        }\n\n        this.updateSelectionState();\n    }\n\n    updateSelectionState() {\n        if (this.tabs && this.tabs.length && this._activeIndex != null) {\n            for (let i = 0; i < this.tabs.length; i++) {\n                let selected = this.multiple ? this._activeIndex.includes(i) : (i === this._activeIndex);\n                let changed = selected !== this.tabs[i].selected;\n\n                if (changed) {\n                    this.tabs[i].selected = selected;\n                    this.tabs[i].selectedChange.emit(selected);\n                    this.tabs[i].changeDetector.markForCheck();\n                }\n            }\n        }\n    }\n\n    updateActiveIndex() {\n        let index: any = this.multiple ? [] : null;\n        this.tabs.forEach((tab, i) => {\n            if (tab.selected) {\n                if (this.multiple) {\n                    index.push(i);\n                }\n                else {\n                    index = i;\n                    return;\n                }\n            }\n        });\n\n        this.preventActiveIndexPropagation = true;\n        this.activeIndexChange.emit(index);\n    }\n\n    ngOnDestroy() {\n        if (this.tabListSubscription) {\n            this.tabListSubscription.unsubscribe();\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Accordion,AccordionTab,SharedModule],\n    declarations: [Accordion,AccordionTab]\n})\nexport class AccordionModule { }\n"]}