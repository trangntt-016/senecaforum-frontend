{"version":3,"sources":["../../src/app/components/captcha/captcha.ts"],"names":["Captcha","el","_zone","cd","this","siteKey","theme","type","size","tabindex","initCallback","onResponse","EventEmitter","onExpire","_instance","_language","Object","defineProperty","prototype","language","init","ngAfterViewInit","_this","window","grecaptcha","render","setTimeout","nativeElement","children","sitekey","hl","callback","response","run","recaptchaCallback","expired-callback","recaptchaExpiredCallback","reset","markForCheck","getResponse","emit","ngOnDestroy","Component","args","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","NgZone","ChangeDetectorRef","Input","Output","NgModule","imports","CommonModule","exports","declarations"],"mappings":"oaAyCI,SAAAA,EAAmBC,EAAuBC,EAAsBC,GAA7CC,KAAAH,GAAAA,EAAuBG,KAAAF,MAAAA,EAAsBE,KAAAD,GAAAA,EA9BvDC,KAAAC,QAAkB,KAElBD,KAAAE,MAAQ,QAERF,KAAAG,KAAO,QAEPH,KAAAI,KAAO,SAEPJ,KAAAK,SAAW,EAEXL,KAAAM,aAAe,gBAEdN,KAAAO,WAAgC,IAAIC,EAAAA,aAEpCR,KAAAS,SAA8B,IAAID,EAAAA,aAEpCR,KAAAU,UAAiB,KAEjBV,KAAAW,UAAiB,YAGzBC,OAAAC,eAAajB,EAAAkB,UAAA,WAAQ,KAArB,WACI,OAAOd,KAAKW,eAGhB,SAAaI,GACTf,KAAKW,UAAYI,EACjBf,KAAKgB,wCAKTpB,EAAAkB,UAAAG,gBAAA,WAAA,IAAAC,EAAAlB,KACcmB,OAAQC,WACHD,OAAQC,WAAWC,OAM1BrB,KAAKgB,OALLM,YAAW,WACPJ,EAAKF,SACP,KAOAG,OAAQnB,KAAKM,cAAgB,WACjCY,EAAKF,SAKfpB,EAAAkB,UAAAE,KAAA,WAAA,IAAAE,EAAAlB,KACIA,KAAKU,UAAkBS,OAAQC,WAAWC,OAAOrB,KAAKH,GAAG0B,cAAcC,SAAS,GAAI,CAChFC,QAAWzB,KAAKC,QAChBC,MAASF,KAAKE,MACdC,KAAQH,KAAKG,KACbC,KAAQJ,KAAKI,KACbC,SAAYL,KAAKK,SACjBqB,GAAM1B,KAAKe,SACXY,SAAY,SAACC,GAAsBV,EAAKpB,MAAM+B,KAAI,WAAM,OAAAX,EAAKY,kBAAkBF,OAC/EG,mBAAoB,WAAOb,EAAKpB,MAAM+B,KAAI,WAAM,OAAAX,EAAKc,kCAI7DpC,EAAAkB,UAAAmB,MAAA,WAC2B,OAAnBjC,KAAKU,YAGHS,OAAQC,WAAWa,MAAMjC,KAAKU,WACpCV,KAAKD,GAAGmC,iBAGZtC,EAAAkB,UAAAqB,YAAA,WACI,OAAuB,OAAnBnC,KAAKU,UACE,KAEES,OAAQC,WAAWe,YAAYnC,KAAKU,YAGrDd,EAAAkB,UAAAgB,kBAAA,SAAkBF,GACd5B,KAAKO,WAAW6B,KAAK,CACjBR,SAAUA,KAIlBhC,EAAAkB,UAAAkB,yBAAA,WACIhC,KAAKS,SAAS2B,QAGlBxC,EAAAkB,UAAAuB,YAAA,WAC0B,MAAlBrC,KAAKU,WACDS,OAAQC,WAAWa,MAAMjC,KAAKU,qCAlG7C4B,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,YACVC,SAAU,cACVC,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,kDAP+CC,EAAAA,kBAAxBC,EAAAA,cAA+EC,EAAAA,sDAWtIC,EAAAA,qBAEAA,EAAAA,oBAEAA,EAAAA,oBAEAA,EAAAA,wBAEAA,EAAAA,4BAEAA,EAAAA,0BAEAC,EAAAA,yBAEAA,EAAAA,yBAOAD,EAAAA,eA+EL,iCALCE,EAAAA,SAAQd,KAAA,CAAC,CACNe,QAAS,CAACC,EAAAA,cACVC,QAAS,CAAC5D,GACV6D,aAAc,CAAC7D","sourcesContent":["import {NgModule,AfterViewInit,Component,EventEmitter,Input,NgZone,OnDestroy,Output,ElementRef,ChangeDetectionStrategy, ViewEncapsulation, ChangeDetectorRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\n@Component({\n    selector: 'p-captcha',\n    template: `<div></div>`,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class Captcha implements AfterViewInit,OnDestroy {\n\n    @Input() siteKey: string = null;\n        \n    @Input() theme = 'light';\n    \n    @Input() type = 'image';\n    \n    @Input() size = 'normal';\n    \n    @Input() tabindex = 0;\n     \n    @Input() initCallback = \"initRecaptcha\";\n    \n    @Output() onResponse: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onExpire: EventEmitter<any> = new EventEmitter();\n    \n    private _instance: any = null;\n\n    private _language: any = null;\n\n\n    @Input() get language(): string {\n        return this._language;\n    }\n\n    set language(language: string) {\n        this._language = language;\n        this.init();\n    }\n\n    constructor(public el: ElementRef, public _zone: NgZone, public cd: ChangeDetectorRef) {}\n    \n    ngAfterViewInit() {\n        if ((<any>window).grecaptcha) {\n            if (!(<any>window).grecaptcha.render){\n                setTimeout(() =>{\n                    this.init();\n                },100)\n            }\n            else {\n                this.init();\n            }\n        }\n        else {\n            (<any>window)[this.initCallback] = () => {\n              this.init();\n            }\n        } \n    }\n    \n    init()Â {\n        this._instance = (<any>window).grecaptcha.render(this.el.nativeElement.children[0], {\n            'sitekey': this.siteKey,\n            'theme': this.theme,\n            'type': this.type,\n            'size': this.size,\n            'tabindex': this.tabindex,\n            'hl': this.language,\n            'callback': (response: string) => {this._zone.run(() => this.recaptchaCallback(response))},\n            'expired-callback': () => {this._zone.run(() => this.recaptchaExpiredCallback())}\n        });\n    }\n    \n    reset() {\n        if (this._instance === null)\n            return;\n        \n        (<any>window).grecaptcha.reset(this._instance);\n        this.cd.markForCheck();\n    }\n    \n    getResponse(): String {\n        if (this._instance === null)\n            return null;\n        \n        return (<any>window).grecaptcha.getResponse(this._instance);\n    }\n    \n    recaptchaCallback(response: string) {\n        this.onResponse.emit({\n            response: response\n        });\n    }\n\n    recaptchaExpiredCallback() {\n        this.onExpire.emit();\n    }\n    \n    ngOnDestroy() {\n        if (this._instance != null) {\n          (<any>window).grecaptcha.reset(this._instance);\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [Captcha],\n    declarations: [Captcha]\n})\nexport class CaptchaModule { }\n"]}