{"version":3,"sources":["../../src/app/components/dataview/dataview.ts"],"names":["DataView","el","cd","filterService","this","pageLinks","paginatorPosition","alwaysShowPaginator","paginatorDropdownScrollHeight","currentPageReportTemplate","showFirstLastIcon","showPageLinks","emptyMessage","onLazyLoad","EventEmitter","trackBy","index","item","loadingIcon","first","onPage","onSort","onChangeLayout","_layout","Object","defineProperty","prototype","layout","initialized","changeLayout","ngOnInit","lazy","emit","createLazyLoadMetadata","ngOnChanges","simpleChanges","value","_value","currentValue","updateTotalRecords","hasFilter","filter","filterValue","sortField","sortOrder","sort","ngAfterContentInit","_this","templates","forEach","getType","listItemTemplate","template","gridItemTemplate","paginatorLeftTemplate","paginatorRightTemplate","paginatorDropdownItemTemplate","headerTemplate","footerTemplate","updateItemTemplate","itemTemplate","markForCheck","totalRecords","length","paginate","event","rows","data1","data2","value1","ObjectUtils","resolveFieldData","value2","result","localeCompare","isEmpty","data","filteredValue","getBlockableElement","nativeElement","children","filterMatchMode","searchFields","filterBy","split","filterLocale","paginator","trim","Component","args","selector","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","FilterService","Input","Output","ContentChild","Header","Footer","ContentChildren","PrimeTemplate","DataViewLayoutOptions","dv","preventDefault","NgModule","imports","CommonModule","SharedModule","PaginatorModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnInit,AfterContentInit,Input,Output,EventEmitter,ContentChild,ContentChildren,QueryList,TemplateRef,OnChanges,SimpleChanges,ChangeDetectionStrategy,ChangeDetectorRef, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ObjectUtils} from 'primeng/utils';\nimport {Header,Footer,PrimeTemplate,SharedModule,FilterService} from 'primeng/api';\nimport {PaginatorModule} from 'primeng/paginator';\nimport {BlockableUI} from 'primeng/api';\n\n@Component({\n    selector: 'p-dataView',\n    template: `\n        <div [ngClass]=\"{'p-dataview p-component': true, 'p-dataview-list': (layout === 'list'), 'p-dataview-grid': (layout === 'grid')}\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <div class=\"p-dataview-loading\" *ngIf=\"loading\">\n                <div class=\"p-dataview-loading-overlay p-component-overlay\">\n                    <i [class]=\"'p-dataview-loading-icon pi-spin ' + loadingIcon\"></i>\n                </div>\n            </div>\n            <div class=\"p-dataview-header\" *ngIf=\"header || headerTemplate\">\n                <ng-content select=\"p-header\"></ng-content>\n                <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"paginate($event)\" styleClass=\"p-paginator-top\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'top' || paginatorPosition =='both')\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\" [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div class=\"p-dataview-content\">\n                <div class=\"p-grid p-nogutter\">\n                    <ng-template ngFor let-rowData let-rowIndex=\"index\" [ngForOf]=\"paginator ? ((filteredValue||value) | slice:(lazy ? 0 : first):((lazy ? 0 : first) + rows)) : (filteredValue||value)\" [ngForTrackBy]=\"trackBy\">\n                        <ng-container *ngTemplateOutlet=\"itemTemplate; context: {$implicit: rowData, rowIndex: rowIndex}\"></ng-container>\n                    </ng-template>\n                    <div *ngIf=\"isEmpty()\" class=\"p-col\">\n                        <div class=\"p-dataview-emptymessage\">{{emptyMessage}}</div>\n                    </div>\n                </div>\n            </div>\n            <p-paginator [rows]=\"rows\" [first]=\"first\" [totalRecords]=\"totalRecords\" [pageLinkSize]=\"pageLinks\" [alwaysShow]=\"alwaysShowPaginator\"\n                (onPageChange)=\"paginate($event)\" styleClass=\"p-paginator-bottom\" [rowsPerPageOptions]=\"rowsPerPageOptions\" *ngIf=\"paginator && (paginatorPosition === 'bottom' || paginatorPosition =='both')\"\n                [dropdownAppendTo]=\"paginatorDropdownAppendTo\" [dropdownScrollHeight]=\"paginatorDropdownScrollHeight\" [templateLeft]=\"paginatorLeftTemplate\" [templateRight]=\"paginatorRightTemplate\"\n                [currentPageReportTemplate]=\"currentPageReportTemplate\" [showFirstLastIcon]=\"showFirstLastIcon\" [dropdownItemTemplate]=\"paginatorDropdownItemTemplate\" [showCurrentPageReport]=\"showCurrentPageReport\" [showJumpToPageDropdown]=\"showJumpToPageDropdown\" [showPageLinks]=\"showPageLinks\"></p-paginator>\n            <div class=\"p-dataview-footer\" *ngIf=\"footer || footerTemplate\">\n                <ng-content select=\"p-footer\"></ng-content>\n                <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n            </div>\n        </div>\n    `,\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./dataview.css']\n})\nexport class DataView implements OnInit,AfterContentInit,BlockableUI,OnChanges {\n\n    @Input() paginator: boolean;\n\n    @Input() rows: number;\n\n    @Input() totalRecords: number;\n\n    @Input() pageLinks: number = 5;\n\n    @Input() rowsPerPageOptions: any[];\n\n    @Input() paginatorPosition: string = 'bottom';\n\n    @Input() alwaysShowPaginator: boolean = true;\n\n    @Input() paginatorDropdownAppendTo: any;\n\n    @Input() paginatorDropdownScrollHeight: string = '200px';\n\n    @Input() currentPageReportTemplate: string = '{currentPage} of {totalPages}';\n\n    @Input() showCurrentPageReport: boolean;\n\n    @Input() showJumpToPageDropdown: boolean;\n\n    @Input() showFirstLastIcon: boolean = true;\n\n    @Input() showPageLinks: boolean = true;\n\n    @Input() lazy: boolean;\n\n    @Input() emptyMessage: string = 'No records found';\n\n    @Output() onLazyLoad: EventEmitter<any> = new EventEmitter();\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() trackBy: Function = (index: number, item: any) => item;\n\n    @Input() filterBy: string;\n\n    @Input() filterLocale: string;\n\n    @Input() loading: boolean;\n\n    @Input() loadingIcon: string = 'pi pi-spinner';\n\n    @Input() first: number = 0;\n\n    @Input() sortField: string;\n\n    @Input() sortOrder: number;\n\n    @Input() value: any[];\n\n    @Output() onPage: EventEmitter<any> = new EventEmitter();\n\n    @Output() onSort: EventEmitter<any> = new EventEmitter();\n\n    @Output() onChangeLayout: EventEmitter<any> = new EventEmitter();\n\n    @ContentChild(Header) header;\n\n    @ContentChild(Footer) footer;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n\n    _value: any[];\n\n    listItemTemplate: TemplateRef<any>;\n\n    gridItemTemplate: TemplateRef<any>;\n\n    itemTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    paginatorLeftTemplate: TemplateRef<any>;\n\n    paginatorRightTemplate: TemplateRef<any>;\n\n    paginatorDropdownItemTemplate: TemplateRef<any>;\n\n    filteredValue: any[];\n\n    filterValue: string;\n\n    initialized: boolean;\n\n    _layout: string = 'list';\n\n    @Input() get layout(): string {\n        return this._layout;\n    }\n\n    set layout(layout: string) {\n        this._layout = layout;\n\n        if (this.initialized) {\n            this.changeLayout(layout);\n        }\n    }\n\n    constructor(public el: ElementRef, public cd: ChangeDetectorRef, public filterService: FilterService) {}\n\n    ngOnInit() {\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        this.initialized = true;\n    }\n\n    ngOnChanges(simpleChanges: SimpleChanges) {\n        if (simpleChanges.value) {\n            this._value = simpleChanges.value.currentValue;\n            this.updateTotalRecords();\n\n            if (!this.lazy && this.hasFilter()) {\n                this.filter(this.filterValue);\n            }\n        }\n\n        if (simpleChanges.sortField || simpleChanges.sortOrder) {\n            //avoid triggering lazy load prior to lazy initialization at onInit\n            if (!this.lazy || this.initialized) {\n                this.sort();\n            }\n        }\n    }\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'listItem':\n                    this.listItemTemplate = item.template;\n                break;\n\n                case 'gridItem':\n                    this.gridItemTemplate = item.template;\n                break;\n\n                case 'paginatorleft':\n                    this.paginatorLeftTemplate = item.template;\n                break;\n\n                case 'paginatorright':\n                    this.paginatorRightTemplate = item.template;\n                break;\n\n                case 'paginatordropdownitem':\n                    this.paginatorDropdownItemTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n            }\n        });\n\n        this.updateItemTemplate();\n    }\n\n    updateItemTemplate() {\n        switch(this.layout) {\n            case 'list':\n                this.itemTemplate = this.listItemTemplate;\n            break;\n\n            case 'grid':\n                this.itemTemplate = this.gridItemTemplate;\n            break;\n        }\n    }\n\n    changeLayout(layout: string) {\n        this._layout = layout;\n        this.onChangeLayout.emit({\n            layout: this.layout\n        });\n        this.updateItemTemplate();\n\n        this.cd.markForCheck();\n    }\n\n    updateTotalRecords() {\n        this.totalRecords = this.lazy ? this.totalRecords : (this._value ? this._value.length : 0);\n    }\n\n    paginate(event) {\n        this.first = event.first;\n        this.rows = event.rows;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n\n        this.onPage.emit({\n            first: this.first,\n            rows: this.rows\n        });\n    }\n\n    sort() {\n        this.first = 0;\n\n        if (this.lazy) {\n            this.onLazyLoad.emit(this.createLazyLoadMetadata());\n        }\n        else if (this.value) {\n            this.value.sort((data1, data2) => {\n                let value1 = ObjectUtils.resolveFieldData(data1, this.sortField);\n                let value2 = ObjectUtils.resolveFieldData(data2, this.sortField);\n                let result = null;\n\n                if (value1 == null && value2 != null)\n                    result = -1;\n                else if (value1 != null && value2 == null)\n                    result = 1;\n                else if (value1 == null && value2 == null)\n                    result = 0;\n                else if (typeof value1 === 'string' && typeof value2 === 'string')\n                    result = value1.localeCompare(value2);\n                else\n                    result = (value1 < value2) ? -1 : (value1 > value2) ? 1 : 0;\n\n                return (this.sortOrder * result);\n            });\n\n            if (this.hasFilter()) {\n                this.filter(this.filterValue);\n            }\n        }\n\n        this.onSort.emit({\n            sortField: this.sortField,\n            sortOrder: this.sortOrder\n        });\n    }\n\n    isEmpty() {\n        let data = this.filteredValue||this.value;\n        return data == null || data.length == 0;\n    }\n\n    createLazyLoadMetadata(): any {\n        return {\n            first: this.first,\n            rows: this.rows,\n            sortField: this.sortField,\n            sortOrder: this.sortOrder\n        };\n    }\n\n    getBlockableElement(): HTMLElement {\n        return this.el.nativeElement.children[0];\n    }\n\n    filter(filter: string, filterMatchMode:string =\"contains\") {\n        this.filterValue = filter;\n\n        if (this.value && this.value.length) {\n            let searchFields = this.filterBy.split(',');\n            this.filteredValue = this.filterService.filter(this.value, searchFields, filter, filterMatchMode, this.filterLocale);\n\n            if (this.filteredValue.length === this.value.length ) {\n                this.filteredValue = null;\n            }\n\n            if (this.paginator) {\n                this.first = 0;\n                this.totalRecords = this.filteredValue ? this.filteredValue.length : this.value ? this.value.length : 0;\n            }\n\n            this.cd.markForCheck();\n        }\n    }\n\n    hasFilter() {\n        return this.filterValue && this.filterValue.trim().length > 0;\n    }\n}\n\n@Component({\n    selector: 'p-dataViewLayoutOptions',\n    template: `\n        <div [ngClass]=\"'p-dataview-layout-options p-selectbutton p-buttonset'\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <button type=\"button\" class=\"p-button p-button-icon-only\" [ngClass]=\"{'p-highlight': dv.layout === 'list'}\" (click)=\"changeLayout($event, 'list')\" (keydown.enter)=\"changeLayout($event, 'list')\">\n                <i class=\"pi pi-bars\"></i>\n            </button><button type=\"button\" class=\"p-button p-button-icon-only\" [ngClass]=\"{'p-highlight': dv.layout === 'grid'}\" (click)=\"changeLayout($event, 'grid')\" (keydown.enter)=\"changeLayout($event, 'grid')\">\n                <i class=\"pi pi-th-large\"></i>\n            </button>\n        </div>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class DataViewLayoutOptions  {\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    constructor(public dv: DataView) {}\n\n    changeLayout(event: Event, layout: string) {\n        this.dv.changeLayout(layout);\n        event.preventDefault();\n    }\n}\n@NgModule({\n    imports: [CommonModule,SharedModule,PaginatorModule],\n    exports: [DataView,SharedModule,DataViewLayoutOptions],\n    declarations: [DataView,DataViewLayoutOptions]\n})\nexport class DataViewModule { }\n"]}