{"version":3,"sources":["../../src/app/components/password/password.ts"],"names":["PasswordDirective","el","zone","this","promptLabel","weakLabel","mediumLabel","strongLabel","feedback","Object","defineProperty","prototype","show","nativeElement","type","ngDoCheck","updateFilledState","onInput","e","filled","value","length","createPanel","panel","document","createElement","className","meter","info","textContent","appendChild","style","minWidth","DomHandler","getOuterWidth","body","showOverlay","_this","zIndex","String","zindex","display","runOutsideAngular","setTimeout","addClass","bindScrollListener","bindDocumentResizeListener","absolutePosition","hideOverlay","removeClass","unbindScrollListener","unbindDocumentResizeListener","ngOnDestroy","onFocus","onBlur","onKeyup","target","label","meterPos","score","testStrength","hasClass","backgroundPosition","str","val","grade","match","normalize","x","y","disabled","scrollHandler","ConnectedOverlayScrollHandler","documentResizeListener","onWindowResize","bind","window","addEventListener","removeEventListener","destroy","removeChild","Directive","args","selector","host","[class.p-inputtext]","[class.p-component]","[class.p-filled]","ElementRef","NgZone","Input","HostListener","Password_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Password","multi","cd","config","mediumRegex","strongRegex","showTransitionOptions","hideTransitionOptions","overlayVisible","focused","unmasked","onModelChange","onModelTouched","ngAfterContentInit","templates","forEach","item","getType","contentTemplate","template","headerTemplate","footerTemplate","ngOnInit","infoText","promptText","mediumCheckRegExp","RegExp","strongCheckRegExp","onAnimationStart","event","toState","overlay","element","generateZIndex","appendContainer","alignOverlay","bindResizeListener","unbindResizeListener","appendTo","getElementById","input","relativePosition","onKeyUp","updateUI","weakText","strength","width","mediumText","strongText","onMaskToggle","level","test","writeValue","undefined","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","resizeListener","unbindOutsideClickListener","outsideClickListener","containerClass","p-password p-component p-inputwrapper","p-input-icon-right","toggleMask","inputFieldClass","p-password-input","p-disabled","toggleIconClass","strengthClass","toString","getTranslation","TranslationKeys","PASSWORD_PROMPT","WEAK","MEDIUM","STRONG","restoreAppend","inputType","option","Component","animations","trigger","transition","opacity","transform","animate","[class.p-inputwrapper-filled]","[class.p-inputwrapper-focus]","providers","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","PrimeNGConfig","ViewChild","ContentChildren","PrimeTemplate","NgModule","imports","CommonModule","InputTextModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Directive,ElementRef,HostListener,Input,OnDestroy,DoCheck,NgZone, OnInit, ViewEncapsulation, ChangeDetectionStrategy, ContentChildren, QueryList, TemplateRef, Component, AfterContentInit, ViewChild, ChangeDetectorRef, forwardRef} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {animate, style, transition, trigger} from '@angular/animations';\nimport {NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DomHandler, ConnectedOverlayScrollHandler} from 'primeng/dom';\nimport {PrimeNGConfig, PrimeTemplate, TranslationKeys} from 'primeng/api';\nimport {InputTextModule} from 'primeng/inputtext';\n\n@Directive({\n    selector: '[pPassword]',\n    host: {\n        '[class.p-inputtext]': 'true',\n        '[class.p-component]': 'true',\n        '[class.p-filled]': 'filled'\n    }\n})\nexport class PasswordDirective implements OnDestroy,DoCheck {\n\n    @Input() promptLabel: string = 'Enter a password';\n\n    @Input() weakLabel: string = 'Weak';\n\n    @Input() mediumLabel: string = 'Medium';\n\n    @Input() strongLabel: string = 'Strong';\n\n    @Input() feedback: boolean = true;\n\n    @Input() set showPassword(show: boolean) {\n        this.el.nativeElement.type = show ? 'text' : 'password';\n    }\n\n    panel: HTMLDivElement;\n\n    meter: any;\n\n    info: any;\n\n    filled: boolean;\n\n    scrollHandler: any;\n\n    documentResizeListener: any;\n\n    constructor(public el: ElementRef, public zone: NgZone) {}\n\n    ngDoCheck() {\n        this.updateFilledState();\n    }\n\n    @HostListener('input', ['$event'])\n    onInput(e) {\n        this.updateFilledState();\n    }\n\n    updateFilledState() {\n        this.filled = this.el.nativeElement.value && this.el.nativeElement.value.length;\n    }\n\n    createPanel() {\n        this.panel = document.createElement('div');\n        this.panel.className = 'p-password-panel p-component p-password-panel-overlay p-connected-overlay';\n        this.meter = document.createElement('div');\n        this.meter.className = 'p-password-meter';\n        this.info = document.createElement('div');\n        this.info.className = 'p-password-info';\n        this.info.textContent = this.promptLabel;\n        this.panel.appendChild(this.meter);\n        this.panel.appendChild(this.info);\n        this.panel.style.minWidth = DomHandler.getOuterWidth(this.el.nativeElement) + 'px';\n        document.body.appendChild(this.panel);\n    }\n\n    showOverlay() {\n        if (this.feedback) {\n            if (!this.panel) {\n                this.createPanel();\n            }\n\n            this.panel.style.zIndex = String(++DomHandler.zindex);\n            this.panel.style.display = 'block';\n            this.zone.runOutsideAngular(() => {\n\n                setTimeout(() => {\n                    DomHandler.addClass(this.panel, 'p-connected-overlay-visible');\n                    this.bindScrollListener();\n                    this.bindDocumentResizeListener();\n                }, 1);\n            });\n            DomHandler.absolutePosition(this.panel, this.el.nativeElement);\n        }\n    }\n\n    hideOverlay() {\n        if (this.feedback && this.panel) {\n            DomHandler.addClass(this.panel, 'p-connected-overlay-hidden');\n            DomHandler.removeClass(this.panel, 'p-connected-overlay-visible');\n            this.unbindScrollListener();\n            this.unbindDocumentResizeListener();\n\n            this.zone.runOutsideAngular(() => {\n                setTimeout(() => {\n                    this.ngOnDestroy();\n                }, 150);\n            });\n        }\n    }\n\n    @HostListener('focus')\n    onFocus() {\n        this.showOverlay();\n    }\n\n    @HostListener('blur')\n    onBlur() {\n        this.hideOverlay();\n    }\n\n    @HostListener('keyup', ['$event'])\n    onKeyup(e) {\n        if (this.feedback) {\n            let value = e.target.value,\n            label = null,\n            meterPos = null;\n\n            if (value.length === 0) {\n                label = this.promptLabel;\n                meterPos = '0px 0px';\n            }\n            else {\n                var score = this.testStrength(value);\n\n                if (score < 30) {\n                    label = this.weakLabel;\n                    meterPos = '0px -10px';\n                }\n                else if (score >= 30 && score < 80) {\n                    label = this.mediumLabel;\n                    meterPos = '0px -20px';\n                }\n                else if (score >= 80) {\n                    label = this.strongLabel;\n                    meterPos = '0px -30px';\n                }\n            }\n\n            if (!this.panel || !DomHandler.hasClass(this.panel, 'p-connected-overlay-visible')) {\n                this.showOverlay();\n            }\n\n            this.meter.style.backgroundPosition = meterPos;\n            this.info.textContent = label;\n        }\n    }\n\n    testStrength(str: string) {\n        let grade: number = 0;\n        let val: RegExpMatchArray;\n\n        val = str.match('[0-9]');\n        grade += this.normalize(val ? val.length : 1/4, 1) * 25;\n\n        val = str.match('[a-zA-Z]');\n        grade += this.normalize(val ? val.length : 1/2, 3) * 10;\n\n        val = str.match('[!@#$%^&*?_~.,;=]');\n        grade += this.normalize(val ? val.length : 1/6, 1) * 35;\n\n        val = str.match('[A-Z]');\n        grade += this.normalize(val ? val.length : 1/6, 1) * 30;\n\n        grade *= str.length / 8;\n\n        return grade > 100 ? 100 : grade;\n    }\n\n    normalize(x, y) {\n        let diff = x - y;\n\n        if (diff <= 0)\n            return x / y;\n        else\n            return 1 + 0.5 * (x / (x + y/4));\n    }\n\n    get disabled(): boolean {\n        return this.el.nativeElement.disabled;\n    }\n\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.el.nativeElement, () => {\n                if (DomHandler.hasClass(this.panel, 'p-connected-overlay-visible')) {\n                    this.hideOverlay();\n                }\n            });\n        }\n\n        this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    onWindowResize() {\n        this.hideOverlay();\n    }\n\n    ngOnDestroy() {\n        if (this.panel) {\n            if (this.scrollHandler) {\n                this.scrollHandler.destroy();\n                this.scrollHandler = null;\n            }\n\n            this.unbindDocumentResizeListener();\n\n            document.body.removeChild(this.panel);\n            this.panel = null;\n            this.meter = null;\n            this.info = null;\n        }\n    }\n}\n\n\nexport const Password_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Password),\n    multi: true\n};\n@Component({\n    selector: 'p-password',\n    template: `\n        <div [ngClass]=\"containerClass()\" [ngStyle]=\"style\" [class]=\"styleClass\">\n            <input #input [attr.id]=\"inputId\" pInputText [ngClass]=\"inputFieldClass()\" [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [attr.type]=\"inputType()\" [attr.placeholder]=\"placeholder\" [value]=\"value\" (input)=\"onInput($event)\" (focus)=\"onFocus()\" \n                (blur)=\"onBlur()\" (keyup)=\"onKeyUp($event)\" />\n            <i *ngIf=\"toggleMask\" [ngClass]=\"toggleIconClass()\" (click)=\"onMaskToggle()\"></i>\n            <div #overlay *ngIf=\"overlayVisible\" [ngClass]=\"'p-password-panel p-component'\" \n                [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" (@overlayAnimation.start)=\"onAnimationStart($event)\">\n                <ng-container *ngTemplateOutlet=\"headerTemplate\"></ng-container>\n                <ng-container *ngIf=\"contentTemplate; else content\">\n                    <ng-container *ngTemplateOutlet=\"contentTemplate\"></ng-container>\n                </ng-container>\n                <ng-template #content>\n                    <div class=\"p-password-meter\">\n                        <div [ngClass]=\"strengthClass()\" [ngStyle]=\"{'width': meter ? meter.width : ''}\"></div>\n                    </div>\n                    <div className=\"p-password-info\">{{infoText}}</div>\n                </ng-template>\n                <ng-container *ngTemplateOutlet=\"footerTemplate\"></ng-container>\n            </div>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n              ]),\n              transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n              ])\n        ])\n    ],\n    host: {\n        '[class.p-inputwrapper-filled]': 'filled()',\n        '[class.p-inputwrapper-focus]': 'focused'\n    },\n    providers: [Password_VALUE_ACCESSOR],\n    styleUrls: ['./password.css'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class Password implements AfterContentInit,OnInit {\n    \n    @Input() disabled: boolean;\n\n    @Input() promptLabel: string;\n\n    @Input() mediumRegex: string = '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})';\n\n    @Input() strongRegex: string = '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})';\n\n    @Input() weakLabel: string;\n\n    @Input() mediumLabel: string;\n\n    @Input() strongLabel: string;\n\n    @Input() inputId: string;\n\n    @Input() feedback: boolean = true;\n\n    @Input() appendTo: any;\n\n    @Input() toggleMask: boolean;\n\n    @Input() inputStyleClass: string;\n\n    @Input() styleClass: string;\n\n    @Input() style: any;\n\n    @Input() inputStyle: any;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    @Input() placeholder: string;\n\n    @ViewChild('input') input: ElementRef;\n\n    contentTemplate: TemplateRef<any>;\n\n    footerTemplate: TemplateRef<any>;\n\n    headerTemplate: TemplateRef<any>;\n\n    @ContentChildren(PrimeTemplate) templates: QueryList<any>;\n    \n    overlayVisible: boolean = false;\n\n    meter: any;\n    \n    infoText: string;\n    \n    focused: boolean = false;\n    \n    unmasked: boolean = false;\n\n    mediumCheckRegExp: any;\n\n    strongCheckRegExp: any;\n\n    resizeListener: any;\n\n    outsideClickListener: any;\n\n    scrollHandler: any;\n\n    overlay: any;\n\n    value: string = null;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n\n    constructor(private cd: ChangeDetectorRef, private config: PrimeNGConfig) {}\n\n    ngAfterContentInit() {\n        this.templates.forEach((item) => {\n            switch(item.getType()) {\n                case 'content':\n                    this.contentTemplate = item.template;\n                break;\n\n                case 'header':\n                    this.headerTemplate = item.template;\n                break;\n\n                case 'footer':\n                    this.footerTemplate = item.template;\n                break;\n                \n                default:\n                    this.contentTemplate = item.template;\n                break;\n            }\n        });\n    }\n\n    ngOnInit() {\n        this.infoText = this.promptText();\n        this.mediumCheckRegExp = new RegExp(this.mediumRegex);\n        this.strongCheckRegExp = new RegExp(this.strongRegex);\n    }\n\n    onAnimationStart(event) {\n        switch(event.toState) {\n            case 'visible':\n                this.overlay = event.element;\n                this.overlay.style.zIndex = String(DomHandler.generateZIndex());\n                this.appendContainer();\n                this.alignOverlay();\n                this.bindScrollListener();\n                this.bindResizeListener();\n            break;\n\n            case 'void':\n                this.unbindScrollListener();\n                this.unbindResizeListener();\n                this.overlay = null;\n            break;\n        }\n    }\n\n    appendContainer() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.overlay);\n            else\n                document.getElementById(this.appendTo).appendChild(this.overlay);\n        }\n    }\n\n    alignOverlay() {\n        if (this.appendTo) {\n            this.overlay.style.minWidth = DomHandler.getOuterWidth(this.input.nativeElement) + 'px';\n            DomHandler.absolutePosition(this.overlay, this.input.nativeElement);\n        }\n        else {\n            DomHandler.relativePosition(this.overlay, this.input.nativeElement);\n        }\n    }\n\n    onInput(event)  {\n        this.value = event.target.value;\n        this.onModelChange(this.value);\n        this.onModelTouched();\n    }\n\n    onFocus() {\n        this.focused = true;\n        if (this.feedback) {\n            this.overlayVisible = true;\n        }\n    }\n\n    onBlur() {\n        this.focused = false;\n        if (this.feedback) {\n            this.overlayVisible = false;\n        }\n    }\n\n    onKeyUp(event) {\n        if (this.feedback) {\n            let value = event.target.value;\n            this.updateUI(value);\n\n            if (!this.overlayVisible) {\n                this.overlayVisible = true;\n            }\n        }\n    }\n    \n    updateUI(value) {\n        let label = null;\n        let meter = null;\n\n        switch (this.testStrength(value)) {\n            case 1:\n                label = this.weakText();\n                meter = {\n                    strength: 'weak',\n                    width: '33.33%'\n                };\n                break;\n\n            case 2:\n                label = this.mediumText();\n                meter = {\n                    strength: 'medium',\n                    width: '66.66%'\n                };\n                break;\n\n            case 3:\n                label = this.strongText();\n                meter = {\n                    strength: 'strong',\n                    width: '100%'\n                };\n                break;\n\n            default:\n                label = this.promptText();\n                meter = null;\n                break;\n        }\n\n        this.meter = meter;\n        this.infoText = label;\n    }\n\n    onMaskToggle() {\n        this.unmasked = !this.unmasked;\n    }\n\n    testStrength(str) {\n        let level = 0;\n\n        if (this.strongCheckRegExp.test(str))\n            level = 3;\n        else if (this.mediumCheckRegExp.test(str))\n            level = 2;\n        else if (str.length)\n            level = 1;\n\n        return level;\n    }\n\n    writeValue(value: any) : void {\n        if (value === undefined)\n            this.value = null;\n        else \n            this.value = value;\n\n        if (this.feedback)\n            this.updateUI(this.value || \"\");\n        \n        this.cd.markForCheck();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n    }\n\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.input.nativeElement, () => {\n                if (this.overlayVisible) {\n                    this.overlayVisible = false;\n                }\n            });\n        }\n\n        this.scrollHandler.bindScrollListener();\n    }\n\n    bindResizeListener() {\n        if (!this.resizeListener) {\n            this.resizeListener = () => {\n                if (this.overlayVisible) {\n                    this.overlayVisible = false;\n                }\n            };\n            window.addEventListener('resize', this.resizeListener);\n        }\n    }\n\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n\n    unbindResizeListener() {\n        if (this.resizeListener) {\n            window.removeEventListener('resize', this.resizeListener);\n            this.resizeListener = null;\n        }\n    }\n\n    unbindOutsideClickListener() {\n        if (this.outsideClickListener) {\n            document.removeEventListener('click', this.outsideClickListener);\n            this.outsideClickListener = null;\n        }\n    }\n\n    containerClass() {\n        return {'p-password p-component p-inputwrapper': true,\n            'p-input-icon-right': this.toggleMask\n        };\n    }\n\n    inputFieldClass() {\n        return {'p-password-input' : true, \n                'p-disabled': this.disabled\n        };\n    }\n\n    toggleIconClass() {\n        return this.unmasked ? 'pi pi-eye-slash' : 'pi pi-eye';\n    }\n\n    strengthClass() {\n        return `p-password-strength ${this.meter ? this.meter.strength : ''}`;\n    }\n\n    filled() {\n        return (this.value != null && this.value.toString().length > 0)\n    }\n\n    promptText() {\n        return this.promptLabel || this.getTranslation(TranslationKeys.PASSWORD_PROMPT);\n    }\n\n    weakText() {\n        return this.weakLabel || this.getTranslation(TranslationKeys.WEAK);\n    }\n\n    mediumText() {\n        return this.mediumLabel || this.getTranslation(TranslationKeys.MEDIUM);\n    }\n\n    strongText() {\n        return this.strongLabel || this.getTranslation(TranslationKeys.STRONG);\n    }\n\n    restoreAppend() {\n        if (this.overlay && this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.removeChild(this.overlay);\n            else\n                document.getElementById(this.appendTo).removeChild(this.overlay);\n        }\n    }\n\n    inputType() {\n        return this.unmasked ? 'text' : 'password';\n    }\n\n    getTranslation(option: string) {\n        return this.config.getTranslation(option);\n    }\n\n    ngOnDestroy() {\n        this.restoreAppend();\n        this.unbindResizeListener();\n        if (this.scrollHandler) {\n            this.scrollHandler.destroy();\n            this.scrollHandler = null;\n        }\n    }\n}\n\n@NgModule({\n    imports: [CommonModule, InputTextModule],\n    exports: [PasswordDirective, Password],\n    declarations: [PasswordDirective, Password]\n})\nexport class PasswordModule { }\n"]}