{"version":3,"sources":["../../src/app/components/tieredmenu/tieredmenu.ts"],"names":["TieredMenuSub","el","renderer","cd","this","autoZIndex","baseZIndex","leafClick","EventEmitter","keydownItem","menuHoverActive","Object","defineProperty","prototype","_parentActive","value","root","activeItem","onItemClick","event","item","disabled","preventDefault","url","routerLink","command","originalEvent","items","unbindDocumentClickListener","bindDocumentClickListener","onLeafClick","onItemMouseEnter","mobileActive","autoDisplay","popup","emit","onItemKeyDown","listItem","currentTarget","parentElement","key","nextItem","findNextItem","children","focus","prevItem","findPrevItem","setTimeout","element","nextElementSibling","DomHandler","hasClass","previousElementSibling","onChildItemKeyDown","_this","documentClickListener","nativeElement","contains","target","markForCheck","document","addEventListener","removeEventListener","ngOnDestroy","Component","args","selector","template","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","ChangeDetectorRef","Input","Output","TieredMenu","showTransitionOptions","hideTransitionOptions","toggle","visible","hide","show","preventDocumentDefault","parentActive","onOverlayAnimationStart","toState","container","moveOnTop","appendOverlay","absolutePosition","bindDocumentResizeListener","bindScrollListener","onOverlayHide","appendTo","body","appendChild","restoreOverlayAppend","style","zIndex","String","zindex","onWindowResize","documentTarget","ownerDocument","listen","documentResizeListener","bind","window","unbindDocumentResizeListener","scrollHandler","ConnectedOverlayScrollHandler","unbindScrollListener","destroy","animations","trigger","transition","opacity","transform","animate","changeDetection","ChangeDetectionStrategy","OnPush","NgModule","imports","CommonModule","RouterModule","RippleModule","exports","declarations"],"mappings":"+pBAiFI,SAAAA,EAAmBC,EAAuBC,EAA6BC,GAApDC,KAAAH,GAAAA,EAAuBG,KAAAF,SAAAA,EAA6BE,KAAAD,GAAAA,EAjC9DC,KAAAC,YAAsB,EAEtBD,KAAAE,WAAqB,EAmBpBF,KAAAG,UAA+B,IAAIC,EAAAA,aAEnCJ,KAAAK,YAAiC,IAAID,EAAAA,aAM/CJ,KAAAM,iBAA2B,SArB3BC,OAAAC,eAAaZ,EAAAa,UAAA,eAAY,KAAzB,WAEI,OAAOT,KAAKU,mBAEhB,SAAiBC,GACRX,KAAKY,OACNZ,KAAKU,cAAgBC,EAEhBA,IACDX,KAAKa,WAAa,wCAkB9BjB,EAAAa,UAAAK,YAAA,SAAYC,EAAOC,GACXA,EAAKC,SACLF,EAAMG,kBAILF,EAAKG,KAAQH,EAAKI,YACnBL,EAAMG,iBAGNF,EAAKK,SACLL,EAAKK,QAAQ,CACTC,cAAeP,EACfC,KAAMA,IAIVA,EAAKO,QACDvB,KAAKa,YAAcG,IAAShB,KAAKa,YACjCb,KAAKa,WAAa,KAClBb,KAAKwB,gCAGLxB,KAAKa,WAAaG,EACdhB,KAAKY,MACLZ,KAAKyB,8BAKZT,EAAKO,OACNvB,KAAK0B,gBAIb9B,EAAAa,UAAAkB,iBAAA,SAAiBZ,EAAOC,GAChBA,EAAKC,UAAYjB,KAAK4B,aACtBb,EAAMG,iBAINlB,KAAKY,MACDZ,KAAKa,YAAcb,KAAK6B,aAAe7B,KAAK8B,SAC5C9B,KAAKa,WAAaG,EAClBhB,KAAKyB,8BAITzB,KAAKa,WAAaG,EAClBhB,KAAKyB,8BAIb7B,EAAAa,UAAAiB,YAAA,WACI1B,KAAKa,WAAa,KACdb,KAAKY,MACLZ,KAAKwB,8BAGTxB,KAAKG,UAAU4B,QAGnBnC,EAAAa,UAAAuB,cAAA,SAAcjB,EAAOC,GACjB,IAAIiB,EAAWlB,EAAMmB,cAAcC,cAEnC,OAAQpB,EAAMqB,KACV,IAAK,YACD,IAAIC,EAAWrC,KAAKsC,aAAaL,GAC7BI,GACAA,EAASE,SAAS,GAAGC,QAGzBzB,EAAMG,iBACV,MAEA,IAAK,UACD,IAAIuB,EAAWzC,KAAK0C,aAAaT,GAC7BQ,GACAA,EAASF,SAAS,GAAGC,QAGzBzB,EAAMG,iBACV,MAEA,IAAK,aACGF,EAAKO,QACLvB,KAAKa,WAAaG,EAEdhB,KAAKY,MACLZ,KAAKyB,4BAGTkB,YAAW,WACPV,EAASM,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGA,SAAS,GAAGC,UAC1D,KAGPzB,EAAMG,iBAOdlB,KAAKK,YAAY0B,KAAK,CAClBT,cAAeP,EACf6B,QAASX,KAIjBrC,EAAAa,UAAA6B,aAAA,SAAatB,GACT,IAAIqB,EAAWrB,EAAK6B,mBAEpB,OAAIR,EACOS,EAAAA,WAAWC,SAASV,EAAU,gBAAkBS,EAAAA,WAAWC,SAASV,EAAU,cAAgBrC,KAAKsC,aAAaD,GAAYA,EAE5H,MAGfzC,EAAAa,UAAAiC,aAAA,SAAa1B,GACT,IAAIyB,EAAWzB,EAAKgC,uBAEpB,OAAIP,EACOK,EAAAA,WAAWC,SAASN,EAAU,gBAAkBK,EAAAA,WAAWC,SAASN,EAAU,cAAgBzC,KAAK0C,aAAaD,GAAYA,EAE5H,MAGf7C,EAAAa,UAAAwC,mBAAA,SAAmBlC,GACiB,cAA5BA,EAAMO,cAAcc,MACpBpC,KAAKa,WAAa,KAEdb,KAAKY,MACLZ,KAAKwB,8BAGTT,EAAM6B,QAAQT,cAAcA,cAAcA,cAAcI,SAAS,GAAGC,UAI5E5C,EAAAa,UAAAgB,0BAAA,WAAA,IAAAyB,EAAAlD,KACSA,KAAKmD,wBACNnD,KAAKmD,sBAAwB,SAACpC,GACtBmC,EAAKrD,KAAOqD,EAAKrD,GAAGuD,cAAcC,SAAStC,EAAMuC,UACjDJ,EAAKrC,WAAa,KAClBqC,EAAKnD,GAAGwD,eACRL,EAAK1B,gCAIbgC,SAASC,iBAAiB,QAASzD,KAAKmD,yBAIhDvD,EAAAa,UAAAe,4BAAA,WACQxB,KAAKmD,wBACLK,SAASE,oBAAoB,QAAS1D,KAAKmD,uBAC3CnD,KAAKmD,sBAAwB,OAIrCvD,EAAAa,UAAAkD,YAAA,WACI3D,KAAKwB,wDA7OZoC,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,kBACVC,SAAU,oxGA4BVC,cAAeC,EAAAA,kBAAkBC,kDAtCPC,EAAAA,kBAAmBC,EAAAA,iBAAqBC,EAAAA,mDA0CjEC,EAAAA,oBAEAA,EAAAA,2BAEAA,EAAAA,0BAEAA,EAAAA,0BAEAA,EAAAA,4BAEAA,EAAAA,qBAEAA,EAAAA,4BAEAA,EAAAA,yBAaAC,EAAAA,4BAEAA,EAAAA,2BAiPD,SAAAC,EAAmB3E,EAAuBC,EAA4BC,GAAnDC,KAAAH,GAAAA,EAAuBG,KAAAF,SAAAA,EAA4BE,KAAAD,GAAAA,EA1B7DC,KAAAC,YAAsB,EAEtBD,KAAAE,WAAqB,EAIrBF,KAAAyE,sBAAgC,kCAEhCzE,KAAA0E,sBAAgC,oBAoBzCF,EAAA/D,UAAAkE,OAAA,SAAO5D,GACCf,KAAK4E,QACL5E,KAAK6E,OAEL7E,KAAK8E,KAAK/D,GAEdf,KAAK+E,wBAAyB,GAGlCP,EAAA/D,UAAAqE,KAAA,SAAK/D,GACDf,KAAKsD,OAASvC,EAAMmB,cACpBlC,KAAK4E,SAAU,EACf5E,KAAKgF,cAAe,EACpBhF,KAAK+E,wBAAyB,EAC9B/E,KAAKD,GAAGwD,gBAGZiB,EAAA/D,UAAAwE,wBAAA,SAAwBlE,GACpB,OAAOA,EAAMmE,SACT,IAAK,UACGlF,KAAK8B,QACL9B,KAAKmF,UAAYpE,EAAM6B,QACvB5C,KAAKoF,YACLpF,KAAKqF,gBACLvC,EAAAA,WAAWwC,iBAAiBtF,KAAKmF,UAAWnF,KAAKsD,QACjDtD,KAAKyB,4BACLzB,KAAKuF,6BACLvF,KAAKwF,sBAEb,MAEA,IAAK,OACDxF,KAAKyF,kBAKjBjB,EAAA/D,UAAA4E,cAAA,WACQrF,KAAK0F,WACiB,SAAlB1F,KAAK0F,SACLlC,SAASmC,KAAKC,YAAY5F,KAAKmF,WAE/BrC,EAAAA,WAAW8C,YAAY5F,KAAKmF,UAAWnF,KAAK0F,YAIxDlB,EAAA/D,UAAAoF,qBAAA,WACQ7F,KAAKmF,WAAanF,KAAK0F,UACvB1F,KAAKH,GAAGuD,cAAcwC,YAAY5F,KAAKmF,YAI/CX,EAAA/D,UAAA2E,UAAA,WACQpF,KAAKC,aACLD,KAAKmF,UAAUW,MAAMC,OAASC,OAAOhG,KAAKE,cAAgB4C,EAAAA,WAAWmD,UAI7EzB,EAAA/D,UAAAoE,KAAA,WACI7E,KAAK4E,SAAU,EACf5E,KAAKgF,cAAe,EACpBhF,KAAKD,GAAGwD,gBAGZiB,EAAA/D,UAAAyF,eAAA,WACIlG,KAAK6E,QAGTL,EAAA/D,UAAAiB,YAAA,WACQ1B,KAAK8B,OACL9B,KAAK6E,OAGT7E,KAAKwB,+BAGTgD,EAAA/D,UAAAgB,0BAAA,WAAA,IAAAyB,EAAAlD,KACI,IAAKA,KAAKmD,sBAAuB,CAC7B,IAAMgD,EAAsBnG,KAAKH,GAAKG,KAAKH,GAAGuD,cAAcgD,cAAgB,WAE5EpG,KAAKmD,sBAAwBnD,KAAKF,SAASuG,OAAOF,EAAgB,SAAS,YAClEjD,EAAK6B,wBAA0B7B,EAAKpB,OACrCoB,EAAK2B,OAGT3B,EAAK6B,wBAAyB,OAK1CP,EAAA/D,UAAAe,4BAAA,WACQxB,KAAKmD,wBACLnD,KAAKmD,wBACLnD,KAAKmD,sBAAwB,OAIrCqB,EAAA/D,UAAA8E,2BAAA,WACIvF,KAAKsG,uBAAyBtG,KAAKkG,eAAeK,KAAKvG,MACvDwG,OAAO/C,iBAAiB,SAAUzD,KAAKsG,yBAG3C9B,EAAA/D,UAAAgG,6BAAA,WACQzG,KAAKsG,yBACLE,OAAO9C,oBAAoB,SAAU1D,KAAKsG,wBAC1CtG,KAAKsG,uBAAyB,OAItC9B,EAAA/D,UAAA+E,mBAAA,WAAA,IAAAtC,EAAAlD,KACSA,KAAK0G,gBACN1G,KAAK0G,cAAgB,IAAIC,EAAAA,8BAA8B3G,KAAKsD,QAAQ,WAC5DJ,EAAK0B,SACL1B,EAAK2B,WAKjB7E,KAAK0G,cAAclB,sBAGvBhB,EAAA/D,UAAAmG,qBAAA,WACQ5G,KAAK0G,eACL1G,KAAK0G,cAAcE,wBAI3BpC,EAAA/D,UAAAgF,cAAA,WACIzF,KAAKwB,8BACLxB,KAAKyG,+BACLzG,KAAK4G,uBACL5G,KAAK+E,wBAAyB,EAC9B/E,KAAKsD,OAAS,MAGlBkB,EAAA/D,UAAAkD,YAAA,WACQ3D,KAAK8B,QACD9B,KAAK0G,gBACL1G,KAAK0G,cAAcG,UACnB7G,KAAK0G,cAAgB,MAGzB1G,KAAK6F,uBACL7F,KAAKyF,2CAhNhB7B,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,eACVC,SAAU,0tBAQV+C,WAAY,CACRC,EAAAA,QAAQ,mBAAoB,CACxBC,EAAAA,WAAW,SAAU,CACjBlB,EAAAA,MAAM,CAACmB,QAAS,EAAGC,UAAW,gBAC9BC,EAAAA,QAAQ,8BAEVH,EAAAA,WAAW,SAAU,CACnBG,EAAAA,QAAQ,2BAA4BrB,EAAAA,MAAM,CAAEmB,QAAS,UAIjEG,gBAAiBC,EAAAA,wBAAwBC,OACzCtD,cAAeC,EAAAA,kBAAkBC,6mBA/QPC,EAAAA,kBAAmBC,EAAAA,iBAAqBC,EAAAA,oDAoRjEC,EAAAA,qBAEAA,EAAAA,qBAEAA,EAAAA,0BAEAA,EAAAA,wBAEAA,EAAAA,0BAEAA,EAAAA,0BAEAA,EAAAA,2BAEAA,EAAAA,qCAEAA,EAAAA,qCAEAA,EAAAA,eA8KL,iCALCiD,EAAAA,SAAQ1D,KAAA,CAAC,CACN2D,QAAS,CAACC,EAAAA,aAAaC,EAAAA,aAAaC,EAAAA,cACpCC,QAAS,CAACpD,EAAWkD,EAAAA,cACrBG,aAAc,CAACrD,EAAW5E","sourcesContent":["import { NgModule, Component, ElementRef, Input, Renderer2, OnDestroy,ChangeDetectorRef, ChangeDetectionStrategy, ViewEncapsulation, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ConnectedOverlayScrollHandler, DomHandler } from 'primeng/dom';\nimport { MenuItem } from 'primeng/api';\nimport { RouterModule } from '@angular/router';\nimport { RippleModule } from 'primeng/ripple';  \nimport { animate, style, transition, trigger, AnimationEvent } from '@angular/animations';\n\n@Component({\n    selector: 'p-tieredMenuSub',\n    template: `\n        <ul [ngClass]=\"{'p-submenu-list': !root}\">\n            <ng-template ngFor let-child [ngForOf]=\"(root ? item : item.items)\">\n                <li *ngIf=\"child.separator\" class=\"p-menu-separator\" [ngClass]=\"{'p-hidden': child.visible === false}\">\n                <li *ngIf=\"!child.separator\" #listItem [ngClass]=\"{'p-menuitem':true, 'p-menuitem-active': child === activeItem, 'p-hidden': child.visible === false}\" [ngStyle]=\"child.style\" [class]=\"child.styleClass\">\n                    <a *ngIf=\"!child.routerLink\" (keydown)=\"onItemKeyDown($event, child)\" [attr.href]=\"child.url\" [attr.data-automationid]=\"child.automationId\" [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" \n                         (click)=\"onItemClick($event, child)\" (mouseenter)=\"onItemMouseEnter($event,child)\" \n                         [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\"\n                         [attr.tabindex]=\"child.disabled ? null : '0'\" [attr.aria-haspopup]=\"item.items != null\" [attr.aria-expanded]=\"item === activeItem\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlLabel\">{{child.label}}</span>\n                        <ng-template #htmlLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                        <span class=\"p-submenu-icon pi pi-angle-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <a *ngIf=\"child.routerLink\" (keydown)=\"onItemKeyDown($event, child)\" [routerLink]=\"child.routerLink\" [attr.data-automationid]=\"child.automationId\" [queryParams]=\"child.queryParams\" [routerLinkActive]=\"'p-menuitem-link-active'\" [routerLinkActiveOptions]=\"child.routerLinkActiveOptions||{exact:false}\"\n                        [attr.target]=\"child.target\" [attr.title]=\"child.title\" [attr.id]=\"child.id\" [attr.tabindex]=\"child.disabled ? null : '0'\" role=\"menuitem\"\n                        (click)=\"onItemClick($event, child)\" (mouseenter)=\"onItemMouseEnter($event,child)\"  [ngClass]=\"{'p-menuitem-link':true,'p-disabled':child.disabled}\"\n                        [fragment]=\"child.fragment\" [queryParamsHandling]=\"child.queryParamsHandling\" [preserveFragment]=\"child.preserveFragment\" [skipLocationChange]=\"child.skipLocationChange\" [replaceUrl]=\"child.replaceUrl\" [state]=\"child.state\" pRipple>\n                        <span class=\"p-menuitem-icon\" *ngIf=\"child.icon\" [ngClass]=\"child.icon\"></span>\n                        <span class=\"p-menuitem-text\" *ngIf=\"child.escape !== false; else htmlRouteLabel\">{{child.label}}</span>\n                        <ng-template #htmlRouteLabel><span class=\"p-menuitem-text\" [innerHTML]=\"child.label\"></span></ng-template>\n                        <span class=\"p-submenu-icon pi pi-angle-right\" *ngIf=\"child.items\"></span>\n                    </a>\n                    <p-tieredMenuSub (keydownItem)=\"onChildItemKeyDown($event)\" [parentActive]=\"child === activeItem\" [item]=\"child\" *ngIf=\"child.items\" [mobileActive]=\"mobileActive\" [autoDisplay]=\"autoDisplay\" (leafClick)=\"onLeafClick()\" [popup]=\"popup\"></p-tieredMenuSub>\n                </li>\n            </ng-template>\n        </ul>\n    `,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TieredMenuSub implements OnDestroy {\n\n    @Input() item: MenuItem;\n\n    @Input() root: boolean;\n\n    @Input() autoDisplay: boolean;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() mobileActive: boolean;\n\n    @Input() popup: boolean;\n\n    @Input() get parentActive():boolean \n    {\n        return this._parentActive;\n    }\n    set parentActive(value) {\n        if (!this.root) {\n            this._parentActive = value;\n\n            if (!value)\n                this.activeItem = null;\n        }\n    }\n\n    @Output() leafClick: EventEmitter<any> = new EventEmitter();\n\n    @Output() keydownItem: EventEmitter<any> = new EventEmitter();\n\n    _parentActive: boolean;\n\n    documentClickListener: any;\n\n    menuHoverActive: boolean = false;\n\n    activeItem: any;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, private cd: ChangeDetectorRef) { }\n\n    onItemClick(event, item) {\n        if (item.disabled) {\n            event.preventDefault();\n            return;\n        }\n\n        if (!item.url && !item.routerLink) {\n            event.preventDefault();\n        }\n\n        if (item.command) {\n            item.command({\n                originalEvent: event,\n                item: item\n            });\n        }\n\n        if (item.items) {\n            if (this.activeItem && item === this.activeItem) {\n                this.activeItem = null;\n                this.unbindDocumentClickListener();\n            }\n            else {\n                this.activeItem = item;\n                if (this.root) {\n                    this.bindDocumentClickListener();\n                }\n            }\n        }\n\n        if (!item.items) {\n            this.onLeafClick();\n        }\n    }\n\n    onItemMouseEnter(event, item) {\n        if (item.disabled || this.mobileActive) {\n            event.preventDefault();\n            return;\n        }\n\n        if (this.root) {\n            if (this.activeItem || this.autoDisplay || this.popup) {\n                this.activeItem = item;\n                this.bindDocumentClickListener();\n            }\n        }\n        else {\n            this.activeItem = item;\n            this.bindDocumentClickListener();\n        }\n    }\n\n    onLeafClick() {\n        this.activeItem = null;\n        if (this.root) {\n            this.unbindDocumentClickListener();\n        }\n\n        this.leafClick.emit();\n    }\n\n    onItemKeyDown(event, item) {\n        let listItem = event.currentTarget.parentElement;\n\n        switch (event.key) {\n            case 'ArrowDown':\n                var nextItem = this.findNextItem(listItem);\n                if (nextItem) {\n                    nextItem.children[0].focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            case 'ArrowUp':\n                var prevItem = this.findPrevItem(listItem);\n                if (prevItem) {\n                    prevItem.children[0].focus();\n                }\n\n                event.preventDefault();\n            break;\n\n            case 'ArrowRight':\n                if (item.items) {\n                    this.activeItem = item;\n\n                    if (this.root) {\n                        this.bindDocumentClickListener();\n                    }\n\n                    setTimeout(() => {\n                        listItem.children[1].children[0].children[0].children[0].focus();\n                    }, 50);\n                }\n\n                event.preventDefault();\n            break;\n\n            default:\n            break;\n        }\n\n        this.keydownItem.emit({\n            originalEvent: event,\n            element: listItem\n        });\n    }\n\n    findNextItem(item) {\n        let nextItem = item.nextElementSibling;\n\n        if (nextItem)\n            return DomHandler.hasClass(nextItem, 'p-disabled') || !DomHandler.hasClass(nextItem, 'p-menuitem') ? this.findNextItem(nextItem) : nextItem;\n        else\n            return null;\n    }\n\n    findPrevItem(item) {\n        let prevItem = item.previousElementSibling;\n\n        if (prevItem)\n            return DomHandler.hasClass(prevItem, 'p-disabled') || !DomHandler.hasClass(prevItem, 'p-menuitem') ? this.findPrevItem(prevItem) : prevItem;\n        else\n            return null;\n    }\n\n    onChildItemKeyDown(event) {\n        if (event.originalEvent.key === 'ArrowLeft') {\n            this.activeItem = null;\n\n            if (this.root) {\n                this.unbindDocumentClickListener();\n            }\n\n            event.element.parentElement.parentElement.parentElement.children[0].focus();\n        }\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            this.documentClickListener = (event) => {\n                if (this.el && !this.el.nativeElement.contains(event.target)) {\n                    this.activeItem = null;\n                    this.cd.markForCheck();\n                    this.unbindDocumentClickListener();\n                }\n            };\n\n            document.addEventListener('click', this.documentClickListener);\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            document.removeEventListener('click', this.documentClickListener);\n            this.documentClickListener = null;\n        }\n    }\n\n    ngOnDestroy() {\n        this.unbindDocumentClickListener();\n    }\n}\n\n@Component({\n    selector: 'p-tieredMenu',\n    template: `\n        <div [ngClass]=\"{'p-tieredmenu p-component':true, 'p-tieredmenu-overlay':popup}\" [class]=\"styleClass\" [ngStyle]=\"style\"\n            [@overlayAnimation]=\"{value: 'visible', params: {showTransitionParams: showTransitionOptions, hideTransitionParams: hideTransitionOptions}}\" [@.disabled]=\"popup !== true\"\n            (@overlayAnimation.start)=\"onOverlayAnimationStart($event)\" (click)=\"preventDocumentDefault=true\" *ngIf=\"!popup || visible\">\n            <p-tieredMenuSub [item]=\"model\" root=\"root\" [parentActive]=\"parentActive\" [baseZIndex]=\"baseZIndex\" [autoZIndex]=\"autoZIndex\" (leafClick)=\"onLeafClick()\" \n                [autoDisplay]=\"autoDisplay\" [popup]=\"popup\"></p-tieredMenuSub>\n        </div>\n    `,\n    animations: [\n        trigger('overlayAnimation', [\n            transition(':enter', [\n                style({opacity: 0, transform: 'scaleY(0.8)'}),\n                animate('{{showTransitionParams}}')\n              ]),\n              transition(':leave', [\n                animate('{{hideTransitionParams}}', style({ opacity: 0 }))\n              ])\n        ])\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./tieredmenu.css']\n})\nexport class TieredMenu implements OnDestroy {\n\n    @Input() model: MenuItem[];\n\n    @Input() popup: boolean;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() appendTo: any;\n\n    @Input() autoZIndex: boolean = true;\n\n    @Input() baseZIndex: number = 0;\n\n    @Input() autoDisplay: boolean;\n\n    @Input() showTransitionOptions: string = '.12s cubic-bezier(0, 0, 0.2, 1)';\n\n    @Input() hideTransitionOptions: string = '.1s linear';\n\n    parentActive: boolean;\n\n    container: HTMLDivElement;\n\n    documentClickListener: any;\n\n    documentResizeListener: any;\n\n    preventDocumentDefault: boolean;\n\n    scrollHandler: any;\n\n    target: any;\n\n    visible: boolean;\n\n    constructor(public el: ElementRef, public renderer: Renderer2, public cd: ChangeDetectorRef) {}\n\n    toggle(event) {\n        if (this.visible)\n            this.hide();\n        else\n            this.show(event);\n\n        this.preventDocumentDefault = true;\n    }\n\n    show(event) {\n        this.target = event.currentTarget;\n        this.visible = true;\n        this.parentActive = true;\n        this.preventDocumentDefault = true;\n        this.cd.markForCheck();\n    }\n\n    onOverlayAnimationStart(event: AnimationEvent) {\n        switch(event.toState) {\n            case 'visible':\n                if (this.popup) {\n                    this.container = event.element;\n                    this.moveOnTop();\n                    this.appendOverlay();\n                    DomHandler.absolutePosition(this.container, this.target);\n                    this.bindDocumentClickListener();\n                    this.bindDocumentResizeListener();\n                    this.bindScrollListener();\n                }\n            break;\n\n            case 'void':\n                this.onOverlayHide();\n            break;\n        }\n    }\n\n    appendOverlay() {\n        if (this.appendTo) {\n            if (this.appendTo === 'body')\n                document.body.appendChild(this.container);\n            else\n                DomHandler.appendChild(this.container, this.appendTo);\n        }\n    }\n\n    restoreOverlayAppend() {\n        if (this.container && this.appendTo) {\n            this.el.nativeElement.appendChild(this.container);\n        }\n    }\n\n    moveOnTop() {\n        if (this.autoZIndex) {\n            this.container.style.zIndex = String(this.baseZIndex + (++DomHandler.zindex));\n        }\n    }\n\n    hide() {\n        this.visible = false;\n        this.parentActive = false;\n        this.cd.markForCheck();\n    }\n\n    onWindowResize() {\n        this.hide();\n    }\n\n    onLeafClick() {\n        if (this.popup) {\n            this.hide();\n        }\n\n        this.unbindDocumentClickListener();\n    }\n\n    bindDocumentClickListener() {\n        if (!this.documentClickListener) {\n            const documentTarget: any = this.el ? this.el.nativeElement.ownerDocument : 'document';\n\n            this.documentClickListener = this.renderer.listen(documentTarget, 'click', () => {\n                if (!this.preventDocumentDefault && this.popup) {\n                    this.hide();\n                }\n\n                this.preventDocumentDefault = false;\n            });\n        }\n    }\n\n    unbindDocumentClickListener() {\n        if (this.documentClickListener) {\n            this.documentClickListener();\n            this.documentClickListener = null;\n        }\n    }\n\n    bindDocumentResizeListener() {\n        this.documentResizeListener = this.onWindowResize.bind(this);\n        window.addEventListener('resize', this.documentResizeListener);\n    }\n\n    unbindDocumentResizeListener() {\n        if (this.documentResizeListener) {\n            window.removeEventListener('resize', this.documentResizeListener);\n            this.documentResizeListener = null;\n        }\n    }\n\n    bindScrollListener() {\n        if (!this.scrollHandler) {\n            this.scrollHandler = new ConnectedOverlayScrollHandler(this.target, () => {\n                if (this.visible) {\n                    this.hide();\n                }\n            });\n        }\n\n        this.scrollHandler.bindScrollListener();\n    }\n\n    unbindScrollListener() {\n        if (this.scrollHandler) {\n            this.scrollHandler.unbindScrollListener();\n        }\n    }\n\n    onOverlayHide() {\n        this.unbindDocumentClickListener();\n        this.unbindDocumentResizeListener();\n        this.unbindScrollListener();\n        this.preventDocumentDefault = false;\n        this.target = null;\n    }\n\n    ngOnDestroy() {\n        if (this.popup) {\n            if (this.scrollHandler) {\n                this.scrollHandler.destroy();\n                this.scrollHandler = null;\n            }\n\n            this.restoreOverlayAppend();\n            this.onOverlayHide();\n        }\n    }\n\n}\n\n@NgModule({\n    imports: [CommonModule,RouterModule,RippleModule],\n    exports: [TieredMenu,RouterModule],\n    declarations: [TieredMenu,TieredMenuSub]\n})\nexport class TieredMenuModule { }\n"]}