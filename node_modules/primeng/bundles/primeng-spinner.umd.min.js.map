{"version":3,"sources":["../../src/app/components/spinner/spinner.ts"],"names":["SPINNER_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","Spinner","multi","el","cd","this","onChange","EventEmitter","onFocus","onBlur","_step","onModelChange","onModelTouched","keyPattern","negativeSeparator","Object","defineProperty","prototype","val","tokens","step","toString","split","calculatedPrecision","length","undefined","ngOnInit","formatInput","localeDecimalSeparator","toLocaleString","substring","localeThousandSeparator","thousandRegExp","RegExp","thousandSeparator","decimalSeparator","console","warn","repeat","event","interval","dir","_this","i","clearTimer","timer","setTimeout","spin","currentValue","precision","getPrecision","value","parseValue","parseFloat","toFixed","maxlength","min","max","formatValue","emit","power","Math","pow","String","round","onUpButtonMousedown","disabled","inputfieldViewChild","nativeElement","focus","updateFilledState","preventDefault","onUpButtonMouseup","onUpButtonMouseleave","onDownButtonMousedown","onDownButtonMouseup","onDownButtonMouseleave","onInputKeydown","which","onInputChange","onInput","target","onInputBlur","onInputFocus","trim","replace","parseInt","isNaN","maximumFractionDigits","join","formattedValue","clearInterval","writeValue","markForCheck","registerOnChange","fn","registerOnTouched","setDisabledState","filled","Component","args","selector","template","host","[class.ui-inputwrapper-filled]","[class.ui-inputwrapper-focus]","providers","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ElementRef","ChangeDetectorRef","Output","Input","ViewChild","NgModule","imports","CommonModule","InputTextModule","exports","declarations"],"mappings":"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","sourcesContent":["import {NgModule,Component,ElementRef,OnInit,Input,Output,EventEmitter,forwardRef,ViewChild,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {InputTextModule} from 'primeng/inputtext';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const SPINNER_VALUE_ACCESSOR: any = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => Spinner),\n    multi: true\n};\n\n@Component({\n    selector: 'p-spinner',\n    template: `\n        <span class=\"ui-spinner ui-widget ui-corner-all\">\n            <input #inputfield type=\"text\" [attr.id]=\"inputId\" [value]=\"formattedValue||null\" [attr.name]=\"name\" [attr.aria-valumin]=\"min\" [attr.aria-valuemax]=\"max\" [attr.aria-valuenow]=\"value\" [attr.aria-labelledby]=\"ariaLabelledBy\"\n            [attr.size]=\"size\" [attr.maxlength]=\"maxlength\" [attr.tabindex]=\"tabindex\" [attr.placeholder]=\"placeholder\" [disabled]=\"disabled\" [readonly]=\"readonly\" [attr.required]=\"required\"\n            (keydown)=\"onInputKeydown($event)\" (blur)=\"onInputBlur($event)\" (input)=\"onInput($event)\" (change)=\"onInputChange($event)\" (focus)=\"onInputFocus($event)\"\n            [ngStyle]=\"inputStyle\" [class]=\"inputStyleClass\" [ngClass]=\"'ui-spinner-input ui-inputtext ui-widget ui-state-default ui-corner-all'\">\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-up ui-corner-tr ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" tabindex=\"-1\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onUpButtonMouseleave($event)\" (mousedown)=\"onUpButtonMousedown($event)\" (mouseup)=\"onUpButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon pi pi-caret-up ui-clickable\"></span>\n            </button>\n            <button type=\"button\" [ngClass]=\"{'ui-spinner-button ui-spinner-down ui-corner-br ui-button ui-widget ui-state-default':true,'ui-state-disabled':disabled}\" [disabled]=\"disabled||readonly\" tabindex=\"-1\" [attr.readonly]=\"readonly\"\n                (mouseleave)=\"onDownButtonMouseleave($event)\" (mousedown)=\"onDownButtonMousedown($event)\" (mouseup)=\"onDownButtonMouseup($event)\">\n                <span class=\"ui-spinner-button-icon pi pi-caret-down ui-clickable\"></span>\n            </button>\n        </span>\n    `,\n    host: {\n        '[class.ui-inputwrapper-filled]': 'filled',\n        '[class.ui-inputwrapper-focus]': 'focus'\n    },\n    providers: [SPINNER_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None,\n    styleUrls: ['./spinner.css']\n})\nexport class Spinner implements OnInit,ControlValueAccessor {\n    \n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n    \n    @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n    @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n    @Input() min: number;\n\n    @Input() max: number;\n    \n    @Input() maxlength: number;\n    \n    @Input() size: number;\n\n    @Input() placeholder: string;\n\n    @Input() inputId: string;\n\n    @Input() disabled: boolean;\n    \n    @Input() readonly: boolean;\n\n    @Input() tabindex: number;\n            \n    @Input() required: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() inputStyle: any;\n\n    @Input() inputStyleClass: string;\n\n    @Input() formatInput: boolean;\n\n    @Input() decimalSeparator: string;\n\n    @Input() thousandSeparator: string;\n\n    @Input() precision: number;\n    \n    value: any;\n\n    _step: number = 1;\n\n    formattedValue: string;\n        \n    onModelChange: Function = () => {};\n    \n    onModelTouched: Function = () => {};\n    \n    keyPattern: RegExp = /[0-9\\+\\-]/;\n        \n    public timer: any;\n    \n    public focus: boolean;\n    \n    public filled: boolean;\n    \n    public negativeSeparator = '-';\n\n    localeDecimalSeparator: string;\n\n    localeThousandSeparator: string;\n\n    thousandRegExp: RegExp;\n\n    calculatedPrecision: number;\n    \n    @ViewChild('inputfield') inputfieldViewChild: ElementRef;\n\n    @Input() get step(): number {\n        return this._step;\n    }\n    set step(val:number) {\n        this._step = val;\n\n        if (this._step != null) {\n            let tokens = this.step.toString().split(/[,]|[.]/);\n            this.calculatedPrecision = tokens[1] ? tokens[1].length : undefined;\n        }\n    }\n    \n    constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n    ngOnInit() {\n        if (this.formatInput) {\n            this.localeDecimalSeparator = (1.1).toLocaleString().substring(1, 2);\n            this.localeThousandSeparator = (1000).toLocaleString().substring(1, 2);\n            this.thousandRegExp = new RegExp(`[${this.thousandSeparator || this.localeThousandSeparator}]`, 'gim');\n\n            if (this.decimalSeparator && this.thousandSeparator && this.decimalSeparator === this.thousandSeparator) {\n                console.warn(\"thousandSeparator and decimalSeparator cannot have the same value.\");\n            }\n        }\n    }\n\n    repeat(event: Event, interval: number, dir: number) {\n        let i = interval||500;\n\n        this.clearTimer();\n        this.timer = setTimeout(() => {\n            this.repeat(event, 40, dir);\n        }, i);\n\n        this.spin(event, dir);\n    }\n    \n    spin(event: Event, dir: number) {\n        let step = this.step * dir;\n        let currentValue: number;\n        let precision = this.getPrecision();\n\n        if (this.value)\n            currentValue = (typeof this.value === 'string') ? this.parseValue(this.value) : this.value;\n        else\n            currentValue = 0;\n        \n        if (precision)\n            this.value = parseFloat(this.toFixed(currentValue + step, precision));\n        else\n            this.value = currentValue + step;\n    \n        if (this.maxlength !== undefined && this.value.toString().length > this.maxlength) {\n            this.value = currentValue;\n        }\n    \n        if (this.min !== undefined && this.value < this.min) {\n            this.value = this.min;\n        }\n\n        if (this.max !== undefined && this.value > this.max) {\n            this.value = this.max;\n        }\n        \n        this.formatValue();\n        this.onModelChange(this.value);\n        this.onChange.emit(event);\n    }\n\n    getPrecision() {\n        return this.precision === undefined ? this.calculatedPrecision : this.precision;\n    }\n    \n    toFixed(value: number, precision: number) {\n        let power = Math.pow(10, precision||0);\n        return String(Math.round(value * power) / power);\n    }\n    \n    onUpButtonMousedown(event: Event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, 1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onUpButtonMouseup(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onUpButtonMouseleave(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMousedown(event: Event) {\n        if (!this.disabled) {\n            this.inputfieldViewChild.nativeElement.focus();\n            this.repeat(event, null, -1);\n            this.updateFilledState();\n            event.preventDefault();\n        }\n    }\n    \n    onDownButtonMouseup(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onDownButtonMouseleave(event: Event) {\n        if (!this.disabled) {\n            this.clearTimer();\n        }\n    }\n    \n    onInputKeydown(event: KeyboardEvent) {\n        if (event.which == 38) {\n            this.spin(event, 1);\n            event.preventDefault();\n        }\n        else if (event.which == 40) {\n            this.spin(event, -1);\n            event.preventDefault();\n        }\n    }\n\n    onInputChange(event: Event) {\n        this.onChange.emit(event);\n    }\n\n    onInput(event: KeyboardEvent) {\n        this.value = this.parseValue((<HTMLInputElement> event.target).value);\n        this.onModelChange(this.value);\n        this.updateFilledState();\n    }\n        \n    onInputBlur(event) {\n        this.focus = false;\n        this.formatValue();\n        this.onModelTouched();\n        this.onBlur.emit(event);\n    }\n    \n    onInputFocus(event) {\n        this.focus = true;\n        this.onFocus.emit(event);\n    }\n    \n    parseValue(val: string): number {\n        let value: number;\n        let precision = this.getPrecision();\n                \n        if (val.trim() === '') {\n            value = null;\n        }\n        else {\n            if (this.formatInput) {\n                val = val.replace(this.thousandRegExp, '');\n            }\n\n            if (precision) {\n                val = this.formatInput ? val.replace(this.decimalSeparator || this.localeDecimalSeparator, '.') : val.replace(',', '.');\n                value = parseFloat(val);\n            }\n            else {\n                value = parseInt(val, 10);\n            }\n            \n            if (!isNaN(value)) {\n                if (this.max !== null && value > this.max) {\n                    value = this.max;\n                }\n\n                if (this.min !== null && value < this.min) {\n                    value = this.min;\n                }\n            }\n            else {\n                value = null;\n            }\n        }\n        \n        return value;\n    }\n\n    formatValue() {\n        let value = this.value;\n        let precision = this.getPrecision();\n\n        if (value != null) {\n            if (this.formatInput) {\n                value = value.toLocaleString(undefined, {maximumFractionDigits: 20});\n    \n                if (this.decimalSeparator && this.thousandSeparator) {\n                    value = value.split(this.localeDecimalSeparator);\n    \n                    if (precision && value[1]) {\n                        value[1] = (this.decimalSeparator || this.localeDecimalSeparator) + value[1];\n                    }\n    \n                    if (this.thousandSeparator && value[0].length > 3) {\n                        value[0] = value[0].replace(new RegExp(`[${this.localeThousandSeparator}]`, 'gim'), this.thousandSeparator);\n                    }\n    \n                    value = value.join('');\n                }\n            }\n    \n            this.formattedValue = value.toString();\n        }\n        else {\n            this.formattedValue = null;\n        }\n\n        if (this.inputfieldViewChild && this.inputfieldViewChild.nativeElement) {\n            this.inputfieldViewChild.nativeElement.value = this.formattedValue;\n        }\n    }\n            \n    clearTimer() {\n        if (this.timer) {\n            clearInterval(this.timer);\n        }\n    }\n    \n    writeValue(value: any) : void {\n        this.value = value;\n        this.formatValue();\n        this.updateFilledState();\n        this.cd.markForCheck();\n    }\n    \n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n    \n    setDisabledState(val: boolean): void {\n        this.disabled = val;\n        this.cd.markForCheck();\n    }\n    \n    updateFilledState() {\n        this.filled = (this.value !== undefined && this.value != null);\n    }\n}\n\n\n@NgModule({\n    imports: [CommonModule,InputTextModule],\n    exports: [Spinner],\n    declarations: [Spinner]\n})\nexport class SpinnerModule { }\n"]}