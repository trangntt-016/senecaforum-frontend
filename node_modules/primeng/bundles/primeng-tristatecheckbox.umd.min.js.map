{"version":3,"sources":["../../src/app/components/tristatecheckbox/tristatecheckbox.ts"],"names":["TRISTATECHECKBOX_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","TriStateCheckbox","multi","cd","this","checkboxTrueIcon","checkboxFalseIcon","onChange","EventEmitter","onModelChange","onModelTouched","prototype","onClick","event","input","disabled","readonly","toggle","focused","focus","onKeydown","keyCode","preventDefault","onKeyup","value","undefined","emit","originalEvent","onFocus","onBlur","registerOnChange","fn","registerOnTouched","writeValue","markForCheck","setDisabledState","Component","args","selector","template","providers","changeDetection","ChangeDetectionStrategy","OnPush","encapsulation","ViewEncapsulation","None","ChangeDetectorRef","Input","Output","NgModule","imports","CommonModule","exports","declarations"],"mappings":"ieAIaA,EAAuC,CAClDC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,YAAW,WAAM,OAAAC,KAC9BC,OAAO,gBAyBL,SAAAD,EAAoBE,GAAAC,KAAAD,GAAAA,EAoBXC,KAAAC,iBAA2B,cAE3BD,KAAAE,kBAA4B,cAE3BF,KAAAG,SAA8B,IAAIC,EAAAA,aAM5CJ,KAAAK,cAA0B,aAE1BL,KAAAM,eAA2B,oBAE3BT,EAAAU,UAAAC,QAAA,SAAQC,EAAcC,GACbV,KAAKW,UAAaX,KAAKY,WACxBZ,KAAKa,OAAOJ,GACZT,KAAKc,SAAU,EACfJ,EAAMK,UAIdlB,EAAAU,UAAAS,UAAA,SAAUP,GACe,IAAjBA,EAAMQ,SACNR,EAAMS,kBAIdrB,EAAAU,UAAAY,QAAA,SAAQV,GACiB,IAAjBA,EAAMQ,SAAkBjB,KAAKY,WAC7BZ,KAAKa,OAAOJ,GACZA,EAAMS,mBAIdrB,EAAAU,UAAAM,OAAA,SAAOJ,GACe,MAAdT,KAAKoB,OAA+BC,MAAdrB,KAAKoB,MAC3BpB,KAAKoB,OAAQ,EACM,GAAdpB,KAAKoB,MACVpB,KAAKoB,OAAQ,EACM,GAAdpB,KAAKoB,QACVpB,KAAKoB,MAAQ,MAEjBpB,KAAKK,cAAcL,KAAKoB,OACxBpB,KAAKG,SAASmB,KAAK,CACfC,cAAed,EACfW,MAAOpB,KAAKoB,SAIpBvB,EAAAU,UAAAiB,QAAA,WACIxB,KAAKc,SAAU,GAGnBjB,EAAAU,UAAAkB,OAAA,WACIzB,KAAKc,SAAU,EACfd,KAAKM,kBAGTT,EAAAU,UAAAmB,iBAAA,SAAiBC,GACb3B,KAAKK,cAAgBsB,GAGzB9B,EAAAU,UAAAqB,kBAAA,SAAkBD,GACd3B,KAAKM,eAAiBqB,GAG1B9B,EAAAU,UAAAsB,WAAA,SAAWT,GACPpB,KAAKoB,MAAQA,EACbpB,KAAKD,GAAG+B,gBAGZjC,EAAAU,UAAAwB,iBAAA,SAAiBpB,GACbX,KAAKW,SAAWA,EAChBX,KAAKD,GAAG+B,yCApHfE,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,qBACVC,SAAU,8sCAcVC,UAAW,CAAC5C,GACZ6C,gBAAiBC,EAAAA,wBAAwBC,OACzCC,cAAeC,EAAAA,kBAAkBC,kDA5B2BC,EAAAA,uDAkC3DC,EAAAA,oBAEAA,EAAAA,8BAEAA,EAAAA,wBAEAA,EAAAA,uBAEAA,EAAAA,qBAEAA,EAAAA,0BAEAA,EAAAA,qBAEAA,EAAAA,wBAEAA,EAAAA,gCAEAA,EAAAA,iCAEAA,EAAAA,wBAEAC,EAAAA,gBA+EL,iCALCC,EAAAA,SAAQb,KAAA,CAAC,CACNc,QAAS,CAACC,EAAAA,cACVC,QAAS,CAACpD,GACVqD,aAAc,CAACrD","sourcesContent":["import {NgModule,Component,Input,Output,EventEmitter,forwardRef,ChangeDetectorRef,ChangeDetectionStrategy, ViewEncapsulation} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\n\nexport const TRISTATECHECKBOX_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => TriStateCheckbox),\n  multi: true\n};\n\n@Component({\n    selector: 'p-triStateCheckbox',\n    template: `\n        <div [ngStyle]=\"style\" [ngClass]=\"{'p-checkbox p-component': true,'p-checkbox-disabled': disabled, 'p-checkbox-focused': focused}\" [class]=\"styleClass\">\n            <div class=\"p-hidden-accessible\">\n                <input #input type=\"text\" [attr.id]=\"inputId\" [name]=\"name\" [attr.tabindex]=\"tabindex\" [readonly]=\"readonly\" [disabled]=\"disabled\" (keyup)=\"onKeyup($event)\" (keydown)=\"onKeydown($event)\" (focus)=\"onFocus()\" (blur)=\"onBlur()\" [attr.aria-labelledby]=\"ariaLabelledBy\" inputmode=\"none\">\n            </div>\n            <div class=\"p-checkbox-box\" (click)=\"onClick($event,input)\"  role=\"checkbox\" [attr.aria-checked]=\"value === true\"\n                [ngClass]=\"{'p-highlight':value!=null,'p-disabled':disabled,'p-focus':focused}\">\n                <span class=\"p-checkbox-icon\" [ngClass]=\"value === true ? checkboxTrueIcon : value === false ? checkboxFalseIcon : ''\"></span>\n            </div>\n        </div>\n        <label class=\"p-checkbox-label\" (click)=\"onClick($event,input)\"\n               [ngClass]=\"{'p-checkbox-label-active':value!=null, 'p-disabled':disabled, 'p-checkbox-label-focus':focused}\"\n               *ngIf=\"label\" [attr.for]=\"inputId\">{{label}}</label>\n    `,\n    providers: [TRISTATECHECKBOX_VALUE_ACCESSOR],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    encapsulation: ViewEncapsulation.None\n})\nexport class TriStateCheckbox implements ControlValueAccessor  {\n\n    constructor(private cd: ChangeDetectorRef) {}\n\n    @Input() disabled: boolean;\n\n    @Input() name: string;\n\n    @Input() ariaLabelledBy: string;\n\n    @Input() tabindex: number;\n\n    @Input() inputId: string;\n\n    @Input() style: any;\n\n    @Input() styleClass: string;\n\n    @Input() label: string;\n\n    @Input() readonly: boolean;\n\n    @Input() checkboxTrueIcon: string = 'pi pi-check';\n\n    @Input() checkboxFalseIcon: string = 'pi pi-times';\n\n    @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n    focused: boolean;\n\n    value: any;\n\n    onModelChange: Function = () => {};\n\n    onModelTouched: Function = () => {};\n\n    onClick(event: Event, input: HTMLInputElement) {\n        if (!this.disabled && !this.readonly) {\n            this.toggle(event);\n            this.focused = true;\n            input.focus();\n        }\n    }\n\n    onKeydown(event: KeyboardEvent) {\n        if (event.keyCode == 32) {\n            event.preventDefault();\n        }\n    }\n\n    onKeyup(event: KeyboardEvent) {\n        if (event.keyCode == 32 && !this.readonly) {\n            this.toggle(event);\n            event.preventDefault();\n        }\n    }\n\n    toggle(event: Event) {\n        if (this.value == null || this.value == undefined)\n            this.value = true;\n        else if (this.value == true)\n            this.value = false;\n        else if (this.value == false)\n            this.value = null;\n\n        this.onModelChange(this.value);\n        this.onChange.emit({\n            originalEvent: event,\n            value: this.value\n        })\n    }\n\n    onFocus() {\n        this.focused = true;\n    }\n\n    onBlur() {\n        this.focused = false;\n        this.onModelTouched();\n    }\n\n    registerOnChange(fn: Function): void {\n        this.onModelChange = fn;\n    }\n\n    registerOnTouched(fn: Function): void {\n        this.onModelTouched = fn;\n    }\n\n    writeValue(value: any) : void {\n        this.value = value;\n        this.cd.markForCheck();\n    }\n\n    setDisabledState(disabled: boolean): void {\n        this.disabled = disabled;\n        this.cd.markForCheck();\n    }\n}\n\n@NgModule({\n    imports: [CommonModule],\n    exports: [TriStateCheckbox],\n    declarations: [TriStateCheckbox]\n})\nexport class TriStateCheckboxModule { }\n"]}