import { OnInit, OnDestroy, AfterViewInit, AfterContentInit, EventEmitter, ElementRef, TemplateRef, QueryList, NgZone, ChangeDetectorRef, OnChanges, SimpleChanges, Renderer2 } from '@angular/core';
import { PrimeTemplate, SelectItem, PrimeNGConfig, FilterService } from 'primeng/api';
import { SortMeta } from 'primeng/api';
import { FilterMetadata } from 'primeng/api';
import { BlockableUI } from 'primeng/api';
import { Subscription } from 'rxjs';
import { CdkVirtualScrollViewport } from '@angular/cdk/scrolling';
import { AnimationEvent } from '@angular/animations';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from 'primeng/paginator';
import * as ɵngcc3 from 'primeng/inputtext';
import * as ɵngcc4 from 'primeng/dropdown';
import * as ɵngcc5 from '@angular/cdk/scrolling';
import * as ɵngcc6 from '@angular/forms';
import * as ɵngcc7 from 'primeng/button';
import * as ɵngcc8 from 'primeng/selectbutton';
import * as ɵngcc9 from 'primeng/calendar';
import * as ɵngcc10 from 'primeng/inputnumber';
import * as ɵngcc11 from 'primeng/tristatecheckbox';
import * as ɵngcc12 from 'primeng/api';
export declare class TableService {
    private sortSource;
    private selectionSource;
    private contextMenuSource;
    private valueSource;
    private totalRecordsSource;
    private columnsSource;
    private resetSource;
    sortSource$: import("rxjs").Observable<SortMeta | SortMeta[]>;
    selectionSource$: import("rxjs").Observable<unknown>;
    contextMenuSource$: import("rxjs").Observable<any>;
    valueSource$: import("rxjs").Observable<any>;
    totalRecordsSource$: import("rxjs").Observable<any>;
    columnsSource$: import("rxjs").Observable<unknown>;
    resetSource$: import("rxjs").Observable<unknown>;
    onSort(sortMeta: SortMeta | SortMeta[]): void;
    onSelectionChange(): void;
    onResetChange(): void;
    onContextMenu(data: any): void;
    onValueChange(value: any): void;
    onTotalRecordsChange(value: number): void;
    onColumnsChange(columns: any[]): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<TableService>;
}
export declare class Table implements OnInit, AfterViewInit, AfterContentInit, BlockableUI, OnChanges {
    el: ElementRef;
    zone: NgZone;
    tableService: TableService;
    cd: ChangeDetectorRef;
    filterService: FilterService;
    frozenColumns: any[];
    frozenValue: any[];
    style: any;
    styleClass: string;
    tableStyle: any;
    tableStyleClass: string;
    paginator: boolean;
    pageLinks: number;
    rowsPerPageOptions: any[];
    alwaysShowPaginator: boolean;
    paginatorPosition: string;
    paginatorDropdownAppendTo: any;
    paginatorDropdownScrollHeight: string;
    currentPageReportTemplate: string;
    showCurrentPageReport: boolean;
    showJumpToPageDropdown: boolean;
    showFirstLastIcon: boolean;
    showPageLinks: boolean;
    defaultSortOrder: number;
    sortMode: string;
    resetPageOnSort: boolean;
    selectionMode: string;
    selectionChange: EventEmitter<any>;
    contextMenuSelection: any;
    contextMenuSelectionChange: EventEmitter<any>;
    contextMenuSelectionMode: string;
    dataKey: string;
    metaKeySelection: boolean;
    rowTrackBy: Function;
    lazy: boolean;
    lazyLoadOnInit: boolean;
    compareSelectionBy: string;
    csvSeparator: string;
    exportFilename: string;
    filters: {
        [s: string]: FilterMetadata | FilterMetadata[];
    };
    globalFilterFields: string[];
    filterDelay: number;
    filterLocale: string;
    expandedRowKeys: {
        [s: string]: boolean;
    };
    editingRowKeys: {
        [s: string]: boolean;
    };
    rowExpandMode: string;
    scrollable: boolean;
    scrollHeight: string;
    virtualScroll: boolean;
    virtualScrollDelay: number;
    virtualRowHeight: number;
    frozenWidth: string;
    responsive: boolean;
    contextMenu: any;
    resizableColumns: boolean;
    columnResizeMode: string;
    reorderableColumns: boolean;
    loading: boolean;
    loadingIcon: string;
    showLoader: boolean;
    rowHover: boolean;
    customSort: boolean;
    showInitialSortBadge: boolean;
    autoLayout: boolean;
    exportFunction: any;
    stateKey: string;
    stateStorage: string;
    editMode: string;
    minBufferPx: number;
    maxBufferPx: number;
    onRowSelect: EventEmitter<any>;
    onRowUnselect: EventEmitter<any>;
    onPage: EventEmitter<any>;
    onSort: EventEmitter<any>;
    onFilter: EventEmitter<any>;
    onLazyLoad: EventEmitter<any>;
    onRowExpand: EventEmitter<any>;
    onRowCollapse: EventEmitter<any>;
    onContextMenuSelect: EventEmitter<any>;
    onColResize: EventEmitter<any>;
    onColReorder: EventEmitter<any>;
    onRowReorder: EventEmitter<any>;
    onEditInit: EventEmitter<any>;
    onEditComplete: EventEmitter<any>;
    onEditCancel: EventEmitter<any>;
    onHeaderCheckboxToggle: EventEmitter<any>;
    sortFunction: EventEmitter<any>;
    firstChange: EventEmitter<number>;
    rowsChange: EventEmitter<number>;
    onStateSave: EventEmitter<any>;
    onStateRestore: EventEmitter<any>;
    containerViewChild: ElementRef;
    resizeHelperViewChild: ElementRef;
    reorderIndicatorUpViewChild: ElementRef;
    reorderIndicatorDownViewChild: ElementRef;
    tableViewChild: ElementRef;
    scrollableViewChild: any;
    scrollableFrozenViewChild: any;
    templates: QueryList<PrimeTemplate>;
    _value: any[];
    _columns: any[];
    _totalRecords: number;
    _first: number;
    _rows: number;
    filteredValue: any[];
    headerTemplate: TemplateRef<any>;
    bodyTemplate: TemplateRef<any>;
    loadingBodyTemplate: TemplateRef<any>;
    captionTemplate: TemplateRef<any>;
    frozenRowsTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    summaryTemplate: TemplateRef<any>;
    colGroupTemplate: TemplateRef<any>;
    expandedRowTemplate: TemplateRef<any>;
    frozenExpandedRowTemplate: TemplateRef<any>;
    frozenHeaderTemplate: TemplateRef<any>;
    frozenBodyTemplate: TemplateRef<any>;
    frozenFooterTemplate: TemplateRef<any>;
    frozenColGroupTemplate: TemplateRef<any>;
    emptyMessageTemplate: TemplateRef<any>;
    paginatorLeftTemplate: TemplateRef<any>;
    paginatorRightTemplate: TemplateRef<any>;
    paginatorDropdownItemTemplate: TemplateRef<any>;
    selectionKeys: any;
    lastResizerHelperX: number;
    reorderIconWidth: number;
    reorderIconHeight: number;
    draggedColumn: any;
    draggedRowIndex: number;
    droppedRowIndex: number;
    rowDragging: boolean;
    dropPosition: number;
    editingCell: Element;
    editingCellData: any;
    editingCellField: any;
    editingCellRowIndex: number;
    editingCellClick: boolean;
    documentEditListener: any;
    _multiSortMeta: SortMeta[];
    _sortField: string;
    _sortOrder: number;
    preventSelectionSetterPropagation: boolean;
    _selection: any;
    anchorRowIndex: number;
    rangeRowIndex: number;
    filterTimeout: any;
    initialized: boolean;
    rowTouched: boolean;
    restoringSort: boolean;
    restoringFilter: boolean;
    stateRestored: boolean;
    columnOrderStateRestored: boolean;
    columnWidthsState: string;
    tableWidthState: string;
    constructor(el: ElementRef, zone: NgZone, tableService: TableService, cd: ChangeDetectorRef, filterService: FilterService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(simpleChange: SimpleChanges): void;
    get value(): any[];
    set value(val: any[]);
    get columns(): any[];
    set columns(cols: any[]);
    get first(): number;
    set first(val: number);
    get rows(): number;
    set rows(val: number);
    get totalRecords(): number;
    set totalRecords(val: number);
    get sortField(): string;
    set sortField(val: string);
    get sortOrder(): number;
    set sortOrder(val: number);
    get multiSortMeta(): SortMeta[];
    set multiSortMeta(val: SortMeta[]);
    get selection(): any;
    set selection(val: any);
    updateSelectionKeys(): void;
    onPageChange(event: any): void;
    sort(event: any): void;
    sortSingle(): void;
    sortMultiple(): void;
    multisortField(data1: any, data2: any, multiSortMeta: any, index: any): any;
    getSortMeta(field: string): SortMeta;
    isSorted(field: string): boolean;
    handleRowClick(event: any): void;
    handleRowTouchEnd(event: any): void;
    handleRowRightClick(event: any): void;
    selectRange(event: MouseEvent, rowIndex: number): void;
    clearSelectionRange(event: MouseEvent): void;
    isSelected(rowData: any): boolean;
    findIndexInSelection(rowData: any): number;
    toggleRowWithRadio(event: any, rowData: any): void;
    toggleRowWithCheckbox(event: any, rowData: any): void;
    toggleRowsWithCheckbox(event: Event, check: boolean): void;
    equals(data1: any, data2: any): boolean;
    filter(value: any, field: string, matchMode: string): void;
    filterGlobal(value: any, matchMode: any): void;
    isFilterBlank(filter: any): boolean;
    _filter(): void;
    executeLocalFilter(field: string, rowData: any, filterMeta: FilterMetadata): boolean;
    hasFilter(): boolean;
    createLazyLoadMetadata(): any;
    clear(): void;
    reset(): void;
    exportCSV(options?: any): void;
    resetScrollTop(): void;
    scrollToVirtualIndex(index: number): void;
    scrollTo(options: any): void;
    updateEditingCell(cell: any, data: any, field: any, index: any): void;
    isEditingCellValid(): boolean;
    bindDocumentEditListener(): void;
    unbindDocumentEditListener(): void;
    initRowEdit(rowData: any): void;
    saveRowEdit(rowData: any, rowElement: HTMLTableRowElement): void;
    cancelRowEdit(rowData: any): void;
    toggleRow(rowData: any, event?: Event): void;
    isRowExpanded(rowData: any): boolean;
    isRowEditing(rowData: any): boolean;
    isSingleSelectionMode(): boolean;
    isMultipleSelectionMode(): boolean;
    onColumnResizeBegin(event: any): void;
    onColumnResize(event: any): void;
    onColumnResizeEnd(event: any, column: any): void;
    setScrollableItemsWidthOnExpandResize(column: any, newColumnWidth: any, delta: any): void;
    findParentScrollableView(column: any): any;
    resizeColGroup(table: any, resizeColumnIndex: any, newColumnWidth: any, nextColumnWidth: any): void;
    onColumnDragStart(event: any, columnElement: any): void;
    onColumnDragEnter(event: any, dropHeader: any): void;
    onColumnDragLeave(event: any): void;
    onColumnDrop(event: any, dropColumn: any): void;
    onRowDragStart(event: any, index: any): void;
    onRowDragOver(event: any, index: any, rowElement: any): void;
    onRowDragLeave(event: any, rowElement: any): void;
    onRowDragEnd(event: any): void;
    onRowDrop(event: any, rowElement: any): void;
    isEmpty(): boolean;
    getBlockableElement(): HTMLElement;
    getStorage(): Storage;
    isStateful(): boolean;
    saveState(): void;
    clearState(): void;
    restoreState(): void;
    saveColumnWidths(state: any): void;
    restoreColumnWidths(): void;
    saveColumnOrder(state: any): void;
    restoreColumnOrder(): void;
    findColumnByKey(key: any): any;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<Table, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<Table, "p-table", never, { "pageLinks": "pageLinks"; "alwaysShowPaginator": "alwaysShowPaginator"; "paginatorPosition": "paginatorPosition"; "paginatorDropdownScrollHeight": "paginatorDropdownScrollHeight"; "currentPageReportTemplate": "currentPageReportTemplate"; "showFirstLastIcon": "showFirstLastIcon"; "showPageLinks": "showPageLinks"; "defaultSortOrder": "defaultSortOrder"; "sortMode": "sortMode"; "resetPageOnSort": "resetPageOnSort"; "contextMenuSelectionMode": "contextMenuSelectionMode"; "rowTrackBy": "rowTrackBy"; "lazy": "lazy"; "lazyLoadOnInit": "lazyLoadOnInit"; "compareSelectionBy": "compareSelectionBy"; "csvSeparator": "csvSeparator"; "exportFilename": "exportFilename"; "filters": "filters"; "filterDelay": "filterDelay"; "expandedRowKeys": "expandedRowKeys"; "editingRowKeys": "editingRowKeys"; "rowExpandMode": "rowExpandMode"; "virtualScrollDelay": "virtualScrollDelay"; "virtualRowHeight": "virtualRowHeight"; "columnResizeMode": "columnResizeMode"; "loadingIcon": "loadingIcon"; "showLoader": "showLoader"; "showInitialSortBadge": "showInitialSortBadge"; "stateStorage": "stateStorage"; "editMode": "editMode"; "totalRecords": "totalRecords"; "value": "value"; "columns": "columns"; "first": "first"; "rows": "rows"; "sortField": "sortField"; "sortOrder": "sortOrder"; "multiSortMeta": "multiSortMeta"; "selection": "selection"; "contextMenuSelection": "contextMenuSelection"; "frozenColumns": "frozenColumns"; "frozenValue": "frozenValue"; "style": "style"; "styleClass": "styleClass"; "tableStyle": "tableStyle"; "tableStyleClass": "tableStyleClass"; "paginator": "paginator"; "rowsPerPageOptions": "rowsPerPageOptions"; "paginatorDropdownAppendTo": "paginatorDropdownAppendTo"; "showCurrentPageReport": "showCurrentPageReport"; "showJumpToPageDropdown": "showJumpToPageDropdown"; "selectionMode": "selectionMode"; "dataKey": "dataKey"; "metaKeySelection": "metaKeySelection"; "globalFilterFields": "globalFilterFields"; "filterLocale": "filterLocale"; "scrollable": "scrollable"; "scrollHeight": "scrollHeight"; "virtualScroll": "virtualScroll"; "frozenWidth": "frozenWidth"; "responsive": "responsive"; "contextMenu": "contextMenu"; "resizableColumns": "resizableColumns"; "reorderableColumns": "reorderableColumns"; "loading": "loading"; "rowHover": "rowHover"; "customSort": "customSort"; "autoLayout": "autoLayout"; "exportFunction": "exportFunction"; "stateKey": "stateKey"; "minBufferPx": "minBufferPx"; "maxBufferPx": "maxBufferPx"; }, { "selectionChange": "selectionChange"; "contextMenuSelectionChange": "contextMenuSelectionChange"; "onRowSelect": "onRowSelect"; "onRowUnselect": "onRowUnselect"; "onPage": "onPage"; "onSort": "onSort"; "onFilter": "onFilter"; "onLazyLoad": "onLazyLoad"; "onRowExpand": "onRowExpand"; "onRowCollapse": "onRowCollapse"; "onContextMenuSelect": "onContextMenuSelect"; "onColResize": "onColResize"; "onColReorder": "onColReorder"; "onRowReorder": "onRowReorder"; "onEditInit": "onEditInit"; "onEditComplete": "onEditComplete"; "onEditCancel": "onEditCancel"; "onHeaderCheckboxToggle": "onHeaderCheckboxToggle"; "sortFunction": "sortFunction"; "firstChange": "firstChange"; "rowsChange": "rowsChange"; "onStateSave": "onStateSave"; "onStateRestore": "onStateRestore"; }, ["templates"], never>;
}
export declare class TableBody implements OnDestroy {
    dt: Table;
    tableService: TableService;
    cd: ChangeDetectorRef;
    columns: any[];
    template: TemplateRef<any>;
    frozen: boolean;
    subscription: Subscription;
    constructor(dt: Table, tableService: TableService, cd: ChangeDetectorRef);
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableBody, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableBody, "[pTableBody]", never, { "columns": "pTableBody"; "template": "pTableBodyTemplate"; "frozen": "frozen"; }, {}, never, never>;
}
export declare class ScrollableView implements AfterViewInit, OnDestroy {
    dt: Table;
    el: ElementRef;
    zone: NgZone;
    columns: any[];
    frozen: boolean;
    scrollHeaderViewChild: ElementRef;
    scrollHeaderBoxViewChild: ElementRef;
    scrollBodyViewChild: ElementRef;
    scrollTableViewChild: ElementRef;
    scrollFooterViewChild: ElementRef;
    scrollFooterBoxViewChild: ElementRef;
    scrollableAlignerViewChild: ElementRef;
    virtualScrollBody: CdkVirtualScrollViewport;
    headerScrollListener: any;
    bodyScrollListener: any;
    footerScrollListener: any;
    frozenSiblingBody: HTMLDivElement;
    preventBodyScrollPropagation: boolean;
    _scrollHeight: string;
    virtualScrollTimeout: any;
    virtualPage: number;
    get scrollHeight(): string;
    set scrollHeight(val: string);
    constructor(dt: Table, el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    bindEvents(): void;
    unbindEvents(): void;
    onHeaderScroll(): void;
    onFooterScroll(): void;
    onBodyScroll(event: any): void;
    onScrollIndexChange(index: number): void;
    getPageCount(): number;
    scrollToVirtualIndex(index: number): void;
    scrollTo(options: any): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ScrollableView, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ScrollableView, "[pScrollableView]", never, { "scrollHeight": "scrollHeight"; "columns": "pScrollableView"; "frozen": "frozen"; }, {}, never, never>;
}
export declare class SortableColumn implements OnInit, OnDestroy {
    dt: Table;
    field: string;
    pSortableColumnDisabled: boolean;
    sorted: boolean;
    sortOrder: string;
    subscription: Subscription;
    constructor(dt: Table);
    ngOnInit(): void;
    updateSortState(): void;
    onClick(event: MouseEvent): void;
    onEnterKey(event: MouseEvent): void;
    isEnabled(): boolean;
    isFilterElement(element: HTMLElement): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SortableColumn, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SortableColumn, "[pSortableColumn]", never, { "field": "pSortableColumn"; "pSortableColumnDisabled": "pSortableColumnDisabled"; }, {}, never>;
}
export declare class SortIcon implements OnInit, OnDestroy {
    dt: Table;
    cd: ChangeDetectorRef;
    field: string;
    subscription: Subscription;
    sortOrder: number;
    constructor(dt: Table, cd: ChangeDetectorRef);
    ngOnInit(): void;
    onClick(event: any): void;
    updateSortState(): void;
    getMultiSortMetaIndex(): number;
    isMultiSorted(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SortIcon, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SortIcon, "p-sortIcon", never, { "field": "field"; }, {}, never, never>;
}
export declare class SelectableRow implements OnInit, OnDestroy {
    dt: Table;
    tableService: TableService;
    data: any;
    index: number;
    pSelectableRowDisabled: boolean;
    selected: boolean;
    subscription: Subscription;
    constructor(dt: Table, tableService: TableService);
    ngOnInit(): void;
    onClick(event: Event): void;
    onTouchEnd(event: Event): void;
    onArrowDownKeyDown(event: KeyboardEvent): void;
    onArrowUpKeyDown(event: KeyboardEvent): void;
    onEnterKeyDown(event: KeyboardEvent): void;
    onPageDownKeyDown(): void;
    onSpaceKeydown(): void;
    findNextSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement;
    findPrevSelectableRow(row: HTMLTableRowElement): HTMLTableRowElement;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectableRow, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SelectableRow, "[pSelectableRow]", never, { "data": "pSelectableRow"; "index": "pSelectableRowIndex"; "pSelectableRowDisabled": "pSelectableRowDisabled"; }, {}, never>;
}
export declare class SelectableRowDblClick implements OnInit, OnDestroy {
    dt: Table;
    tableService: TableService;
    data: any;
    index: number;
    pSelectableRowDisabled: boolean;
    selected: boolean;
    subscription: Subscription;
    constructor(dt: Table, tableService: TableService);
    ngOnInit(): void;
    onClick(event: Event): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SelectableRowDblClick, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SelectableRowDblClick, "[pSelectableRowDblClick]", never, { "data": "pSelectableRowDblClick"; "index": "pSelectableRowIndex"; "pSelectableRowDisabled": "pSelectableRowDisabled"; }, {}, never>;
}
export declare class ContextMenuRow {
    dt: Table;
    tableService: TableService;
    private el;
    data: any;
    index: number;
    pContextMenuRowDisabled: boolean;
    selected: boolean;
    subscription: Subscription;
    constructor(dt: Table, tableService: TableService, el: ElementRef);
    onContextMenu(event: Event): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ContextMenuRow, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ContextMenuRow, "[pContextMenuRow]", never, { "data": "pContextMenuRow"; "index": "pContextMenuRowIndex"; "pContextMenuRowDisabled": "pContextMenuRowDisabled"; }, {}, never>;
}
export declare class RowToggler {
    dt: Table;
    data: any;
    pRowTogglerDisabled: boolean;
    constructor(dt: Table);
    onClick(event: Event): void;
    isEnabled(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<RowToggler, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<RowToggler, "[pRowToggler]", never, { "data": "pRowToggler"; "pRowTogglerDisabled": "pRowTogglerDisabled"; }, {}, never>;
}
export declare class ResizableColumn implements AfterViewInit, OnDestroy {
    dt: Table;
    el: ElementRef;
    zone: NgZone;
    pResizableColumnDisabled: boolean;
    resizer: HTMLSpanElement;
    resizerMouseDownListener: any;
    documentMouseMoveListener: any;
    documentMouseUpListener: any;
    constructor(dt: Table, el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    bindDocumentEvents(): void;
    unbindDocumentEvents(): void;
    onMouseDown(event: MouseEvent): void;
    onDocumentMouseMove(event: MouseEvent): void;
    onDocumentMouseUp(event: MouseEvent): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ResizableColumn, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ResizableColumn, "[pResizableColumn]", never, { "pResizableColumnDisabled": "pResizableColumnDisabled"; }, {}, never>;
}
export declare class ReorderableColumn implements AfterViewInit, OnDestroy {
    dt: Table;
    el: ElementRef;
    zone: NgZone;
    pReorderableColumnDisabled: boolean;
    dragStartListener: any;
    dragOverListener: any;
    dragEnterListener: any;
    dragLeaveListener: any;
    mouseDownListener: any;
    constructor(dt: Table, el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    bindEvents(): void;
    unbindEvents(): void;
    onMouseDown(event: any): void;
    onDragStart(event: any): void;
    onDragOver(event: any): void;
    onDragEnter(event: any): void;
    onDragLeave(event: any): void;
    onDrop(event: any): void;
    isEnabled(): boolean;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ReorderableColumn, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ReorderableColumn, "[pReorderableColumn]", never, { "pReorderableColumnDisabled": "pReorderableColumnDisabled"; }, {}, never>;
}
export declare class EditableColumn implements AfterViewInit {
    dt: Table;
    el: ElementRef;
    zone: NgZone;
    data: any;
    field: any;
    rowIndex: number;
    pEditableColumnDisabled: boolean;
    pFocusCellSelector: string;
    constructor(dt: Table, el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    onClick(event: MouseEvent): void;
    openCell(): void;
    closeEditingCell(completed: any, event: any): void;
    onEnterKeyDown(event: KeyboardEvent): void;
    onEscapeKeyDown(event: KeyboardEvent): void;
    onShiftKeyDown(event: KeyboardEvent): void;
    onArrowDown(event: KeyboardEvent): void;
    onArrowUp(event: KeyboardEvent): void;
    onArrowLeft(event: KeyboardEvent): void;
    onArrowRight(event: KeyboardEvent): void;
    findCell(element: any): any;
    moveToPreviousCell(event: KeyboardEvent): void;
    moveToNextCell(event: KeyboardEvent): void;
    findPreviousEditableColumn(cell: Element): any;
    findNextEditableColumn(cell: Element): any;
    findNextEditableColumnByIndex(cell: Element, index: number): Element;
    findPrevEditableColumnByIndex(cell: Element, index: number): Element;
    isEnabled(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditableColumn, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<EditableColumn, "[pEditableColumn]", never, { "data": "pEditableColumn"; "field": "pEditableColumnField"; "rowIndex": "pEditableColumnRowIndex"; "pEditableColumnDisabled": "pEditableColumnDisabled"; "pFocusCellSelector": "pFocusCellSelector"; }, {}, never>;
}
export declare class EditableRow {
    el: ElementRef;
    data: any;
    pEditableRowDisabled: boolean;
    constructor(el: ElementRef);
    isEnabled(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<EditableRow, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<EditableRow, "[pEditableRow]", never, { "data": "pEditableRow"; "pEditableRowDisabled": "pEditableRowDisabled"; }, {}, never>;
}
export declare class InitEditableRow {
    dt: Table;
    editableRow: EditableRow;
    constructor(dt: Table, editableRow: EditableRow);
    onClick(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InitEditableRow, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<InitEditableRow, "[pInitEditableRow]", never, {}, {}, never>;
}
export declare class SaveEditableRow {
    dt: Table;
    editableRow: EditableRow;
    constructor(dt: Table, editableRow: EditableRow);
    onClick(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SaveEditableRow, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<SaveEditableRow, "[pSaveEditableRow]", never, {}, {}, never>;
}
export declare class CancelEditableRow {
    dt: Table;
    editableRow: EditableRow;
    constructor(dt: Table, editableRow: EditableRow);
    onClick(event: Event): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CancelEditableRow, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<CancelEditableRow, "[pCancelEditableRow]", never, {}, {}, never>;
}
export declare class CellEditor implements AfterContentInit {
    dt: Table;
    editableColumn: EditableColumn;
    editableRow: EditableRow;
    templates: QueryList<PrimeTemplate>;
    inputTemplate: TemplateRef<any>;
    outputTemplate: TemplateRef<any>;
    constructor(dt: Table, editableColumn: EditableColumn, editableRow: EditableRow);
    ngAfterContentInit(): void;
    get editing(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<CellEditor, [null, { optional: true; }, { optional: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<CellEditor, "p-cellEditor", never, {}, {}, ["templates"], never>;
}
export declare class TableRadioButton {
    dt: Table;
    tableService: TableService;
    cd: ChangeDetectorRef;
    disabled: boolean;
    value: any;
    index: number;
    inputId: string;
    name: string;
    ariaLabel: string;
    boxViewChild: ElementRef;
    checked: boolean;
    subscription: Subscription;
    constructor(dt: Table, tableService: TableService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    onClick(event: Event): void;
    onFocus(): void;
    onBlur(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableRadioButton, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableRadioButton, "p-tableRadioButton", never, { "disabled": "disabled"; "value": "value"; "index": "index"; "inputId": "inputId"; "name": "name"; "ariaLabel": "ariaLabel"; }, {}, never, never>;
}
export declare class TableCheckbox {
    dt: Table;
    tableService: TableService;
    cd: ChangeDetectorRef;
    disabled: boolean;
    value: any;
    index: number;
    inputId: string;
    name: string;
    required: boolean;
    ariaLabel: string;
    boxViewChild: ElementRef;
    checked: boolean;
    subscription: Subscription;
    constructor(dt: Table, tableService: TableService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    onClick(event: Event): void;
    onFocus(): void;
    onBlur(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableCheckbox, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableCheckbox, "p-tableCheckbox", never, { "disabled": "disabled"; "value": "value"; "index": "index"; "inputId": "inputId"; "name": "name"; "required": "required"; "ariaLabel": "ariaLabel"; }, {}, never, never>;
}
export declare class TableHeaderCheckbox {
    dt: Table;
    tableService: TableService;
    cd: ChangeDetectorRef;
    boxViewChild: ElementRef;
    disabled: boolean;
    inputId: string;
    name: string;
    ariaLabel: string;
    checked: boolean;
    selectionChangeSubscription: Subscription;
    valueChangeSubscription: Subscription;
    constructor(dt: Table, tableService: TableService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    onClick(event: Event): void;
    onFocus(): void;
    onBlur(): void;
    isDisabled(): boolean;
    ngOnDestroy(): void;
    updateCheckedState(): boolean;
    isAllFilteredValuesChecked(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableHeaderCheckbox, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<TableHeaderCheckbox, "p-tableHeaderCheckbox", never, { "disabled": "disabled"; "inputId": "inputId"; "name": "name"; "ariaLabel": "ariaLabel"; }, {}, never, never>;
}
export declare class ReorderableRowHandle implements AfterViewInit {
    el: ElementRef;
    index: number;
    constructor(el: ElementRef);
    ngAfterViewInit(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ReorderableRowHandle, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ReorderableRowHandle, "[pReorderableRowHandle]", never, { "index": "pReorderableRowHandle"; }, {}, never>;
}
export declare class ReorderableRow implements AfterViewInit {
    dt: Table;
    el: ElementRef;
    zone: NgZone;
    index: number;
    pReorderableRowDisabled: boolean;
    mouseDownListener: any;
    dragStartListener: any;
    dragEndListener: any;
    dragOverListener: any;
    dragLeaveListener: any;
    dropListener: any;
    constructor(dt: Table, el: ElementRef, zone: NgZone);
    ngAfterViewInit(): void;
    bindEvents(): void;
    unbindEvents(): void;
    onMouseDown(event: any): void;
    onDragStart(event: any): void;
    onDragEnd(event: any): void;
    onDragOver(event: any): void;
    onDragLeave(event: any): void;
    isEnabled(): boolean;
    onDrop(event: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ReorderableRow, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<ReorderableRow, "[pReorderableRow]", never, { "index": "pReorderableRow"; "pReorderableRowDisabled": "pReorderableRowDisabled"; }, {}, never>;
}
export declare class ColumnFilterFormElement implements OnInit {
    dt: Table;
    field: string;
    type: string;
    filterConstraint: FilterMetadata;
    filterTemplate: TemplateRef<any>;
    placeholder: string;
    minFractionDigits: number;
    maxFractionDigits: number;
    prefix: string;
    suffix: string;
    locale: string;
    localeMatcher: string;
    currency: string;
    currencyDisplay: string;
    useGrouping: boolean;
    filterCallback: Function;
    constructor(dt: Table);
    ngOnInit(): void;
    onModelChange(value: any): void;
    onTextInputEnterKeyDown(event: KeyboardEvent): void;
    onNumericInputKeyDown(event: KeyboardEvent): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColumnFilterFormElement, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColumnFilterFormElement, "p-columnFilterFormElement", never, { "useGrouping": "useGrouping"; "field": "field"; "type": "type"; "filterConstraint": "filterConstraint"; "filterTemplate": "filterTemplate"; "placeholder": "placeholder"; "minFractionDigits": "minFractionDigits"; "maxFractionDigits": "maxFractionDigits"; "prefix": "prefix"; "suffix": "suffix"; "locale": "locale"; "localeMatcher": "localeMatcher"; "currency": "currency"; "currencyDisplay": "currencyDisplay"; }, {}, never, never>;
}
export declare class ColumnFilter implements AfterContentInit {
    el: ElementRef;
    dt: Table;
    renderer: Renderer2;
    config: PrimeNGConfig;
    field: string;
    type: string;
    display: string;
    showMenu: boolean;
    matchMode: string;
    operator: string;
    showOperator: boolean;
    showClearButton: boolean;
    showApplyButton: boolean;
    showMatchModes: boolean;
    showAddButton: boolean;
    hideOnClear: boolean;
    placeholder: string;
    matchModeOptions: SelectItem[];
    maxConstraints: number;
    minFractionDigits: number;
    maxFractionDigits: number;
    prefix: string;
    suffix: string;
    locale: string;
    localeMatcher: string;
    currency: string;
    currencyDisplay: string;
    useGrouping: boolean;
    icon: ElementRef;
    templates: QueryList<any>;
    constructor(el: ElementRef, dt: Table, renderer: Renderer2, config: PrimeNGConfig);
    headerTemplate: TemplateRef<any>;
    filterTemplate: TemplateRef<any>;
    footerTemplate: TemplateRef<any>;
    operatorOptions: any[];
    overlayVisible: boolean;
    overlay: HTMLElement;
    scrollHandler: any;
    documentClickListener: any;
    documentResizeListener: any;
    matchModes: SelectItem[];
    translationSubscription: Subscription;
    resetSubscription: Subscription;
    ngOnInit(): void;
    generateMatchModeOptions(): void;
    generateOperatorOptions(): void;
    ngAfterContentInit(): void;
    initFieldFilterConstraint(): void;
    onMenuMatchModeChange(value: any, filterMeta: FilterMetadata): void;
    onRowMatchModeChange(matchMode: string): void;
    onRowMatchModeKeyDown(event: KeyboardEvent): void;
    onRowClearItemClick(): void;
    isRowMatchModeSelected(matchMode: string): boolean;
    addConstraint(): void;
    removeConstraint(filterMeta: FilterMetadata): void;
    onOperatorChange(value: any): void;
    toggleMenu(): void;
    onToggleButtonKeyDown(event: KeyboardEvent): void;
    onEscape(): void;
    findNextItem(item: HTMLLIElement): any;
    findPrevItem(item: HTMLLIElement): any;
    onOverlayAnimationStart(event: AnimationEvent): void;
    getDefaultMatchMode(): string;
    getDefaultOperator(): string;
    hasRowFilter(): boolean;
    get fieldConstraints(): FilterMetadata[];
    get showRemoveIcon(): boolean;
    get showMenuButton(): boolean;
    get isShowOperator(): boolean;
    get isShowAddConstraint(): boolean;
    get applyButtonLabel(): string;
    get clearButtonLabel(): string;
    get addRuleButtonLabel(): string;
    get removeRuleButtonLabel(): string;
    get noFilterLabel(): string;
    hasFilter(): boolean;
    isOutsideClicked(event: any): boolean;
    bindDocumentClickListener(): void;
    unbindDocumentClickListener(): void;
    bindDocumentResizeListener(): void;
    unbindDocumentResizeListener(): void;
    bindScrollListener(): void;
    unbindScrollListener(): void;
    hide(): void;
    onOverlayHide(): void;
    clearFilter(): void;
    applyFilter(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ColumnFilter, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<ColumnFilter, "p-columnFilter", never, { "type": "type"; "display": "display"; "showMenu": "showMenu"; "operator": "operator"; "showOperator": "showOperator"; "showClearButton": "showClearButton"; "showApplyButton": "showApplyButton"; "showMatchModes": "showMatchModes"; "showAddButton": "showAddButton"; "hideOnClear": "hideOnClear"; "maxConstraints": "maxConstraints"; "useGrouping": "useGrouping"; "field": "field"; "matchMode": "matchMode"; "placeholder": "placeholder"; "matchModeOptions": "matchModeOptions"; "minFractionDigits": "minFractionDigits"; "maxFractionDigits": "maxFractionDigits"; "prefix": "prefix"; "suffix": "suffix"; "locale": "locale"; "localeMatcher": "localeMatcher"; "currency": "currency"; "currencyDisplay": "currencyDisplay"; }, {}, ["templates"], never>;
}
export declare class TableModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDef<TableModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<TableModule, [typeof Table, typeof SortableColumn, typeof SelectableRow, typeof RowToggler, typeof ContextMenuRow, typeof ResizableColumn, typeof ReorderableColumn, typeof EditableColumn, typeof CellEditor, typeof TableBody, typeof ScrollableView, typeof SortIcon, typeof TableRadioButton, typeof TableCheckbox, typeof TableHeaderCheckbox, typeof ReorderableRowHandle, typeof ReorderableRow, typeof SelectableRowDblClick, typeof EditableRow, typeof InitEditableRow, typeof SaveEditableRow, typeof CancelEditableRow, typeof ColumnFilter, typeof ColumnFilterFormElement], [typeof ɵngcc1.CommonModule, typeof ɵngcc2.PaginatorModule, typeof ɵngcc3.InputTextModule, typeof ɵngcc4.DropdownModule, typeof ɵngcc5.ScrollingModule, typeof ɵngcc6.FormsModule, typeof ɵngcc7.ButtonModule, typeof ɵngcc8.SelectButtonModule, typeof ɵngcc9.CalendarModule, typeof ɵngcc10.InputNumberModule, typeof ɵngcc11.TriStateCheckboxModule], [typeof Table, typeof ɵngcc12.SharedModule, typeof SortableColumn, typeof SelectableRow, typeof RowToggler, typeof ContextMenuRow, typeof ResizableColumn, typeof ReorderableColumn, typeof EditableColumn, typeof CellEditor, typeof SortIcon, typeof TableRadioButton, typeof TableCheckbox, typeof TableHeaderCheckbox, typeof ReorderableRowHandle, typeof ReorderableRow, typeof SelectableRowDblClick, typeof EditableRow, typeof InitEditableRow, typeof SaveEditableRow, typeof CancelEditableRow, typeof ɵngcc5.ScrollingModule, typeof ColumnFilter]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<TableModule>;
}

//# sourceMappingURL=table.d.ts.map