{"version":3,"file":"chips.d.ts","sources":["chips.d.ts"],"names":[],"mappings":"AAAA;AACA;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, AfterContentInit, QueryList, TemplateRef, ChangeDetectorRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nexport declare const CHIPS_VALUE_ACCESSOR: any;\nexport declare class Chips implements AfterContentInit, ControlValueAccessor {\n    el: ElementRef;\n    cd: ChangeDetectorRef;\n    style: any;\n    styleClass: string;\n    disabled: boolean;\n    field: string;\n    placeholder: string;\n    max: number;\n    ariaLabelledBy: string;\n    tabindex: number;\n    inputId: string;\n    allowDuplicate: boolean;\n    inputStyle: any;\n    inputStyleClass: any;\n    addOnTab: boolean;\n    addOnBlur: boolean;\n    separator: string;\n    onAdd: EventEmitter<any>;\n    onRemove: EventEmitter<any>;\n    onFocus: EventEmitter<any>;\n    onBlur: EventEmitter<any>;\n    onChipClick: EventEmitter<any>;\n    inputViewChild: ElementRef;\n    templates: QueryList<any>;\n    itemTemplate: TemplateRef<any>;\n    value: any;\n    onModelChange: Function;\n    onModelTouched: Function;\n    valueChanged: boolean;\n    focus: boolean;\n    filled: boolean;\n    constructor(el: ElementRef, cd: ChangeDetectorRef);\n    ngAfterContentInit(): void;\n    onClick(): void;\n    onInput(): void;\n    onPaste(event: any): void;\n    updateFilledState(): void;\n    onItemClick(event: Event, item: any): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: Function): void;\n    registerOnTouched(fn: Function): void;\n    setDisabledState(val: boolean): void;\n    resolveFieldData(data: any, field: string): any;\n    onInputFocus(event: FocusEvent): void;\n    onInputBlur(event: FocusEvent): void;\n    removeItem(event: Event, index: number): void;\n    addItem(event: Event, item: string, preventDefault: boolean): void;\n    onKeydown(event: KeyboardEvent): void;\n    updateMaxedOut(): void;\n}\nexport declare class ChipsModule {\n}\n"]}