{"version":3,"file":"auth0-angular-jwt.js","sources":["../../../projects/angular-jwt/src/lib/jwtoptions.token.ts","../../../projects/angular-jwt/src/lib/jwthelper.service.ts","../../../projects/angular-jwt/src/lib/jwt.interceptor.ts","../../../projects/angular-jwt/src/lib/angular-jwt.module.ts","../../../projects/angular-jwt/src/index.ts","../../../projects/angular-jwt/src/auth0-angular-jwt.ts"],"names":[],"mappings":";;;;;;;MAEa,WAAW,GAAG,IAAI,cAAc,CAAC,aAAa;AAC3D;ACFA;AACA,MAKa,gBAAgB;AAC7B,IAEE,YAAiC,MAAM,GAAG,IAAI;AAChD,QAAI,IAAI,CAAC,WAAW,GAAG,CAAC,MAAM,IAAI,MAAM,CAAC,WAAW,KAAK,eAAc,CAAC;AACxE,KAAG;AACH,IACS,eAAe,CAAC,GAAW;AAAI,QACpC,IAAI,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;AAC3D,QAAI,QAAQ,MAAM,CAAC,MAAM,GAAG,CAAC;AAC7B,YAAM,KAAK,CAAC,EAAE;AACd,gBAAQ,MAAM;AACd,aAAO;AACP,YAAM,KAAK,CAAC,EAAE;AACd,gBAAQ,MAAM,IAAI,IAAI,CAAC;AACvB,gBAAQ,MAAM;AACd,aAAO;AACP,YAAM,KAAK,CAAC,EAAE;AACd,gBAAQ,MAAM,IAAI,GAAG,CAAC;AACtB,gBAAQ,MAAM;AACd,aAAO;AACP,YAAM,SAAS;AACf,gBAAQ,MAAM,IAAI,KAAK,CAAC,2BAA2B,CAAC,CAAC;AACrD,aAAO;AACP,SAAK;AACL,QAAI,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;AACzC,KAAG;AACH;AAEC,IAAS,SAAS,CAAC,GAAW;AAAI,QAC/B,MAAM,KAAK,GACT,mEAAmE,CAAC;AAC1E,QAAI,IAAI,MAAM,GAAG,EAAE,CAAC;AACpB,QACI,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AACzC,QACI,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,CAAC,EAAE;AAC9B,YAAM,MAAM,IAAI,KAAK,CACb,mEAAmE,CACpE,CAAC;AACR,SAAK;AACL,QACI;AACJ;AACE,QAAI,IAAI,EAAE,GAAG,CAAC,EAAE,EAAO,EAAE,MAAW,EAAE,GAAG,GAAG,CAAC;AAC9C;AACE,SAAI,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;AAChC;AACE,QAAG,CAAC,MAAM;AACb,aAAO,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,MAAM,GAAG,MAAM;AAC/C;AACU;AAEN,gBADE,EAAE,EAAE,GAAG,CAAC,CAAC;AACf,eAAW,MAAM,IAAI,MAAM,CAAC,YAAY,CAAC,GAAG,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;AACvE,cAAU,CAAC,EACL;AACN;AACM,YAAA,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AACrC,SAAK;AACL,QAAI,OAAO,MAAM,CAAC;AAClB,KAAG;AACH,IACU,gBAAgB,CAAC,GAAQ;AACnC,QAAI,OAAO,kBAAkB,CACvB,KAAK,CAAC,SAAS,CAAC,GAAG;AACzB,aAAS,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,CAAC,CAAM;AAC1C,YAAU,OAAO,GAAG,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACvE,SAAS,CAAC;AACV,aAAS,IAAI,CAAC,EAAE,CAAC,CACZ,CAAC;AACN,KAAG;AACH,IACS,WAAW,CAAU,QAAgB,IAAI,CAAC,WAAW,EAAE;AAAI,QAChE,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,EAAE;AAChC,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,QACI,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;AACnC,QACI,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;AAC5B,YAAM,MAAM,IAAI,KAAK,CACb,wHAAwH,CACzH,CAAC;AACR,SAAK;AACL,QACI,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AACnD,QAAI,IAAI,CAAC,OAAO,EAAE;AAClB,YAAM,MAAM,IAAI,KAAK,CAAC,0BAA0B,CAAC,CAAC;AAClD,SAAK;AACL,QACI,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;AAC/B,KAAG;AACH,IACS,sBAAsB,CAC3B,QAAgB,IAAI,CAAC,WAAW,EAAE;AACnC,QACC,IAAI,OAAY,CAAC;AACrB,QAAI,OAAO,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;AACtC,QACI,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,CAAC,EAAE;AACpD,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,QACI,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;AAC7B,QAAI,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACpC,QACI,OAAO,IAAI,CAAC;AAChB,KAAG;AACH,IACS,cAAc,CACnB,QAAgB,IAAI,CAAC,WAAW,EAAE,EAClC,aAAsB;AACvB,QACC,IAAI,CAAC,KAAK,IAAI,KAAK,KAAK,EAAE,EAAE;AAChC,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL,QAAI,MAAM,IAAI,GAAG,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC;AACpD,QAAI,aAAa,GAAG,aAAa,IAAI,CAAC,CAAC;AACvC,QACI,IAAI,IAAI,KAAK,IAAI,EAAE;AACvB,YAAM,OAAO,KAAK,CAAC;AACnB,SAAK;AACL,QACI,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,GAAG,aAAa,GAAG,IAAI,CAAC,CAAC;AAC3E,KAAG;AACH,IACS,aAAa,CAClB,UAAyC,EACzC,OAAyB;AAC1B,QACC,IAAI,OAAO,UAAU,KAAK,UAAU,EAAE;AAC1C,YAAM,OAAO,UAAU,CAAC,OAAO,CAAC,CAAC;AACjC,SAAK;AACL,QACI,OAAO,UAAU,CAAC;AACtB,KAAG;AACH;4CAzIC,UAAU;gHACT;AAAC;AACU,4CAEE,MAAM,SAAC,WAAW;AAAQ;;;;;;kCAAE;AAAC;AAAC,MCKhC,cAAc;AAAG,IAY5B,YACuB,MAAW,EACzB,SAA2B,EACR,QAAkB;AAC7C,QAFQ,cAAS,GAAT,SAAS,CAAkB;AAAC,QACT,aAAQ,GAAR,QAAQ,CAAU;AAChD,QANE,kBAAa,GAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC1C,QAMI,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,WAAW,CAAC;AAC1C,QAAI,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,eAAe,CAAC;AAC3D,QAAI,IAAI,CAAC,UAAU;AACnB,YAAM,MAAM,CAAC,UAAU,IAAI,MAAM,CAAC,UAAU,KAAK,EAAE;AACnD,kBAAU,MAAM,CAAC,UAAU;AAC3B,kBAAU,SAAS,CAAC;AACpB,QAAI,IAAI,CAAC,cAAc,GAAG,MAAM,CAAC,cAAc,IAAI,EAAE,CAAC;AACtD,QAAI,IAAI,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,IAAI,EAAE,CAAC;AAC1D,QAAI,IAAI,CAAC,iBAAiB,GAAG,MAAM,CAAC,iBAAiB,IAAI,KAAK,CAAC;AAC/D,QAAI,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC,eAAe,CAAC;AAClD,KAAG;AACH,IACE,eAAe,CAAC,OAAyB;AAAI,QAC3C,MAAM,UAAU,GAAQ,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;AAChF;AAEG;AACI,QAAH,IAAI,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE;AACzD,YAAM,OAAO,IAAI,CAAC;AAClB,SAAK;AACL;AAEG,QAAC,MAAM,QAAQ,GAAG,GAAG,UAAU,CAAC,QAAQ,GACrC,UAAU,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC;AACtE,cAAU,GAAG,GAAG,UAAU,CAAC,IAAI;AAC/B,cAAU,EACN,EAAE,CAAC;AACP,QACI,QACE,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,MAAM,KACnC,OAAO,MAAM,KAAK,QAAQ;AAClC,cAAY,MAAM,KAAK,QAAQ;AAC/B,cAAY,MAAM,YAAY,MAAM;AACpC,kBAAY,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;AACjC,kBAAY,KAAK,CACV,GAAG,CAAC,CAAC,EACN;AACN,KAAG;AACH,IACE,iBAAiB,CAAC,OAAyB;AAAI,QAC7C,MAAM,YAAY,GAAQ,IAAI,GAAG,CAC/B,OAAO,CAAC,GAAG,EACX,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAC9B,CAAC;AACN,QACI,QACE,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC,KAAsB;AAC7D,YAAQ,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;AACvC,gBAAU,MAAM,WAAW,GAAQ,IAAI,GAAG,CAC9B,KAAK,EACL,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAC9B,CAAC;AACZ,gBAAU,QACE,WAAW,CAAC,QAAQ,KAAK,YAAY,CAAC,QAAQ;AAC1D,oBAAY,WAAW,CAAC,QAAQ,KAAK,YAAY,CAAC,QAAQ,EAC9C;AACZ,aAAS;AACT,YACQ,IAAI,KAAK,YAAY,MAAM,EAAE;AACrC,gBAAU,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;AACzC,aAAS;AACT,YACQ,OAAO,KAAK,CAAC;AACrB,SAAO,CAAC,GAAG,CAAC,CAAC,EACP;AACN,KAAG;AACH,IACE,kBAAkB,CAChB,KAAoB,EACpB,OAAyB,EACzB,IAAiB;AAClB,QACC,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;AAC9E,QAAI,IAAI,cAAc,GAAG,KAAK,CAAC;AAC/B,QACI,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,iBAAiB,EAAE;AAC1C,YAAM,MAAM,IAAI,KAAK,CAAC,gDAAgD,CAAC,CAAC;AACxE,SAAK;AACL,QACI,IAAI,IAAI,CAAC,eAAe,EAAE;AAC9B,YAAM,cAAc,GAAG,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC;AAC3E,SAAK;AACL,QACI,IAAI,KAAK,IAAI,cAAc,IAAI,IAAI,CAAC,eAAe,EAAE;AACzD,YAAM,OAAO,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;AAChC,SAAK;AAAC,aAAK,IAAI,KAAK,EAAE;AACtB,YAAM,OAAO,GAAG,OAAO,CAAC,KAAK,CAAC;AAC9B,gBAAQ,UAAU,EAAE;AACpB,oBAAU,CAAC,IAAI,CAAC,UAAU,GAAG,GAAG,UAAU,GAAG,KAAK,EAAE;AACpD,iBAAS;AACT,aAAO,CAAC,CAAC;AACT,SAAK;AACL,QAAI,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAChC,KAAG;AACH,IACE,SAAS,CACP,OAAyB,EACzB,IAAiB;AAClB,QACC,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE;AAC3E,YAAM,OAAO,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AAClC,SAAK;AACL,QAAI,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;AAC5C,QACI,IAAI,KAAK,YAAY,OAAO,EAAE;AAClC,YAAM,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CACrB,QAAQ,CAAC,CAAC,UAAyB;AAC3C,gBAAU,OAAO,IAAI,CAAC,kBAAkB,CAAC,UAAU,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AACpE,aAAS,CAAC,CACH,CAAC;AACR,SAAK;AAAC,aAAK;AACX,YAAM,OAAO,IAAI,CAAC,kBAAkB,CAAC,KAAK,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;AAC3D,SAAK;AACL,KAAG;AACH;0CApIC,UAAU;0GACT;AAAC;AAAwC,4CAatC,MAAM,SAAC,WAAW;AAAS,YApBvB,gBAAgB;AAAI,YAsBW,QAAQ,uBAA3C,MAAM,SAAC,QAAQ;AAAQ;;;;;;;;;kCAAE;AAAC;AAAC,MCAnB,SAAS;AACtB,IAAE,YAAoC,YAAuB;AAC7D,QAAI,IAAI,YAAY,EAAE;AACtB,YAAM,MAAM,IAAI,KAAK,CACb,4FAA4F,CAC7F,CAAC;AACR,SAAK;AACL,KAAG;AACH,IAAE,OAAO,OAAO,CAAC,OAAyB;AAAI,QAC1C,OAAO;AACX,YAAM,QAAQ,EAAE,SAAS;AACzB,YAAM,SAAS,EAAE;AACjB,gBAAQ;AACR,oBAAU,OAAO,EAAE,iBAAiB;AACpC,oBAAU,QAAQ,EAAE,cAAc;AAClC,oBAAU,KAAK,EAAE,IAAI;AACrB,iBAAS;AACT,gBAAQ,OAAO,CAAC,kBAAkB,IAAI;AACtC,oBAAU,OAAO,EAAE,WAAW;AAC9B,oBAAU,QAAQ,EAAE,OAAO,CAAC,MAAM;AAClC,iBAAS;AACT,gBAAQ,gBAAgB;AACxB,aAAO;AACP,SAAK,CAAC;AACN,KAAG;AACH;qCA1BC,QAAQ;;6CACP;AAAC;AACU,YAAuC,SAAS,uBAA9C,QAAQ,YAAI,QAAQ;AAAM;;;;;;;kCAAE;AAAC;AC/B5C;AACA;AACA;AACA;ACHA;AACA;AACA;AACA;AACA;AAC4C","sourcesContent":["import { InjectionToken } from '@angular/core';\n\nexport const JWT_OPTIONS = new InjectionToken('JWT_OPTIONS');\n","import { HttpRequest } from \"@angular/common/http\";\n// tslint:disable:no-bitwise\n\nimport { Injectable, Inject } from \"@angular/core\";\nimport { JWT_OPTIONS } from \"./jwtoptions.token\";\n\n@Injectable()\nexport class JwtHelperService {\n  tokenGetter: () => string;\n\n  constructor(@Inject(JWT_OPTIONS) config = null) {\n    this.tokenGetter = (config && config.tokenGetter) || function () {};\n  }\n\n  public urlBase64Decode(str: string): string {\n    let output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0: {\n        break;\n      }\n      case 2: {\n        output += \"==\";\n        break;\n      }\n      case 3: {\n        output += \"=\";\n        break;\n      }\n      default: {\n        throw new Error(\"Illegal base64url string!\");\n      }\n    }\n    return this.b64DecodeUnicode(output);\n  }\n\n  // credits for decoder goes to https://github.com/atk\n  private b64decode(str: string): string {\n    const chars =\n      \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n    let output = \"\";\n\n    str = String(str).replace(/=+$/, \"\");\n\n    if (str.length % 4 === 1) {\n      throw new Error(\n        \"'atob' failed: The string to be decoded is not correctly encoded.\"\n      );\n    }\n\n    for (\n      // initialize result and counters\n      let bc = 0, bs: any, buffer: any, idx = 0;\n      // get next character\n      (buffer = str.charAt(idx++));\n      // character found in table? initialize bit storage and add its ascii value;\n      ~buffer &&\n      ((bs = bc % 4 ? bs * 64 + buffer : buffer),\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4)\n        ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6))))\n        : 0\n    ) {\n      // try to find character in table (0-63, not found => -1)\n      buffer = chars.indexOf(buffer);\n    }\n    return output;\n  }\n\n  private b64DecodeUnicode(str: any) {\n    return decodeURIComponent(\n      Array.prototype.map\n        .call(this.b64decode(str), (c: any) => {\n          return \"%\" + (\"00\" + c.charCodeAt(0).toString(16)).slice(-2);\n        })\n        .join(\"\")\n    );\n  }\n\n  public decodeToken<T = any>(token: string = this.tokenGetter()): T {\n    if (!token || token === \"\") {\n      return null;\n    }\n\n    const parts = token.split(\".\");\n\n    if (parts.length !== 3) {\n      throw new Error(\n        \"The inspected token doesn't appear to be a JWT. Check to make sure it has three parts and see https://jwt.io for more.\"\n      );\n    }\n\n    const decoded = this.urlBase64Decode(parts[1]);\n    if (!decoded) {\n      throw new Error(\"Cannot decode the token.\");\n    }\n\n    return JSON.parse(decoded);\n  }\n\n  public getTokenExpirationDate(\n    token: string = this.tokenGetter()\n  ): Date | null {\n    let decoded: any;\n    decoded = this.decodeToken(token);\n\n    if (!decoded || !decoded.hasOwnProperty(\"exp\")) {\n      return null;\n    }\n\n    const date = new Date(0);\n    date.setUTCSeconds(decoded.exp);\n\n    return date;\n  }\n\n  public isTokenExpired(\n    token: string = this.tokenGetter(),\n    offsetSeconds?: number\n  ): boolean {\n    if (!token || token === \"\") {\n      return true;\n    }\n    const date = this.getTokenExpirationDate(token);\n    offsetSeconds = offsetSeconds || 0;\n\n    if (date === null) {\n      return false;\n    }\n\n    return !(date.valueOf() > new Date().valueOf() + offsetSeconds * 1000);\n  }\n\n  public getAuthScheme(\n    authScheme: Function | string | undefined,\n    request: HttpRequest<any>\n  ): string {\n    if (typeof authScheme === \"function\") {\n      return authScheme(request);\n    }\n\n    return authScheme;\n  }\n}\n","import { Injectable, Inject } from \"@angular/core\";\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n} from \"@angular/common/http\";\nimport { DOCUMENT } from \"@angular/common\";\nimport { JwtHelperService } from \"./jwthelper.service\";\nimport { JWT_OPTIONS } from \"./jwtoptions.token\";\n\nimport { mergeMap } from \"rxjs/operators\";\nimport { from, Observable } from \"rxjs\";\n\n@Injectable()\nexport class JwtInterceptor implements HttpInterceptor {\n  tokenGetter: (\n    request?: HttpRequest<any>\n  ) => string | null | Promise<string | null>;\n  headerName: string;\n  authScheme: string | ((request?: HttpRequest<any>) => string);\n  allowedDomains: Array<string | RegExp>;\n  disallowedRoutes: Array<string | RegExp>;\n  throwNoTokenError: boolean;\n  skipWhenExpired: boolean;\n  standardPorts: string[] = [\"80\", \"443\"];\n\n  constructor(\n    @Inject(JWT_OPTIONS) config: any,\n    public jwtHelper: JwtHelperService,\n    @Inject(DOCUMENT) private document: Document\n  ) {\n    this.tokenGetter = config.tokenGetter;\n    this.headerName = config.headerName || \"Authorization\";\n    this.authScheme =\n      config.authScheme || config.authScheme === \"\"\n        ? config.authScheme\n        : \"Bearer \";\n    this.allowedDomains = config.allowedDomains || [];\n    this.disallowedRoutes = config.disallowedRoutes || [];\n    this.throwNoTokenError = config.throwNoTokenError || false;\n    this.skipWhenExpired = config.skipWhenExpired;\n  }\n\n  isAllowedDomain(request: HttpRequest<any>): boolean {\n    const requestUrl: URL = new URL(request.url, this.document.location.origin);\n\n    // If the host equals the current window origin,\n    // the domain is allowed by default\n    if (requestUrl.host === this.document.location.host) {\n      return true;\n    }\n\n    // If not the current domain, check the allowed list\n    const hostName = `${requestUrl.hostname}${\n      requestUrl.port && !this.standardPorts.includes(requestUrl.port)\n        ? \":\" + requestUrl.port\n        : \"\"\n    }`;\n\n    return (\n      this.allowedDomains.findIndex((domain) =>\n        typeof domain === \"string\"\n          ? domain === hostName\n          : domain instanceof RegExp\n          ? domain.test(hostName)\n          : false\n      ) > -1\n    );\n  }\n\n  isDisallowedRoute(request: HttpRequest<any>): boolean {\n    const requestedUrl: URL = new URL(\n      request.url,\n      this.document.location.origin\n    );\n\n    return (\n      this.disallowedRoutes.findIndex((route: string | RegExp) => {\n        if (typeof route === \"string\") {\n          const parsedRoute: URL = new URL(\n            route,\n            this.document.location.origin\n          );\n          return (\n            parsedRoute.hostname === requestedUrl.hostname &&\n            parsedRoute.pathname === requestedUrl.pathname\n          );\n        }\n\n        if (route instanceof RegExp) {\n          return route.test(request.url);\n        }\n\n        return false;\n      }) > -1\n    );\n  }\n\n  handleInterception(\n    token: string | null,\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ) {\n    const authScheme = this.jwtHelper.getAuthScheme(this.authScheme, request);\n    let tokenIsExpired = false;\n\n    if (!token && this.throwNoTokenError) {\n      throw new Error(\"Could not get token from tokenGetter function.\");\n    }\n\n    if (this.skipWhenExpired) {\n      tokenIsExpired = token ? this.jwtHelper.isTokenExpired(token) : true;\n    }\n\n    if (token && tokenIsExpired && this.skipWhenExpired) {\n      request = request.clone();\n    } else if (token) {\n      request = request.clone({\n        setHeaders: {\n          [this.headerName]: `${authScheme}${token}`,\n        },\n      });\n    }\n    return next.handle(request);\n  }\n\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    if (!this.isAllowedDomain(request) || this.isDisallowedRoute(request)) {\n      return next.handle(request);\n    }\n    const token = this.tokenGetter(request);\n\n    if (token instanceof Promise) {\n      return from(token).pipe(\n        mergeMap((asyncToken: string | null) => {\n          return this.handleInterception(asyncToken, request, next);\n        })\n      );\n    } else {\n      return this.handleInterception(token, request, next);\n    }\n  }\n}\n","import {\n  NgModule,\n  ModuleWithProviders,\n  Optional,\n  SkipSelf,\n  Provider,\n} from \"@angular/core\";\nimport { HttpRequest, HTTP_INTERCEPTORS } from \"@angular/common/http\";\nimport { JwtInterceptor } from \"./jwt.interceptor\";\nimport { JWT_OPTIONS } from \"./jwtoptions.token\";\nimport { JwtHelperService } from \"./jwthelper.service\";\n\nexport interface JwtConfig {\n  tokenGetter?: (\n    request?: HttpRequest<any>\n  ) => string | null | Promise<string | null>;\n  headerName?: string;\n  authScheme?: string | ((request?: HttpRequest<any>) => string);\n  allowedDomains?: Array<string | RegExp>;\n  disallowedRoutes?: Array<string | RegExp>;\n  throwNoTokenError?: boolean;\n  skipWhenExpired?: boolean;\n}\n\nexport interface JwtModuleOptions {\n  jwtOptionsProvider?: Provider;\n  config?: JwtConfig;\n}\n\n@NgModule()\nexport class JwtModule {\n  constructor(@Optional() @SkipSelf() parentModule: JwtModule) {\n    if (parentModule) {\n      throw new Error(\n        \"JwtModule is already loaded. It should only be imported in your application's main module.\"\n      );\n    }\n  }\n  static forRoot(options: JwtModuleOptions): ModuleWithProviders<JwtModule> {\n    return {\n      ngModule: JwtModule,\n      providers: [\n        {\n          provide: HTTP_INTERCEPTORS,\n          useClass: JwtInterceptor,\n          multi: true,\n        },\n        options.jwtOptionsProvider || {\n          provide: JWT_OPTIONS,\n          useValue: options.config,\n        },\n        JwtHelperService,\n      ],\n    };\n  }\n}\n","/*\n * Public API Surface of angular-jwt\n */\n\nexport * from './lib/jwt.interceptor';\nexport * from './lib/jwthelper.service';\nexport * from './lib/jwtoptions.token';\nexport * from './lib/angular-jwt.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]}