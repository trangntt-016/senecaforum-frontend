{"version":3,"file":"jwt.interceptor.d.ts","sources":["jwt.interceptor.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from \"@angular/common/http\";\nimport { JwtHelperService } from \"./jwthelper.service\";\nimport { Observable } from \"rxjs\";\nexport declare class JwtInterceptor implements HttpInterceptor {\n    jwtHelper: JwtHelperService;\n    private document;\n    tokenGetter: (request?: HttpRequest<any>) => string | null | Promise<string | null>;\n    headerName: string;\n    authScheme: string | ((request?: HttpRequest<any>) => string);\n    allowedDomains: Array<string | RegExp>;\n    disallowedRoutes: Array<string | RegExp>;\n    throwNoTokenError: boolean;\n    skipWhenExpired: boolean;\n    standardPorts: string[];\n    constructor(config: any, jwtHelper: JwtHelperService, document: Document);\n    isAllowedDomain(request: HttpRequest<any>): boolean;\n    isDisallowedRoute(request: HttpRequest<any>): boolean;\n    handleInterception(token: string | null, request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n"]}