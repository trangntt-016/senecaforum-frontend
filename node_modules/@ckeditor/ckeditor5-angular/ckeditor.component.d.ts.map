{"version":3,"file":"ckeditor.component.d.ts","sources":["ckeditor.component.d.ts"],"names":[],"mappingssourcesContent":["/**\n * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.\n * For licensing, see LICENSE.md.\n */\nimport { NgZone, EventEmitter, AfterViewInit, OnDestroy, ElementRef } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { CKEditor5 } from './ckeditor';\nexport interface BlurEvent {\n    event: CKEditor5.EventInfo<'blur'>;\n    editor: CKEditor5.Editor;\n}\nexport interface FocusEvent {\n    event: CKEditor5.EventInfo<'focus'>;\n    editor: CKEditor5.Editor;\n}\nexport interface ChangeEvent {\n    event: CKEditor5.EventInfo<'change:data'>;\n    editor: CKEditor5.Editor;\n}\nexport declare class CKEditorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor {\n    /**\n     * The reference to the DOM element created by the component.\n     */\n    private elementRef;\n    /**\n     * The constructor of the editor to be used for the instance of the component.\n     * It can be e.g. the `ClassicEditorBuild`, `InlineEditorBuild` or some custom editor.\n     */\n    editor?: CKEditor5.EditorConstructor;\n    /**\n     * The configuration of the editor.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editorconfig-EditorConfig.html\n     * to learn more.\n     */\n    config: CKEditor5.Config;\n    /**\n     * The initial data of the editor. Useful when not using the ngModel.\n     * See https://angular.io/api/forms/NgModel to learn more.\n     */\n    data: string;\n    /**\n     * Tag name of the editor component.\n     *\n     * The default tag is 'div'.\n     */\n    tagName: string;\n    /**\n     * The context watchdog.\n     */\n    watchdog?: CKEditor5.ContextWatchdog;\n    /**\n     * When set `true`, the editor becomes read-only.\n     * See https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#member-isReadOnly\n     * to learn more.\n     */\n    set disabled(isDisabled: boolean);\n    get disabled(): boolean;\n    /**\n     * Fires when the editor is ready. It corresponds with the `editor#ready`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_core_editor_editor-Editor.html#event-ready\n     * event.\n     */\n    ready: EventEmitter<CKEditor5.Editor>;\n    /**\n     * Fires when the content of the editor has changed. It corresponds with the `editor.model.document#change`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_model_document-Document.html#event-change\n     * event.\n     */\n    change: EventEmitter<ChangeEvent>;\n    /**\n     * Fires when the editing view of the editor is blurred. It corresponds with the `editor.editing.view.document#blur`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:blur\n     * event.\n     */\n    blur: EventEmitter<BlurEvent>;\n    /**\n     * Fires when the editing view of the editor is focused. It corresponds with the `editor.editing.view.document#focus`\n     * https://ckeditor.com/docs/ckeditor5/latest/api/module_engine_view_document-Document.html#event-event:focus\n     * event.\n     */\n    focus: EventEmitter<FocusEvent>;\n    /**\n     * Fires when the editor component crashes.\n     */\n    error: EventEmitter<void>;\n    /**\n     * The instance of the editor created by this component.\n     */\n    get editorInstance(): CKEditor5.Editor | null;\n    /**\n     * The editor watchdog. It is created when the context watchdog is not passed to the component.\n     * It keeps the editor running.\n     */\n    private editorWatchdog?;\n    /**\n     * If the component is read–only before the editor instance is created, it remembers that state,\n     * so the editor can become read–only once it is ready.\n     */\n    private initiallyDisabled;\n    /**\n     * An instance of https://angular.io/api/core/NgZone to allow the interaction with the editor\n     * withing the Angular event loop.\n     */\n    private ngZone;\n    /**\n     * A callback executed when the content of the editor changes. Part of the\n     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n     *\n     * Note: Unset unless the component uses the `ngModel`.\n     */\n    private cvaOnChange?;\n    /**\n     * A callback executed when the editor has been blurred. Part of the\n     * `ControlValueAccessor` (https://angular.io/api/forms/ControlValueAccessor) interface.\n     *\n     * Note: Unset unless the component uses the `ngModel`.\n     */\n    private cvaOnTouched?;\n    /**\n     * Reference to the source element used by the editor.\n     */\n    private editorElement?;\n    /**\n     * A lock flag preventing from calling the `cvaOnChange()` during setting editor data.\n     */\n    private isEditorSettingData;\n    private id;\n    constructor(elementRef: ElementRef, ngZone: NgZone);\n    ngAfterViewInit(): void;\n    ngOnDestroy(): Promise<void>;\n    writeValue(value: string | null): void;\n    registerOnChange(callback: (data: string) => void): void;\n    registerOnTouched(callback: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    /**\n     * Creates the editor instance, sets initial editor data, then integrates\n     * the editor with the Angular component. This method does not use the `editor.setData()`\n     * because of the issue in the collaboration mode (#6).\n     */\n    private attachToWatchdog;\n    private getConfig;\n    /**\n     * Integrates the editor with the component by attaching related event listeners.\n     */\n    private setUpEditorEvents;\n}\n"]}