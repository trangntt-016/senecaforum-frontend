{"version":3,"file":"checkbox.js","sources":["../../../../../../src/material/checkbox/checkbox-config.ts","../../../../../../src/material/checkbox/checkbox.ts","../../../../../../src/material/checkbox/checkbox-required-validator.ts","../../../../../../src/material/checkbox/checkbox-module.ts","../../../../../../src/material/checkbox/public-api.ts","../../../../../../src/material/checkbox/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {InjectionToken} from '@angular/core';\nimport {ThemePalette} from '@angular/material/core';\n\n/** Default `mat-checkbox` options that can be overridden. */\nexport interface MatCheckboxDefaultOptions {\n  color?: ThemePalette;\n  clickAction?: MatCheckboxClickAction;\n}\n\n/** Injection token to be used to override the default options for `mat-checkbox`. */\nexport const MAT_CHECKBOX_DEFAULT_OPTIONS =\n    new InjectionToken<MatCheckboxDefaultOptions>('mat-checkbox-default-options', {\n      providedIn: 'root',\n      factory: MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY\n    });\n\n/** @docs-private */\nexport function MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY(): MatCheckboxDefaultOptions {\n  return {\n    color: 'accent',\n    clickAction: 'check-indeterminate',\n  };\n}\n\n/**\n * Checkbox click action when user click on input element.\n * noop: Do not toggle checked or indeterminate.\n * check: Only toggle checked status, ignore indeterminate.\n * check-indeterminate: Toggle checked status, set indeterminate to false. Default behavior.\n * undefined: Same as `check-indeterminate`.\n */\nexport type MatCheckboxClickAction = 'noop' | 'check' | 'check-indeterminate' | undefined;\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {BooleanInput, coerceBooleanProperty, NumberInput} from '@angular/cdk/coercion';\nimport {\n  AfterViewChecked,\n  Attribute,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  Inject,\n  Input,\n  NgZone,\n  OnDestroy,\n  Optional,\n  Output,\n  ViewChild,\n  ViewEncapsulation,\n  AfterViewInit,\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {\n  CanColor,\n  CanColorCtor,\n  CanDisable,\n  CanDisableCtor,\n  CanDisableRipple,\n  CanDisableRippleCtor,\n  HasTabIndex,\n  HasTabIndexCtor,\n  MatRipple,\n  mixinColor,\n  mixinDisabled,\n  mixinDisableRipple,\n  mixinTabIndex,\n} from '@angular/material/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {\n  MAT_CHECKBOX_DEFAULT_OPTIONS,\n  MatCheckboxDefaultOptions,\n  MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY,\n} from './checkbox-config';\n\n\n// Increasing integer for generating unique ids for checkbox components.\nlet nextUniqueId = 0;\n\n// Default checkbox configuration.\nconst defaults = MAT_CHECKBOX_DEFAULT_OPTIONS_FACTORY();\n\n/**\n * Provider Expression that allows mat-checkbox to register as a ControlValueAccessor.\n * This allows it to support [(ngModel)].\n * @docs-private\n */\nexport const MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR: any = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => MatCheckbox),\n  multi: true\n};\n\n/**\n * Represents the different states that require custom transitions between them.\n * @docs-private\n */\nexport const enum TransitionCheckState {\n  /** The initial state of the component before any user interaction. */\n  Init,\n  /** The state representing the component when it's becoming checked. */\n  Checked,\n  /** The state representing the component when it's becoming unchecked. */\n  Unchecked,\n  /** The state representing the component when it's becoming indeterminate. */\n  Indeterminate\n}\n\n/** Change event object emitted by MatCheckbox. */\nexport class MatCheckboxChange {\n  /** The source MatCheckbox of the event. */\n  source: MatCheckbox;\n  /** The new `checked` value of the checkbox. */\n  checked: boolean;\n}\n\n// Boilerplate for applying mixins to MatCheckbox.\n/** @docs-private */\nclass MatCheckboxBase {\n  constructor(public _elementRef: ElementRef) {}\n}\nconst _MatCheckboxMixinBase:\n    HasTabIndexCtor &\n    CanColorCtor &\n    CanDisableRippleCtor &\n    CanDisableCtor &\n    typeof MatCheckboxBase =\n        mixinTabIndex(mixinColor(mixinDisableRipple(mixinDisabled(MatCheckboxBase))));\n\n\n/**\n * A material design checkbox component. Supports all of the functionality of an HTML5 checkbox,\n * and exposes a similar API. A MatCheckbox can be either checked, unchecked, indeterminate, or\n * disabled. Note that all additional accessibility attributes are taken care of by the component,\n * so there is no need to provide them yourself. However, if you want to omit a label and still\n * have the checkbox be accessible, you may supply an [aria-label] input.\n * See: https://material.io/design/components/selection-controls.html\n */\n@Component({\n  selector: 'mat-checkbox',\n  templateUrl: 'checkbox.html',\n  styleUrls: ['checkbox.css'],\n  exportAs: 'matCheckbox',\n  host: {\n    'class': 'mat-checkbox',\n    '[id]': 'id',\n    '[attr.tabindex]': 'null',\n    '[class.mat-checkbox-indeterminate]': 'indeterminate',\n    '[class.mat-checkbox-checked]': 'checked',\n    '[class.mat-checkbox-disabled]': 'disabled',\n    '[class.mat-checkbox-label-before]': 'labelPosition == \"before\"',\n    '[class._mat-animation-noopable]': `_animationMode === 'NoopAnimations'`,\n  },\n  providers: [MAT_CHECKBOX_CONTROL_VALUE_ACCESSOR],\n  inputs: ['disableRipple', 'color', 'tabIndex'],\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatCheckbox extends _MatCheckboxMixinBase implements ControlValueAccessor,\n    AfterViewInit, AfterViewChecked, OnDestroy, CanColor, CanDisable, HasTabIndex, CanDisableRipple,\n    FocusableOption {\n\n  /**\n   * Attached to the aria-label attribute of the host element. In most cases, aria-labelledby will\n   * take precedence so this may be omitted.\n   */\n  @Input('aria-label') ariaLabel: string = '';\n\n  /**\n   * Users can specify the `aria-labelledby` attribute which will be forwarded to the input element\n   */\n  @Input('aria-labelledby') ariaLabelledby: string | null = null;\n\n  /** The 'aria-describedby' attribute is read after the element's label and field type. */\n  @Input('aria-describedby') ariaDescribedby: string;\n\n  private _uniqueId: string = `mat-checkbox-${++nextUniqueId}`;\n\n  /** A unique id for the checkbox input. If none is supplied, it will be auto-generated. */\n  @Input() id: string = this._uniqueId;\n\n  /** Returns the unique id for the visual hidden input. */\n  get inputId(): string { return `${this.id || this._uniqueId}-input`; }\n\n  /** Whether the checkbox is required. */\n  @Input()\n  get required(): boolean { return this._required; }\n  set required(value: boolean) { this._required = coerceBooleanProperty(value); }\n  private _required: boolean;\n\n  /** Whether the label should appear after or before the checkbox. Defaults to 'after' */\n  @Input() labelPosition: 'before' | 'after' = 'after';\n\n  /** Name value will be applied to the input element if present */\n  @Input() name: string | null = null;\n\n  /** Event emitted when the checkbox's `checked` value changes. */\n  @Output() readonly change: EventEmitter<MatCheckboxChange> =\n      new EventEmitter<MatCheckboxChange>();\n\n  /** Event emitted when the checkbox's `indeterminate` value changes. */\n  @Output() readonly indeterminateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The value attribute of the native input element */\n  @Input() value: string;\n\n  /** The native `<input type=\"checkbox\">` element */\n  @ViewChild('input') _inputElement: ElementRef<HTMLInputElement>;\n\n  /** Reference to the ripple instance of the checkbox. */\n  @ViewChild(MatRipple) ripple: MatRipple;\n\n  /**\n   * Called when the checkbox is blurred. Needed to properly implement ControlValueAccessor.\n   * @docs-private\n   */\n  _onTouched: () => any = () => {};\n\n  private _currentAnimationClass: string = '';\n\n  private _currentCheckState: TransitionCheckState = TransitionCheckState.Init;\n\n  private _controlValueAccessorChangeFn: (value: any) => void = () => {};\n\n  constructor(elementRef: ElementRef<HTMLElement>,\n              private _changeDetectorRef: ChangeDetectorRef,\n              private _focusMonitor: FocusMonitor,\n              private _ngZone: NgZone,\n              @Attribute('tabindex') tabIndex: string,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string,\n              @Optional() @Inject(MAT_CHECKBOX_DEFAULT_OPTIONS)\n                  private _options?: MatCheckboxDefaultOptions) {\n    super(elementRef);\n    this._options = this._options || defaults;\n    this.color = this.defaultColor = this._options.color || defaults.color;\n    this.tabIndex = parseInt(tabIndex) || 0;\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._elementRef, true).subscribe(focusOrigin => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this._onTouched();\n          this._changeDetectorRef.markForCheck();\n        });\n      }\n    });\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n\n  // TODO: Delete next major revision.\n  ngAfterViewChecked() {}\n\n  ngOnDestroy() {\n    this._focusMonitor.stopMonitoring(this._elementRef);\n  }\n\n  /**\n   * Whether the checkbox is checked.\n   */\n  @Input()\n  get checked(): boolean { return this._checked; }\n  set checked(value: boolean) {\n    if (value != this.checked) {\n      this._checked = value;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _checked: boolean = false;\n\n  /**\n   * Whether the checkbox is disabled. This fully overrides the implementation provided by\n   * mixinDisabled, but the mixin is still required because mixinTabIndex requires it.\n   */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(value: any) {\n    const newValue = coerceBooleanProperty(value);\n\n    if (newValue !== this.disabled) {\n      this._disabled = newValue;\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _disabled: boolean = false;\n\n  /**\n   * Whether the checkbox is indeterminate. This is also known as \"mixed\" mode and can be used to\n   * represent a checkbox with three states, e.g. a checkbox that represents a nested list of\n   * checkable items. Note that whenever checkbox is manually clicked, indeterminate is immediately\n   * set to false.\n   */\n  @Input()\n  get indeterminate(): boolean { return this._indeterminate; }\n  set indeterminate(value: boolean) {\n    const changed = value != this._indeterminate;\n    this._indeterminate = coerceBooleanProperty(value);\n\n    if (changed) {\n      if (this._indeterminate) {\n        this._transitionCheckState(TransitionCheckState.Indeterminate);\n      } else {\n        this._transitionCheckState(\n          this.checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n      }\n      this.indeterminateChange.emit(this._indeterminate);\n    }\n\n    this._syncIndeterminate(this._indeterminate);\n  }\n  private _indeterminate: boolean = false;\n\n  _isRippleDisabled() {\n    return this.disableRipple || this.disabled;\n  }\n\n  /** Method being called whenever the label text changes. */\n  _onLabelTextChange() {\n    // Since the event of the `cdkObserveContent` directive runs outside of the zone, the checkbox\n    // component will be only marked for check, but no actual change detection runs automatically.\n    // Instead of going back into the zone in order to trigger a change detection which causes\n    // *all* components to be checked (if explicitly marked or not using OnPush), we only trigger\n    // an explicit change detection for the checkbox view and its children.\n    this._changeDetectorRef.detectChanges();\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  writeValue(value: any) {\n    this.checked = !!value;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnChange(fn: (value: any) => void) {\n    this._controlValueAccessorChangeFn = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  registerOnTouched(fn: any) {\n    this._onTouched = fn;\n  }\n\n  // Implemented as part of ControlValueAccessor.\n  setDisabledState(isDisabled: boolean) {\n    this.disabled = isDisabled;\n  }\n\n  _getAriaChecked(): 'true' | 'false' | 'mixed' {\n    if (this.checked) {\n      return 'true';\n    }\n\n    return this.indeterminate ? 'mixed' : 'false';\n  }\n\n  private _transitionCheckState(newState: TransitionCheckState) {\n    let oldState = this._currentCheckState;\n    let element: HTMLElement = this._elementRef.nativeElement;\n\n    if (oldState === newState) {\n      return;\n    }\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.remove(this._currentAnimationClass);\n    }\n\n    this._currentAnimationClass = this._getAnimationClassForCheckStateTransition(\n        oldState, newState);\n    this._currentCheckState = newState;\n\n    if (this._currentAnimationClass.length > 0) {\n      element.classList.add(this._currentAnimationClass);\n\n      // Remove the animation class to avoid animation when the checkbox is moved between containers\n      const animationClass = this._currentAnimationClass;\n\n      this._ngZone.runOutsideAngular(() => {\n        setTimeout(() => {\n          element.classList.remove(animationClass);\n        }, 1000);\n      });\n    }\n  }\n\n  private _emitChangeEvent() {\n    const event = new MatCheckboxChange();\n    event.source = this;\n    event.checked = this.checked;\n\n    this._controlValueAccessorChangeFn(this.checked);\n    this.change.emit(event);\n\n    // Assigning the value again here is redundant, but we have to do it in case it was\n    // changed inside the `change` listener which will cause the input to be out of sync.\n    if (this._inputElement) {\n      this._inputElement.nativeElement.checked = this.checked;\n    }\n  }\n\n  /** Toggles the `checked` state of the checkbox. */\n  toggle(): void {\n    this.checked = !this.checked;\n  }\n\n  /**\n   * Event handler for checkbox input element.\n   * Toggles checked state if element is not disabled.\n   * Do not toggle on (change) event since IE doesn't fire change event when\n   *   indeterminate checkbox is clicked.\n   * @param event\n   */\n  _onInputClick(event: Event) {\n    const clickAction = this._options?.clickAction;\n\n    // We have to stop propagation for click events on the visual hidden input element.\n    // By default, when a user clicks on a label element, a generated click event will be\n    // dispatched on the associated input element. Since we are using a label element as our\n    // root container, the click event on the `checkbox` will be executed twice.\n    // The real click event will bubble up, and the generated click event also tries to bubble up.\n    // This will lead to multiple click events.\n    // Preventing bubbling for the second event will solve that issue.\n    event.stopPropagation();\n\n    // If resetIndeterminate is false, and the current state is indeterminate, do nothing on click\n    if (!this.disabled && clickAction !== 'noop') {\n      // When user manually click on the checkbox, `indeterminate` is set to false.\n      if (this.indeterminate && clickAction !== 'check') {\n\n        Promise.resolve().then(() => {\n          this._indeterminate = false;\n          this.indeterminateChange.emit(this._indeterminate);\n        });\n      }\n\n      this.toggle();\n      this._transitionCheckState(\n          this._checked ? TransitionCheckState.Checked : TransitionCheckState.Unchecked);\n\n      // Emit our custom change event if the native input emitted one.\n      // It is important to only emit it, if the native input triggered one, because\n      // we don't want to trigger a change event, when the `checked` variable changes for example.\n      this._emitChangeEvent();\n    } else if (!this.disabled && clickAction === 'noop') {\n      // Reset native input when clicked with noop. The native checkbox becomes checked after\n      // click, reset it to be align with `checked` value of `mat-checkbox`.\n      this._inputElement.nativeElement.checked = this.checked;\n      this._inputElement.nativeElement.indeterminate = this.indeterminate;\n    }\n  }\n\n  /** Focuses the checkbox. */\n  focus(origin?: FocusOrigin, options?: FocusOptions): void {\n    if (origin) {\n      this._focusMonitor.focusVia(this._inputElement, origin, options);\n    } else {\n      this._inputElement.nativeElement.focus(options);\n    }\n  }\n\n  _onInteractionEvent(event: Event) {\n    // We always have to stop propagation on the change event.\n    // Otherwise the change event, from the input element, will bubble up and\n    // emit its event object to the `change` output.\n    event.stopPropagation();\n  }\n\n  private _getAnimationClassForCheckStateTransition(\n      oldState: TransitionCheckState, newState: TransitionCheckState): string {\n    // Don't transition if animations are disabled.\n    if (this._animationMode === 'NoopAnimations') {\n      return '';\n    }\n\n    let animSuffix: string = '';\n\n    switch (oldState) {\n      case TransitionCheckState.Init:\n        // Handle edge case where user interacts with checkbox that does not have [(ngModel)] or\n        // [checked] bound to it.\n        if (newState === TransitionCheckState.Checked) {\n          animSuffix = 'unchecked-checked';\n        } else if (newState == TransitionCheckState.Indeterminate) {\n          animSuffix = 'unchecked-indeterminate';\n        } else {\n          return '';\n        }\n        break;\n      case TransitionCheckState.Unchecked:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'unchecked-checked' : 'unchecked-indeterminate';\n        break;\n      case TransitionCheckState.Checked:\n        animSuffix = newState === TransitionCheckState.Unchecked ?\n            'checked-unchecked' : 'checked-indeterminate';\n        break;\n      case TransitionCheckState.Indeterminate:\n        animSuffix = newState === TransitionCheckState.Checked ?\n            'indeterminate-checked' : 'indeterminate-unchecked';\n        break;\n    }\n\n    return `mat-checkbox-anim-${animSuffix}`;\n  }\n\n  /**\n   * Syncs the indeterminate value with the checkbox DOM node.\n   *\n   * We sync `indeterminate` directly on the DOM node, because in Ivy the check for whether a\n   * property is supported on an element boils down to `if (propName in element)`. Domino's\n   * HTMLInputElement doesn't have an `indeterminate` property so Ivy will warn during\n   * server-side rendering.\n   */\n  private _syncIndeterminate(value: boolean) {\n    const nativeCheckbox = this._inputElement;\n\n    if (nativeCheckbox) {\n      nativeCheckbox.nativeElement.indeterminate = value;\n    }\n  }\n\n  static ngAcceptInputType_disabled: BooleanInput;\n  static ngAcceptInputType_required: BooleanInput;\n  static ngAcceptInputType_disableRipple: BooleanInput;\n  static ngAcceptInputType_indeterminate: BooleanInput;\n  static ngAcceptInputType_tabIndex: NumberInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  forwardRef,\n  Provider,\n} from '@angular/core';\nimport {\n  CheckboxRequiredValidator,\n  NG_VALIDATORS,\n} from '@angular/forms';\n\nexport const MAT_CHECKBOX_REQUIRED_VALIDATOR: Provider = {\n  provide: NG_VALIDATORS,\n  useExisting: forwardRef(() => MatCheckboxRequiredValidator),\n  multi: true\n};\n\n/**\n * Validator for Material checkbox's required attribute in template-driven checkbox.\n * Current CheckboxRequiredValidator only work with `input type=checkbox` and does not\n * work with `mat-checkbox`.\n */\n@Directive({\n  selector: `mat-checkbox[required][formControlName],\n             mat-checkbox[required][formControl], mat-checkbox[required][ngModel]`,\n  providers: [MAT_CHECKBOX_REQUIRED_VALIDATOR],\n})\nexport class MatCheckboxRequiredValidator extends CheckboxRequiredValidator {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ObserversModule} from '@angular/cdk/observers';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule, MatRippleModule} from '@angular/material/core';\nimport {MatCheckbox} from './checkbox';\nimport {MatCheckboxRequiredValidator} from './checkbox-required-validator';\n\n/** This module is used by both original and MDC-based checkbox implementations. */\n@NgModule({\n  exports: [MatCheckboxRequiredValidator],\n  declarations: [MatCheckboxRequiredValidator],\n})\nexport class _MatCheckboxRequiredValidatorModule {\n}\n\n@NgModule({\n  imports: [\n    MatRippleModule, MatCommonModule, ObserversModule,\n    _MatCheckboxRequiredValidatorModule\n  ],\n  exports: [MatCheckbox, MatCommonModule, _MatCheckboxRequiredValidatorModule],\n  declarations: [MatCheckbox],\n})\nexport class MatCheckboxModule {\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './checkbox';\nexport * from './checkbox-config';\nexport * from './checkbox-module';\nexport * from './checkbox-required-validator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}