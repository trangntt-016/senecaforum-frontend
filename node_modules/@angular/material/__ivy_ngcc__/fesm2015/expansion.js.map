{"version":3,"file":"expansion.js","sources":["../../../../../../src/material/expansion/accordion-base.ts","../../../../../../src/material/expansion/expansion-animations.ts","../../../../../../src/material/expansion/expansion-panel-content.ts","../../../../../../src/material/expansion/expansion-panel.ts","../../../../../../src/material/expansion/expansion-panel-header.ts","../../../../../../src/material/expansion/accordion.ts","../../../../../../src/material/expansion/expansion-module.ts","../../../../../../src/material/expansion/public-api.ts","../../../../../../src/material/expansion/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {InjectionToken} from '@angular/core';\nimport {CdkAccordion} from '@angular/cdk/accordion';\n\n/** MatAccordion's display modes. */\nexport type MatAccordionDisplayMode = 'default' | 'flat';\n\n/** MatAccordion's toggle positions. */\nexport type MatAccordionTogglePosition = 'before' | 'after';\n\n/**\n * Base interface for a `MatAccordion`.\n * @docs-private\n */\nexport interface MatAccordionBase extends CdkAccordion {\n  /** Whether the expansion indicator should be hidden. */\n  hideToggle: boolean;\n\n  /** Display mode used for all expansion panels in the accordion. */\n  displayMode: MatAccordionDisplayMode;\n\n  /** The position of the expansion indicator. */\n  togglePosition: MatAccordionTogglePosition;\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown: (event: KeyboardEvent) => void;\n\n  /** Handles focus events on the panel headers. */\n  _handleHeaderFocus: (header: any) => void;\n}\n\n\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nexport const MAT_ACCORDION = new InjectionToken<MatAccordionBase>('MAT_ACCORDION');\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nimport {\n  animate,\n  AnimationTriggerMetadata,\n  state,\n  style,\n  transition,\n  trigger,\n} from '@angular/animations';\n\n/** Time and timing curve for expansion panel animations. */\n// Note: Keep this in sync with the Sass variable for the panel header animation.\nexport const EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nexport const matExpansionAnimations: {\n  readonly indicatorRotate: AnimationTriggerMetadata;\n  readonly bodyExpansion: AnimationTriggerMetadata;\n} = {\n  /** Animation that rotates the indicator arrow. */\n  indicatorRotate: trigger('indicatorRotate', [\n    state('collapsed, void', style({transform: 'rotate(0deg)'})),\n    state('expanded', style({transform: 'rotate(180deg)'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ]),\n  /** Animation that expands and collapses the panel content. */\n  bodyExpansion: trigger('bodyExpansion', [\n    state('collapsed, void', style({height: '0px', visibility: 'hidden'})),\n    state('expanded', style({height: '*', visibility: 'visible'})),\n    transition('expanded <=> collapsed, void => collapsed',\n      animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n  ])\n};\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Directive, TemplateRef} from '@angular/core';\n\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\n@Directive({\n  selector: 'ng-template[matExpansionPanelContent]'\n})\nexport class MatExpansionPanelContent {\n  constructor(public _template: TemplateRef<any>) {}\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {AnimationEvent} from '@angular/animations';\nimport {CdkAccordionItem} from '@angular/cdk/accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {TemplatePortal} from '@angular/cdk/portal';\nimport {DOCUMENT} from '@angular/common';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  InjectionToken,\n  Input,\n  OnChanges,\n  OnDestroy,\n  Optional,\n  Output,\n  SimpleChanges,\n  SkipSelf,\n  ViewChild,\n  ViewContainerRef,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {Subject} from 'rxjs';\nimport {distinctUntilChanged, filter, startWith, take} from 'rxjs/operators';\nimport {MatAccordionBase, MatAccordionTogglePosition, MAT_ACCORDION} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\n\n/** MatExpansionPanel's states. */\nexport type MatExpansionPanelState = 'expanded' | 'collapsed';\n\n/** Counter for generating unique element ids. */\nlet uniqueId = 0;\n\n/**\n * Object that can be used to override the default options\n * for all of the expansion panels in a module.\n */\nexport interface MatExpansionPanelDefaultOptions {\n  /** Height of the header while the panel is expanded. */\n  expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  collapsedHeight: string;\n\n  /** Whether the toggle indicator should be hidden. */\n  hideToggle: boolean;\n}\n\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nexport const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS =\n    new InjectionToken<MatExpansionPanelDefaultOptions>('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\n\n/**\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\n@Component({\n  styleUrls: ['expansion-panel.css'],\n  selector: 'mat-expansion-panel',\n  exportAs: 'matExpansionPanel',\n  templateUrl: 'expansion-panel.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  inputs: ['disabled', 'expanded'],\n  outputs: ['opened', 'closed', 'expandedChange'],\n  animations: [matExpansionAnimations.bodyExpansion],\n  providers: [\n    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n    // to the same accordion.\n    {provide: MAT_ACCORDION, useValue: undefined},\n  ],\n  host: {\n    'class': 'mat-expansion-panel',\n    '[class.mat-expanded]': 'expanded',\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[class.mat-expansion-panel-spacing]': '_hasSpacing()',\n  }\n})\nexport class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges,\n  OnDestroy {\n  private _document: Document;\n  private _hideToggle = false;\n  private _togglePosition: MatAccordionTogglePosition;\n\n  /** Whether the toggle indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean {\n    return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n  }\n  set hideToggle(value: boolean) {\n    this._hideToggle = coerceBooleanProperty(value);\n  }\n\n  /** The position of the expansion indicator. */\n  @Input()\n  get togglePosition(): MatAccordionTogglePosition {\n    return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n  }\n  set togglePosition(value: MatAccordionTogglePosition) {\n    this._togglePosition = value;\n  }\n\n  /** An event emitted after the body's expansion animation happens. */\n  @Output() afterExpand = new EventEmitter<void>();\n\n  /** An event emitted after the body's collapse animation happens. */\n  @Output() afterCollapse = new EventEmitter<void>();\n\n  /** Stream that emits for changes in `@Input` properties. */\n  readonly _inputChanges = new Subject<SimpleChanges>();\n\n  /** Optionally defined accordion the expansion panel belongs to. */\n  accordion: MatAccordionBase;\n\n  /** Content that will be rendered lazily. */\n  @ContentChild(MatExpansionPanelContent) _lazyContent: MatExpansionPanelContent;\n\n  /** Element containing the panel's user-provided content. */\n  @ViewChild('body') _body: ElementRef<HTMLElement>;\n\n  /** Portal holding the user's content. */\n  _portal: TemplatePortal;\n\n  /** ID for the associated header element. Used for a11y labelling. */\n  _headerId = `mat-expansion-panel-header-${uniqueId++}`;\n\n  /** Stream of body animation done events. */\n  _bodyAnimationDone = new Subject<AnimationEvent>();\n\n  constructor(@Optional() @SkipSelf() @Inject(MAT_ACCORDION) accordion: MatAccordionBase,\n              _changeDetectorRef: ChangeDetectorRef,\n              _uniqueSelectionDispatcher: UniqueSelectionDispatcher,\n              private _viewContainerRef: ViewContainerRef,\n              @Inject(DOCUMENT) _document: any,\n              @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode: string,\n              @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n                  defaultOptions?: MatExpansionPanelDefaultOptions) {\n    super(accordion, _changeDetectorRef, _uniqueSelectionDispatcher);\n    this.accordion = accordion;\n    this._document = _document;\n\n    // We need a Subject with distinctUntilChanged, because the `done` event\n    // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n    this._bodyAnimationDone.pipe(distinctUntilChanged((x, y) => {\n      return x.fromState === y.fromState && x.toState === y.toState;\n    })).subscribe(event => {\n      if (event.fromState !== 'void') {\n        if (event.toState === 'expanded') {\n          this.afterExpand.emit();\n        } else if (event.toState === 'collapsed') {\n          this.afterCollapse.emit();\n        }\n      }\n    });\n\n    if (defaultOptions) {\n      this.hideToggle = defaultOptions.hideToggle;\n    }\n  }\n\n  /** Determines whether the expansion panel should have spacing between it and its siblings. */\n  _hasSpacing(): boolean {\n    if (this.accordion) {\n      return this.expanded && this.accordion.displayMode === 'default';\n    }\n    return false;\n  }\n\n  /** Gets the expanded state string. */\n  _getExpandedState(): MatExpansionPanelState {\n    return this.expanded ? 'expanded' : 'collapsed';\n  }\n\n  /** Toggles the expanded state of the expansion panel. */\n  toggle(): void {\n    this.expanded = !this.expanded;\n  }\n\n  /** Sets the expanded state of the expansion panel to false. */\n  close(): void {\n    this.expanded = false;\n  }\n\n  /** Sets the expanded state of the expansion panel to true. */\n  open(): void {\n    this.expanded = true;\n  }\n\n  ngAfterContentInit() {\n    if (this._lazyContent) {\n      // Render the content as soon as the panel becomes open.\n      this.opened.pipe(\n        startWith(null),\n        filter(() => this.expanded && !this._portal),\n        take(1)\n      ).subscribe(() => {\n        this._portal = new TemplatePortal(this._lazyContent._template, this._viewContainerRef);\n      });\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._inputChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._bodyAnimationDone.complete();\n    this._inputChanges.complete();\n  }\n\n  /** Checks whether the expansion panel's content contains the currently-focused element. */\n  _containsFocus(): boolean {\n    if (this._body) {\n      const focusedElement = this._document.activeElement;\n      const bodyElement = this._body.nativeElement;\n      return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n    }\n\n    return false;\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n\n/**\n * Actions of a `<mat-expansion-panel>`.\n */\n@Directive({\n  selector: 'mat-action-row',\n  host: {\n    class: 'mat-action-row'\n  }\n})\nexport class MatExpansionPanelActionRow {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {FocusableOption, FocusMonitor, FocusOrigin} from '@angular/cdk/a11y';\nimport {ENTER, hasModifierKey, SPACE} from '@angular/cdk/keycodes';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  Directive,\n  ElementRef,\n  Host,\n  Inject,\n  Input,\n  OnDestroy,\n  Optional,\n  ViewEncapsulation,\n} from '@angular/core';\nimport {ANIMATION_MODULE_TYPE} from '@angular/platform-browser/animations';\nimport {EMPTY, merge, Subscription} from 'rxjs';\nimport {filter} from 'rxjs/operators';\nimport {MatAccordionTogglePosition} from './accordion-base';\nimport {matExpansionAnimations} from './expansion-animations';\nimport {\n  MatExpansionPanel,\n  MatExpansionPanelDefaultOptions,\n  MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,\n} from './expansion-panel';\n\n\n/**\n * Header element of a `<mat-expansion-panel>`.\n */\n@Component({\n  selector: 'mat-expansion-panel-header',\n  styleUrls: ['expansion-panel-header.css'],\n  templateUrl: 'expansion-panel-header.html',\n  encapsulation: ViewEncapsulation.None,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  animations: [\n    matExpansionAnimations.indicatorRotate,\n  ],\n  host: {\n    'class': 'mat-expansion-panel-header mat-focus-indicator',\n    'role': 'button',\n    '[attr.id]': 'panel._headerId',\n    '[attr.tabindex]': 'disabled ? -1 : 0',\n    '[attr.aria-controls]': '_getPanelId()',\n    '[attr.aria-expanded]': '_isExpanded()',\n    '[attr.aria-disabled]': 'panel.disabled',\n    '[class.mat-expanded]': '_isExpanded()',\n    '[class.mat-expansion-toggle-indicator-after]': `_getTogglePosition() === 'after'`,\n    '[class.mat-expansion-toggle-indicator-before]': `_getTogglePosition() === 'before'`,\n    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n    '[style.height]': '_getHeaderHeight()',\n    '(click)': '_toggle()',\n    '(keydown)': '_keydown($event)',\n  },\n})\nexport class MatExpansionPanelHeader implements AfterViewInit, OnDestroy, FocusableOption {\n  private _parentChangeSubscription = Subscription.EMPTY;\n\n  constructor(\n      @Host() public panel: MatExpansionPanel,\n      private _element: ElementRef,\n      private _focusMonitor: FocusMonitor,\n      private _changeDetectorRef: ChangeDetectorRef,\n      @Inject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS) @Optional()\n          defaultOptions?: MatExpansionPanelDefaultOptions,\n      @Optional() @Inject(ANIMATION_MODULE_TYPE) public _animationMode?: string) {\n    const accordionHideToggleChange = panel.accordion ?\n        panel.accordion._stateChanges.pipe(\n            filter(changes => !!(changes['hideToggle'] || changes['togglePosition']))) :\n        EMPTY;\n\n    // Since the toggle state depends on an @Input on the panel, we\n    // need to subscribe and trigger change detection manually.\n    this._parentChangeSubscription =\n        merge(\n            panel.opened, panel.closed, accordionHideToggleChange,\n            panel._inputChanges.pipe(filter(\n                changes => {\n                  return !!(\n                    changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n                  })))\n    .subscribe(() => this._changeDetectorRef.markForCheck());\n\n    // Avoids focus being lost if the panel contained the focused element and was closed.\n    panel.closed\n      .pipe(filter(() => panel._containsFocus()))\n      .subscribe(() => _focusMonitor.focusVia(_element, 'program'));\n\n    if (defaultOptions) {\n      this.expandedHeight = defaultOptions.expandedHeight;\n      this.collapsedHeight = defaultOptions.collapsedHeight;\n    }\n  }\n\n  /** Height of the header while the panel is expanded. */\n  @Input() expandedHeight: string;\n\n  /** Height of the header while the panel is collapsed. */\n  @Input() collapsedHeight: string;\n\n  /**\n   * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n   * @docs-private\n   */\n  get disabled() {\n    return this.panel.disabled;\n  }\n\n  /** Toggles the expanded state of the panel. */\n  _toggle(): void {\n    if (!this.disabled) {\n      this.panel.toggle();\n    }\n  }\n\n  /** Gets whether the panel is expanded. */\n  _isExpanded(): boolean {\n    return this.panel.expanded;\n  }\n\n  /** Gets the expanded state string of the panel. */\n  _getExpandedState(): string {\n    return this.panel._getExpandedState();\n  }\n\n  /** Gets the panel id. */\n  _getPanelId(): string {\n    return this.panel.id;\n  }\n\n  /** Gets the toggle position for the header. */\n  _getTogglePosition(): MatAccordionTogglePosition {\n    return this.panel.togglePosition;\n  }\n\n  /** Gets whether the expand indicator should be shown. */\n  _showToggle(): boolean {\n    return !this.panel.hideToggle && !this.panel.disabled;\n  }\n\n  /**\n   * Gets the current height of the header. Null if no custom height has been\n   * specified, and if the default height from the stylesheet should be used.\n   */\n  _getHeaderHeight(): string|null {\n    const isExpanded = this._isExpanded();\n    if (isExpanded && this.expandedHeight) {\n      return this.expandedHeight;\n    } else if (!isExpanded && this.collapsedHeight) {\n      return this.collapsedHeight;\n    }\n    return null;\n  }\n\n  /** Handle keydown event calling to toggle() if appropriate. */\n  _keydown(event: KeyboardEvent) {\n    switch (event.keyCode) {\n      // Toggle for space and enter keys.\n      case SPACE:\n      case ENTER:\n        if (!hasModifierKey(event)) {\n          event.preventDefault();\n          this._toggle();\n        }\n\n        break;\n      default:\n        if (this.panel.accordion) {\n          this.panel.accordion._handleHeaderKeydown(event);\n        }\n\n        return;\n    }\n  }\n\n  /**\n   * Focuses the panel header. Implemented as a part of `FocusableOption`.\n   * @param origin Origin of the action that triggered the focus.\n   * @docs-private\n   */\n  focus(origin?: FocusOrigin, options?: FocusOptions) {\n    if (origin) {\n      this._focusMonitor.focusVia(this._element, origin, options);\n    } else {\n      this._element.nativeElement.focus(options);\n    }\n  }\n\n  ngAfterViewInit() {\n    this._focusMonitor.monitor(this._element).subscribe(origin => {\n      if (origin && this.panel.accordion) {\n        this.panel.accordion._handleHeaderFocus(this);\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this._parentChangeSubscription.unsubscribe();\n    this._focusMonitor.stopMonitoring(this._element);\n  }\n}\n\n/**\n * Description element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-description',\n  host: {\n    class: 'mat-expansion-panel-header-description'\n  }\n})\nexport class MatExpansionPanelDescription {}\n\n/**\n * Title element of a `<mat-expansion-panel-header>`.\n */\n@Directive({\n  selector: 'mat-panel-title',\n  host: {\n    class: 'mat-expansion-panel-header-title'\n  }\n})\nexport class MatExpansionPanelTitle {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Directive,\n  Input,\n  ContentChildren,\n  QueryList,\n  AfterContentInit,\n  OnDestroy,\n} from '@angular/core';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {CdkAccordion} from '@angular/cdk/accordion';\nimport {FocusKeyManager} from '@angular/cdk/a11y';\nimport {startWith} from 'rxjs/operators';\nimport {\n  MAT_ACCORDION,\n  MatAccordionBase,\n  MatAccordionDisplayMode,\n  MatAccordionTogglePosition\n} from './accordion-base';\nimport {MatExpansionPanelHeader} from './expansion-panel-header';\n\n/**\n * Directive for a Material Design Accordion.\n */\n@Directive({\n  selector: 'mat-accordion',\n  exportAs: 'matAccordion',\n  inputs: ['multi'],\n  providers: [{\n    provide: MAT_ACCORDION,\n    useExisting: MatAccordion\n  }],\n  host: {\n    class: 'mat-accordion',\n    // Class binding which is only used by the test harness as there is no other\n    // way for the harness to detect if multiple panel support is enabled.\n    '[class.mat-accordion-multi]': 'this.multi',\n  }\n})\nexport class MatAccordion extends CdkAccordion implements MatAccordionBase,\n  AfterContentInit, OnDestroy {\n  private _keyManager: FocusKeyManager<MatExpansionPanelHeader>;\n\n  /** Headers belonging to this accordion. */\n  private _ownHeaders = new QueryList<MatExpansionPanelHeader>();\n\n  /** All headers inside the accordion. Includes headers inside nested accordions. */\n  @ContentChildren(MatExpansionPanelHeader, {descendants: true})\n  _headers: QueryList<MatExpansionPanelHeader>;\n\n  /** Whether the expansion indicator should be hidden. */\n  @Input()\n  get hideToggle(): boolean { return this._hideToggle; }\n  set hideToggle(show: boolean) { this._hideToggle = coerceBooleanProperty(show); }\n  private _hideToggle: boolean = false;\n\n  /**\n   * Display mode used for all expansion panels in the accordion. Currently two display\n   * modes exist:\n   *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n   *     panel at a different elevation from the rest of the accordion.\n   *  flat - no spacing is placed around expanded panels, showing all panels at the same\n   *     elevation.\n   */\n  @Input() displayMode: MatAccordionDisplayMode = 'default';\n\n  /** The position of the expansion indicator. */\n  @Input() togglePosition: MatAccordionTogglePosition = 'after';\n\n  ngAfterContentInit() {\n    this._headers.changes\n      .pipe(startWith(this._headers))\n      .subscribe((headers: QueryList<MatExpansionPanelHeader>) => {\n        this._ownHeaders.reset(headers.filter(header => header.panel.accordion === this));\n        this._ownHeaders.notifyOnChanges();\n      });\n\n    this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap().withHomeAndEnd();\n  }\n\n  /** Handles keyboard events coming in from the panel headers. */\n  _handleHeaderKeydown(event: KeyboardEvent) {\n    this._keyManager.onKeydown(event);\n  }\n\n  _handleHeaderFocus(header: MatExpansionPanelHeader) {\n    this._keyManager.updateActiveItem(header);\n  }\n\n  ngOnDestroy() {\n    super.ngOnDestroy();\n    this._ownHeaders.destroy();\n  }\n\n  static ngAcceptInputType_hideToggle: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CdkAccordionModule} from '@angular/cdk/accordion';\nimport {PortalModule} from '@angular/cdk/portal';\nimport {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {MatCommonModule} from '@angular/material/core';\nimport {MatAccordion} from './accordion';\nimport {MatExpansionPanel, MatExpansionPanelActionRow} from './expansion-panel';\nimport {MatExpansionPanelContent} from './expansion-panel-content';\nimport {\n  MatExpansionPanelDescription,\n  MatExpansionPanelHeader,\n  MatExpansionPanelTitle,\n} from './expansion-panel-header';\n\n\n@NgModule({\n  imports: [CommonModule, MatCommonModule, CdkAccordionModule, PortalModule],\n  exports: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n  declarations: [\n    MatAccordion,\n    MatExpansionPanel,\n    MatExpansionPanelActionRow,\n    MatExpansionPanelHeader,\n    MatExpansionPanelTitle,\n    MatExpansionPanelDescription,\n    MatExpansionPanelContent,\n  ],\n})\nexport class MatExpansionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport * from './expansion-module';\nexport * from './accordion';\nexport * from './accordion-base';\nexport * from './expansion-panel';\nexport * from './expansion-panel-header';\nexport * from './expansion-panel-content';\nexport * from './expansion-animations';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]}