{"version":3,"file":"expansion-panel.d.ts","sources":["expansion-panel.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { AnimationEvent } from '@angular/animations';\r\nimport { CdkAccordionItem } from '@angular/cdk/accordion';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\nimport { TemplatePortal } from '@angular/cdk/portal';\r\nimport { AfterContentInit, ChangeDetectorRef, ElementRef, EventEmitter, InjectionToken, OnChanges, OnDestroy, SimpleChanges, ViewContainerRef } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\nimport { MatAccordionBase, MatAccordionTogglePosition } from './accordion-base';\r\nimport { MatExpansionPanelContent } from './expansion-panel-content';\r\n/** MatExpansionPanel's states. */\r\nexport declare type MatExpansionPanelState = 'expanded' | 'collapsed';\r\n/**\r\n * Object that can be used to override the default options\r\n * for all of the expansion panels in a module.\r\n */\r\nexport interface MatExpansionPanelDefaultOptions {\r\n    /** Height of the header while the panel is expanded. */\r\n    expandedHeight: string;\r\n    /** Height of the header while the panel is collapsed. */\r\n    collapsedHeight: string;\r\n    /** Whether the toggle indicator should be hidden. */\r\n    hideToggle: boolean;\r\n}\r\n/**\r\n * Injection token that can be used to configure the defalt\r\n * options for the expansion panel component.\r\n */\r\nexport declare const MAT_EXPANSION_PANEL_DEFAULT_OPTIONS: InjectionToken<MatExpansionPanelDefaultOptions>;\r\n/**\r\n * This component can be used as a single element to show expandable content, or as one of\r\n * multiple children of an element with the MatAccordion directive attached.\r\n */\r\nexport declare class MatExpansionPanel extends CdkAccordionItem implements AfterContentInit, OnChanges, OnDestroy {\r\n    private _viewContainerRef;\r\n    _animationMode: string;\r\n    private _document;\r\n    private _hideToggle;\r\n    private _togglePosition;\r\n    /** Whether the toggle indicator should be hidden. */\r\n    get hideToggle(): boolean;\r\n    set hideToggle(value: boolean);\r\n    /** The position of the expansion indicator. */\r\n    get togglePosition(): MatAccordionTogglePosition;\r\n    set togglePosition(value: MatAccordionTogglePosition);\r\n    /** An event emitted after the body's expansion animation happens. */\r\n    afterExpand: EventEmitter<void>;\r\n    /** An event emitted after the body's collapse animation happens. */\r\n    afterCollapse: EventEmitter<void>;\r\n    /** Stream that emits for changes in `@Input` properties. */\r\n    readonly _inputChanges: Subject<SimpleChanges>;\r\n    /** Optionally defined accordion the expansion panel belongs to. */\r\n    accordion: MatAccordionBase;\r\n    /** Content that will be rendered lazily. */\r\n    _lazyContent: MatExpansionPanelContent;\r\n    /** Element containing the panel's user-provided content. */\r\n    _body: ElementRef<HTMLElement>;\r\n    /** Portal holding the user's content. */\r\n    _portal: TemplatePortal;\r\n    /** ID for the associated header element. Used for a11y labelling. */\r\n    _headerId: string;\r\n    /** Stream of body animation done events. */\r\n    _bodyAnimationDone: Subject<AnimationEvent>;\r\n    constructor(accordion: MatAccordionBase, _changeDetectorRef: ChangeDetectorRef, _uniqueSelectionDispatcher: UniqueSelectionDispatcher, _viewContainerRef: ViewContainerRef, _document: any, _animationMode: string, defaultOptions?: MatExpansionPanelDefaultOptions);\r\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\r\n    _hasSpacing(): boolean;\r\n    /** Gets the expanded state string. */\r\n    _getExpandedState(): MatExpansionPanelState;\r\n    /** Toggles the expanded state of the expansion panel. */\r\n    toggle(): void;\r\n    /** Sets the expanded state of the expansion panel to false. */\r\n    close(): void;\r\n    /** Sets the expanded state of the expansion panel to true. */\r\n    open(): void;\r\n    ngAfterContentInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\r\n    _containsFocus(): boolean;\r\n    static ngAcceptInputType_hideToggle: BooleanInput;\r\n    static ngAcceptInputType_expanded: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n/**\r\n * Actions of a `<mat-expansion-panel>`.\r\n */\r\nexport declare class MatExpansionPanelActionRow {\r\n}\r\n"]}