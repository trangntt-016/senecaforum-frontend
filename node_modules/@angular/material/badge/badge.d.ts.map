{"version":3,"file":"badge.d.ts","sources":["badge.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { AriaDescriber } from '@angular/cdk/a11y';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\nimport { ElementRef, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { CanDisable, CanDisableCtor, ThemePalette } from '@angular/material/core';\r\n/** @docs-private */\r\ndeclare class MatBadgeBase {\r\n}\r\ndeclare const _MatBadgeMixinBase: CanDisableCtor & typeof MatBadgeBase;\r\n/** Allowed position options for matBadgePosition */\r\nexport declare type MatBadgePosition = 'above after' | 'above before' | 'below before' | 'below after' | 'before' | 'after' | 'above' | 'below';\r\n/** Allowed size options for matBadgeSize */\r\nexport declare type MatBadgeSize = 'small' | 'medium' | 'large';\r\n/** Directive to display a text badge. */\r\nexport declare class MatBadge extends _MatBadgeMixinBase implements OnDestroy, OnChanges, CanDisable {\r\n    private _ngZone;\r\n    private _elementRef;\r\n    private _ariaDescriber;\r\n    private _renderer;\r\n    private _animationMode?;\r\n    /** Whether the badge has any content. */\r\n    _hasContent: boolean;\r\n    /** The color of the badge. Can be `primary`, `accent`, or `warn`. */\r\n    get color(): ThemePalette;\r\n    set color(value: ThemePalette);\r\n    private _color;\r\n    /** Whether the badge should overlap its contents or not */\r\n    get overlap(): boolean;\r\n    set overlap(val: boolean);\r\n    private _overlap;\r\n    /**\r\n     * Position the badge should reside.\r\n     * Accepts any combination of 'above'|'below' and 'before'|'after'\r\n     */\r\n    position: MatBadgePosition;\r\n    /** The content for the badge */\r\n    content: string | number | undefined | null;\r\n    /** Message used to describe the decorated element via aria-describedby */\r\n    get description(): string;\r\n    set description(newDescription: string);\r\n    private _description;\r\n    /** Size of the badge. Can be 'small', 'medium', or 'large'. */\r\n    size: MatBadgeSize;\r\n    /** Whether the badge is hidden. */\r\n    get hidden(): boolean;\r\n    set hidden(val: boolean);\r\n    private _hidden;\r\n    /** Unique id for the badge */\r\n    _id: number;\r\n    private _badgeElement;\r\n    constructor(_ngZone: NgZone, _elementRef: ElementRef<HTMLElement>, _ariaDescriber: AriaDescriber, _renderer: Renderer2, _animationMode?: string | undefined);\r\n    /** Whether the badge is above the host or not */\r\n    isAbove(): boolean;\r\n    /** Whether the badge is after the host or not */\r\n    isAfter(): boolean;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    ngOnDestroy(): void;\r\n    /**\r\n     * Gets the element into which the badge's content is being rendered.\r\n     * Undefined if the element hasn't been created (e.g. if the badge doesn't have content).\r\n     */\r\n    getBadgeElement(): HTMLElement | undefined;\r\n    /** Injects a span element into the DOM with the content. */\r\n    private _updateTextContent;\r\n    /** Creates the badge element */\r\n    private _createBadgeElement;\r\n    /** Sets the aria-label property on the element */\r\n    private _updateHostAriaDescription;\r\n    /** Adds css theme class given the color to the component host */\r\n    private _setColor;\r\n    /** Clears any existing badges that might be left over from server-side rendering. */\r\n    private _clearExistingBadges;\r\n    /** Gets the string representation of the badge content. */\r\n    private _stringifyContent;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n    static ngAcceptInputType_hidden: BooleanInput;\r\n    static ngAcceptInputType_overlap: BooleanInput;\r\n}\r\nexport {};\r\n"]}