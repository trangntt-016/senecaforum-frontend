{"version":3,"file":"accordion-item.d.ts","sources":["accordion-item.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { EventEmitter, OnDestroy, ChangeDetectorRef } from '@angular/core';\r\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\r\nimport { CdkAccordion } from './accordion';\r\nimport { BooleanInput } from '@angular/cdk/coercion';\r\n/**\r\n * An basic directive expected to be extended and decorated as a component.  Sets up all\r\n * events and attributes needed to be managed by a CdkAccordion parent.\r\n */\r\nexport declare class CdkAccordionItem implements OnDestroy {\r\n    accordion: CdkAccordion;\r\n    private _changeDetectorRef;\r\n    protected _expansionDispatcher: UniqueSelectionDispatcher;\r\n    /** Subscription to openAll/closeAll events. */\r\n    private _openCloseAllSubscription;\r\n    /** Event emitted every time the AccordionItem is closed. */\r\n    closed: EventEmitter<void>;\r\n    /** Event emitted every time the AccordionItem is opened. */\r\n    opened: EventEmitter<void>;\r\n    /** Event emitted when the AccordionItem is destroyed. */\r\n    destroyed: EventEmitter<void>;\r\n    /**\r\n     * Emits whenever the expanded state of the accordion changes.\r\n     * Primarily used to facilitate two-way binding.\r\n     * @docs-private\r\n     */\r\n    expandedChange: EventEmitter<boolean>;\r\n    /** The unique AccordionItem id. */\r\n    readonly id: string;\r\n    /** Whether the AccordionItem is expanded. */\r\n    get expanded(): any;\r\n    set expanded(expanded: any);\r\n    private _expanded;\r\n    /** Whether the AccordionItem is disabled. */\r\n    get disabled(): any;\r\n    set disabled(disabled: any);\r\n    private _disabled;\r\n    /** Unregister function for _expansionDispatcher. */\r\n    private _removeUniqueSelectionListener;\r\n    constructor(accordion: CdkAccordion, _changeDetectorRef: ChangeDetectorRef, _expansionDispatcher: UniqueSelectionDispatcher);\r\n    /** Emits an event for the accordion item being destroyed. */\r\n    ngOnDestroy(): void;\r\n    /** Toggles the expanded state of the accordion item. */\r\n    toggle(): void;\r\n    /** Sets the expanded state of the accordion item to false. */\r\n    close(): void;\r\n    /** Sets the expanded state of the accordion item to true. */\r\n    open(): void;\r\n    private _subscribeToOpenCloseAllActions;\r\n    static ngAcceptInputType_expanded: BooleanInput;\r\n    static ngAcceptInputType_disabled: BooleanInput;\r\n}\r\n"]}