{"version":3,"file":"accordion.js","sources":["../../../../../../src/cdk/accordion/accordion.ts","../../../../../../src/cdk/accordion/accordion-item.ts","../../../../../../src/cdk/accordion/accordion-module.ts","../../../../../../src/cdk/accordion/public-api.ts","../../../../../../src/cdk/accordion/index.ts"],"names":["nextId"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Directive, InjectionToken, Input, OnChanges, OnDestroy, SimpleChanges} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n/** Used to generate unique ID for each accordion. */\nlet nextId = 0;\n\n/**\n * Injection token that can be used to reference instances of `CdkAccordion`. It serves\n * as alternative token to the actual `CdkAccordion` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nexport const CDK_ACCORDION = new InjectionToken<CdkAccordion>('CdkAccordion');\n\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\n@Directive({\n  selector: 'cdk-accordion, [cdkAccordion]',\n  exportAs: 'cdkAccordion',\n  providers: [{provide: CDK_ACCORDION, useExisting: CdkAccordion}],\n})\nexport class CdkAccordion implements OnDestroy, OnChanges {\n  /** Emits when the state of the accordion changes */\n  readonly _stateChanges = new Subject<SimpleChanges>();\n\n  /** Stream that emits true/false when openAll/closeAll is triggered. */\n  readonly _openCloseAllActions: Subject<boolean> = new Subject<boolean>();\n\n  /** A readonly id value to use for unique selection coordination. */\n  readonly id = `cdk-accordion-${nextId++}`;\n\n  /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n  @Input()\n  get multi(): boolean { return this._multi; }\n  set multi(multi: boolean) { this._multi = coerceBooleanProperty(multi); }\n  private _multi: boolean = false;\n\n  /** Opens all enabled accordion items in an accordion where multi is enabled. */\n  openAll(): void {\n    if (this._multi) {\n      this._openCloseAllActions.next(true);\n    }\n  }\n\n  /** Closes all enabled accordion items in an accordion where multi is enabled. */\n  closeAll(): void {\n    this._openCloseAllActions.next(false);\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    this._stateChanges.next(changes);\n  }\n\n  ngOnDestroy() {\n    this._stateChanges.complete();\n    this._openCloseAllActions.complete();\n  }\n\n  static ngAcceptInputType_multi: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  Output,\n  Directive,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Optional,\n  ChangeDetectorRef,\n  SkipSelf,\n  Inject,\n} from '@angular/core';\nimport {UniqueSelectionDispatcher} from '@angular/cdk/collections';\nimport {CDK_ACCORDION, CdkAccordion} from './accordion';\nimport {BooleanInput, coerceBooleanProperty} from '@angular/cdk/coercion';\nimport {Subscription} from 'rxjs';\n\n/** Used to generate unique ID for each accordion item. */\nlet nextId = 0;\n\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\n@Directive({\n  selector: 'cdk-accordion-item, [cdkAccordionItem]',\n  exportAs: 'cdkAccordionItem',\n  providers: [\n    // Provide `CDK_ACCORDION` as undefined to prevent nested accordion items from\n    // registering to the same accordion.\n    {provide: CDK_ACCORDION, useValue: undefined},\n  ],\n})\nexport class CdkAccordionItem implements OnDestroy {\n  /** Subscription to openAll/closeAll events. */\n  private _openCloseAllSubscription = Subscription.EMPTY;\n  /** Event emitted every time the AccordionItem is closed. */\n  @Output() closed: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted every time the AccordionItem is opened. */\n  @Output() opened: EventEmitter<void> = new EventEmitter<void>();\n  /** Event emitted when the AccordionItem is destroyed. */\n  @Output() destroyed: EventEmitter<void> = new EventEmitter<void>();\n\n  /**\n   * Emits whenever the expanded state of the accordion changes.\n   * Primarily used to facilitate two-way binding.\n   * @docs-private\n   */\n  @Output() expandedChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  /** The unique AccordionItem id. */\n  readonly id: string = `cdk-accordion-child-${nextId++}`;\n\n  /** Whether the AccordionItem is expanded. */\n  @Input()\n  get expanded(): any { return this._expanded; }\n  set expanded(expanded: any) {\n    expanded = coerceBooleanProperty(expanded);\n\n    // Only emit events and update the internal value if the value changes.\n    if (this._expanded !== expanded) {\n      this._expanded = expanded;\n      this.expandedChange.emit(expanded);\n\n      if (expanded) {\n        this.opened.emit();\n        /**\n         * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n         * the name value is the id of the accordion.\n         */\n        const accordionId = this.accordion ? this.accordion.id : this.id;\n        this._expansionDispatcher.notify(this.id, accordionId);\n      } else {\n        this.closed.emit();\n      }\n\n      // Ensures that the animation will run when the value is set outside of an `@Input`.\n      // This includes cases like the open, close and toggle methods.\n      this._changeDetectorRef.markForCheck();\n    }\n  }\n  private _expanded = false;\n\n  /** Whether the AccordionItem is disabled. */\n  @Input()\n  get disabled() { return this._disabled; }\n  set disabled(disabled: any) { this._disabled = coerceBooleanProperty(disabled); }\n  private _disabled: boolean = false;\n\n  /** Unregister function for _expansionDispatcher. */\n  private _removeUniqueSelectionListener: () => void = () => {};\n\n  constructor(@Optional() @Inject(CDK_ACCORDION) @SkipSelf() public accordion: CdkAccordion,\n              private _changeDetectorRef: ChangeDetectorRef,\n              protected _expansionDispatcher: UniqueSelectionDispatcher) {\n    this._removeUniqueSelectionListener =\n      _expansionDispatcher.listen((id: string, accordionId: string) => {\n        if (this.accordion && !this.accordion.multi &&\n            this.accordion.id === accordionId && this.id !== id) {\n          this.expanded = false;\n        }\n      });\n\n    // When an accordion item is hosted in an accordion, subscribe to open/close events.\n    if (this.accordion) {\n      this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n    }\n  }\n\n  /** Emits an event for the accordion item being destroyed. */\n  ngOnDestroy() {\n    this.opened.complete();\n    this.closed.complete();\n    this.destroyed.emit();\n    this.destroyed.complete();\n    this._removeUniqueSelectionListener();\n    this._openCloseAllSubscription.unsubscribe();\n  }\n\n  /** Toggles the expanded state of the accordion item. */\n  toggle(): void {\n    if (!this.disabled) {\n      this.expanded = !this.expanded;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to false. */\n  close(): void {\n    if (!this.disabled) {\n      this.expanded = false;\n    }\n  }\n\n  /** Sets the expanded state of the accordion item to true. */\n  open(): void {\n    if (!this.disabled) {\n      this.expanded = true;\n    }\n  }\n\n  private _subscribeToOpenCloseAllActions(): Subscription {\n    return this.accordion._openCloseAllActions.subscribe(expanded => {\n      // Only change expanded state if item is enabled\n      if (!this.disabled) {\n        this.expanded = expanded;\n      }\n    });\n  }\n\n  static ngAcceptInputType_expanded: BooleanInput;\n  static ngAcceptInputType_disabled: BooleanInput;\n}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {NgModule} from '@angular/core';\nimport {CdkAccordion} from './accordion';\nimport {CdkAccordionItem} from './accordion-item';\n\n\n@NgModule({\n  exports: [CdkAccordion, CdkAccordionItem],\n  declarations: [CdkAccordion, CdkAccordionItem],\n})\nexport class CdkAccordionModule {}\n","/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {CdkAccordionItem} from './accordion-item';\nexport {CdkAccordion} from './accordion';\nexport * from './accordion-module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n\nexport {CDK_ACCORDION as ɵangular_material_src_cdk_accordion_accordion_a} from './accordion';"]}